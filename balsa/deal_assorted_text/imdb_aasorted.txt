Looking up params by name: Balsa_JOBRandSplit_IMDB_assorted
BalsaAgent params:
{
  adamw: None
  agent_checkpoint: None
  avoid_eq_filters: False
  beam: 20
  bs: 1024
  bushy: True
  check_hint: True
  cls: <class 'experiments.Balsa_JOBRandSplit_IMDB_assorted'>
  cost_model: "mincardcost"
  cross_entropy: False
  db: "imdbload"
  dedup_training_data: True
  drop_cache: True
  dropout: 0.0
  early_stop_on_skip_fraction: None
  ema_decay: 0.95
  engine: "postgres"
  engine_dialect_query_dir: None
  epochs: 100
  epsilon_greedy: 0
  epsilon_greedy_random_plan: False
  epsilon_greedy_random_transform: False
  epsilon_greedy_within_beam_search: False
  explore_soft_v: False
  explore_visit_counts: False
  explore_visit_counts_latency_sort: False
  explore_visit_counts_sort: True
  final_decay_rate: None
  finetune_out_mlp_only: False
  generic_ops_only_for_min_card_cost: False
  gradient_clip_val: 0
  increment_iter_despite_timeouts: True
  inherit_optimizer_state: False
  init_experience: "data/IMDB_assorted/initial_policy_data.pkl"
  initial_timeout_ms: None
  l2_lambda: 0
  label_transform_running_stats: False
  label_transforms: ['log1p', 'standardize']
  linear_decay_to_zero: False
  loss_type: None
  lr: 0.001
  lr_decay_iters: None
  lr_decay_rate: None
  lr_piecewise: [(0, 0.001), (60, 0.0005), (110, 0.00025), (160, 0.000125), (210, 0.0001)]
  on_policy: True
  param_noise: 0.0
  param_tau: 1.0
  per_transition_sgd_steps: -1
  perturb_query_features: None
  physical_execution_hindsight: False
  plan_physical: True
  planner_config: None
  pos_embs: True
  prev_replay_buffers_glob: None
  prev_replay_buffers_glob_val: None
  prev_replay_keep_last_fraction: 1
  query_dir: "queries/imdb_assorted"
  query_glob: ['*.sql']
  real_use_plan_restrictions: True
  reduce_lr_within_val_iter: False
  relax_timeout_factor: None
  relax_timeout_on_n_timeout_iters: None
  replay_buffer_reset_at_iter: None
  run_baseline: False
  search_method: "beam_bk"
  search_space_join_ops: ['Hash Join', 'Merge Join', 'Nested Loop']
  search_space_scan_ops: ['Index Scan', 'Index Only Scan', 'Seq Scan']
  search_until_n_complete_plans: 10
  sim: True
  sim_checkpoint: "checkpoints/IMDB_assorted/epoch=5.ckpt"
  sim_data_collection_intermediate_goals: True
  sim_query_featurizer: True
  sim_use_plan_restrictions: True
  skip_sim_init_iter_1p: False
  skip_training_on_expert: True
  skip_training_on_timeouts: False
  special_timeout_label: True
  test_after_n_iters: 0
  test_every_n_iters: 1
  test_query_glob: ['test28a.sql', 'test16d.sql', 'test10c.sql', 'test6e.sql', 'test17b.sql', 'test27c.sql', 'test33c.sql', 'test24a.sql', 'test29a.sql', 'test3c.sql', 'test22c.sql', 'test3a.sql', 'test16c.sql', 'test30b.sql', 'test28c.sql', 'test22b.sql', 'test4c.sql', 'test6c.sql']
  test_using_retrained_model: False
  timeout_slack: 2
  track_model_moving_averages: False
  tree_conv: True
  tree_conv_version: None
  update_label_stats_every_iter: True
  use_adaptive_lr: None
  use_adaptive_lr_decay_to_zero: None
  use_cache: True
  use_ema_source: False
  use_last_n_iters: -1
  use_local_execution: True
  use_new_data_only: False
  use_timeout: True
  v2: True
  val_iters: 20
  validate_early_stop_patience: 3
  validate_every_n_epochs: 5
  validate_fraction: 0.1
}
Connected to ray!  Resources: {'pg': 1.0, 'GPU': 3.0, 'accelerator_type:G': 1.0, 'CPU': 36.0, 'object_store_memory': 25794709094.0, 'memory': 51589418190.0, 'node:172.17.0.2': 1.0}
120 train queries: ['10a_bao', '10a_job', '10b_job', '11a_bao', '11a_job', '11b_job', '11c_baochanged', '12a_bao', '12a_job', '12b_job', '12c_baochanged', '13a_bao', '13a_job', '13b_job', '13c_baochanged', '14a_bao', '14a_job', '14b_job', '14c_baochanged', '15a_bao', '15a_job', '15b_job', '15c_baochanged', '16a_bao', '16b_jobchanged', '16c_baochanged', '16c_jobchanged', '17a_bao', '17b_jobchanged', '17c_baochanged', '17c_jobchanged', '18a_bao', '18b_jobchanged', '18c_baochanged', '18c_jobchanged', '19a_bao', '19b_jobchanged', '19c_baochanged', '19c_jobchanged', '1a_bao', '1a_job', '1b_job', '20a_bao', '20b_jobchanged', '20c_baochanged', '20c_jobchanged', '21a_bao', '21b_jobchanged', '21c_baochanged', '21c_jobchanged', '22a_bao', '22b_jobchanged', '22c_baochanged', '22c_jobchanged', '23a_bao', '23b_jobchanged', '23c_baochanged', '23c_jobchanged', '24a_bao', '24a_jobchanged', '24b_jobchanged', '24c_baochanged', '25a_bao', '25b_jobchanged', '25c_baochanged', '25c_jobchanged', '26a_bao', '26b_jobchanged', '26c_baochanged', '26c_jobchanged', '27a_bao', '27b_jobchanged', '27c_baochanged', '27c_jobchanged', '28a_bao', '28c_baochanged', '28c_jobchanged', '29a_bao', '29c_baochanged', '29c_jobchanged', '2a_bao', '2a_job', '2b_job', '30a_bao', '30c_baochanged', '30c_jobchanged', '31c_baochanged', '31c_jobchanged', '32b_jobchanged', '32c_baochanged', '33c_baochanged', '33c_jobchanged', '34c_baochanged', '35c_baochanged', '36c_baochanged', '37c_baochanged', '38c_baochanged', '39c_baochanged', '3a_bao', '3a_job', '3b_job', '40c_baochanged', '4a_bao', '4a_job', '4b_job', '5a_bao', '5a_job', '5b_job', '6a_bao', '6a_job', '6b_job', '7a_bao', '7a_job', '7b_job', '8a_bao', '8a_job', '8b_job', '9a_bao', '9a_job', '9b_job']
0 test queries: []
latency_expert/workload (seconds): 689.60 (120 queries)
latency_expert_test/workload (seconds): 0.00 (0 queries)
Number of joins [3, 16], avg 8.6
plans_lib.FilterScansOrJoins()
plans_lib.GatherUnaryFiltersInfo()
postgres.EstimateFilterRows()
305 unique filters
{('aka_name AS an', "(an.name ~~ '%a%'::text)"): 690766,
 ('cast_info AS ci', "((ci.note = '(archive footage)'::text) OR (ci.note IS NULL))"): 22040471,
 ('cast_info AS ci', "((ci.note = '(executive producer)'::text) OR (ci.note IS NULL))"): 22372469,
 ('cast_info AS ci', "((ci.note = '(writer)'::text) OR (ci.note IS NULL))"): 22241379,
 ('cast_info AS ci', '((ci.note = ANY (\'{(deviser),(producer),"(production assistant)","(senior producer)","(supervising producer)",(writer)}\'::text[])) OR (ci.note IS NULL))'): 23077311,
 ('cast_info AS ci', "((ci.note ~~ '%(voice)%'::text) AND (ci.note ~~ '%(uncredited)%'::text))"): 19373,
 ('cast_info AS ci', "(ci.note = '(producer)'::text)"): 1423314,
 ('cast_info AS ci', "(ci.note = '(voice)'::text)"): 690530,
 ('cast_info AS ci', "(ci.note = '(voice: English version)'::text)"): 89334,
 ('cast_info AS ci', '(ci.note = ANY (\'{"(voice) (uncredited)","(voice: English version)"}\'::text[]))'): 118308,
 ('cast_info AS ci', '(ci.note = ANY (\'{"(voice: Japanese version)","(voice) (uncredited)","(voice: English version)"}\'::text[]))'): 154524,
 ('cast_info AS ci', '(ci.note = ANY (\'{(producer),"(executive producer)"}\'::text[]))'): 2451866,
 ('cast_info AS ci', '(ci.note = ANY (\'{(voice),"(voice: Japanese version)","(voice) (uncredited)","(voice: English version)"}\'::text[]))'): 845055,
 ('cast_info AS ci', '(ci.note = ANY (\'{(writer),"(head writer)","(story editor)"}\'::text[]))'): 822118,
 ('cast_info AS ci', '(ci.note = ANY (\'{(writer),"(head writer)","(written by)",(story),"(story editor)"}\'::text[]))'): 1195149,
 ('cast_info AS ci', '(ci.note IS NULL)'): 21967802,
 ('cast_info AS ci', "(ci.note ~~ '%(producer)%'::text)"): 1485211,
 ('char_name AS chn', "((chn.name !~~ '%Sherlock%'::text) AND ((chn.name ~~ '%Tony%Stark%'::text) OR (chn.name ~~ '%Iron%Man%'::text)))"): 628,
 ('char_name AS chn', "((chn.name IS NOT NULL) AND ((chn.name ~~ '%man%'::text) OR (chn.name ~~ '%Man%'::text)))"): 125924,
 ('comp_cast_type AS cct1', "((cct1.kind)::text = 'cast'::text)"): 1,
 ('comp_cast_type AS cct1', "((cct1.kind)::text = 'complete+verified'::text)"): 1,
 ('comp_cast_type AS cct1', "((cct1.kind)::text = ANY ('{cast,crew}'::text[]))"): 2,
 ('comp_cast_type AS cct2', "((cct2.kind)::text = 'complete'::text)"): 1,
 ('comp_cast_type AS cct2', "((cct2.kind)::text = 'complete+verified'::text)"): 1,
 ('comp_cast_type AS cct2', "((cct2.kind)::text ~~ '%complete%'::text)"): 1,
 ('comp_cast_type AS cct2', "((cct2.kind)::text ~~ 'complete%'::text)"): 1,
 ('company_name AS cn', "(((cn.country_code)::text <> '[pl]'::text) AND ((cn.name ~~ '%Film%'::text) OR (cn.name ~~ '%Warner%'::text)))"): 59321,
 ('company_name AS cn', "(((cn.country_code)::text = '[us]'::text) AND (cn.name = 'DreamWorks Animation'::text))"): 1,
 ('company_name AS cn', "(((cn.country_code)::text = '[us]'::text) AND (cn.name = 'YouTube'::text))"): 1,
 ('company_name AS cn', "((cn.country_code)::text <> '[us]'::text)"): 125582,
 ('company_name AS cn', "((cn.country_code)::text = '[de]'::text)"): 10230,
 ('company_name AS cn', "((cn.country_code)::text = '[jp]'::text)"): 6329,
 ('company_name AS cn', "((cn.country_code)::text = '[nl]'::text)"): 2569,
 ('company_name AS cn', "((cn.country_code)::text = '[ru]'::text)"): 1363,
 ('company_name AS cn', "((cn.country_code)::text = '[uk]'::text)"): 22,
 ('company_name AS cn', "((cn.country_code)::text = '[us]'::text)"): 85578,
 ('company_name AS cn', '(cn.name = ANY (\'{"American Broadcasting Company (ABC)","Columbia Broadcasting System (CBS)","National Broadcasting Company (NBC)"}\'::text[]))'): 3,
 ('company_name AS cn', '(cn.name = ANY (\'{"Columbia Broadcasting System (CBS)","Fox Network","Independent Television (ITV)","Metro-Goldwyn-Mayer (MGM)","National Broadcasting Company (NBC)","Shout! Factory","Universal Pictures","Universal TV","Warner Bros"}\'::text[]))'): 10,
 ('company_name AS cn', '(cn.name = ANY (\'{"Columbia Broadcasting System (CBS)","Metro-Goldwyn-Mayer (MGM)","Paramount Pictures","Pathé Frères","Universal Pictures","Warner Home Video"}\'::text[]))'): 7,
 ('company_name AS cn', '(cn.name = ANY (\'{"Fox Network","Independent Television (ITV)","Metro-Goldwyn-Mayer (MGM)","National Broadcasting Company (NBC)","Paramount Pictures","Shout! Factory","Sony Pictures Home Entertainment","Universal Pictures","Universal TV"}\'::text[]))'): 10,
 ('company_name AS cn', '(cn.name = ANY (\'{ABS-CBN,"American Broadcasting Company (ABC)","British Broadcasting Corporation (BBC)"}\'::text[]))'): 3,
 ('company_name AS cn', "(cn.name ~~ 'Lionsgate%'::text)"): 23,
 ('company_name AS cn1', "((cn1.country_code)::text <> '[us]'::text)"): 125582,
 ('company_type AS ct', "((ct.kind IS NOT NULL) AND (((ct.kind)::text = 'production companies'::text) OR ((ct.kind)::text = 'distributors'::text)))"): 2,
 ('company_type AS ct', "((ct.kind)::text = 'distributors'::text)"): 1,
 ('company_type AS ct', "((ct.kind)::text = 'production companies'::text)"): 1,
 ('company_type AS ct', '((ct.kind)::text = ANY (\'{distributors,"production companies"}\'::text[]))'): 2,
 ('info_type AS it', "((it.info)::text = 'bottom 10 rank'::text)"): 1,
 ('info_type AS it', "((it.info)::text = 'mini biography'::text)"): 1,
 ('info_type AS it', "((it.info)::text = 'rating'::text)"): 1,
 ('info_type AS it', "((it.info)::text = 'release dates'::text)"): 1,
 ('info_type AS it', "((it.info)::text = 'top 250 rank'::text)"): 1,
 ('info_type AS it1', "((it1.info)::text = 'budget'::text)"): 1,
 ('info_type AS it1', "((it1.info)::text = 'countries'::text)"): 1,
 ('info_type AS it1', "((it1.info)::text = 'genres'::text)"): 1,
 ('info_type AS it1', '((it1.info)::text = \'rating\'::text COLLATE "C")'): 1,
 ('info_type AS it1', "((it1.info)::text = 'release dates'::text)"): 1,
 ('info_type AS it1', '(it1.id = 13)'): 1,
 ('info_type AS it1', '(it1.id = 18)'): 1,
 ('info_type AS it1', '(it1.id = 2)'): 1,
 ('info_type AS it1', '(it1.id = 3)'): 1,
 ('info_type AS it1', '(it1.id = 5)'): 1,
 ('info_type AS it1', '(it1.id = 7)'): 1,
 ('info_type AS it1', '(it1.id = 8)'): 1,
 ('info_type AS it2', "((it2.info)::text = 'bottom 10 rank'::text)"): 1,
 ('info_type AS it2', '((it2.info)::text = \'rating\'::text COLLATE "C")'): 1,
 ('info_type AS it2', "((it2.info)::text = 'rating'::text)"): 1,
 ('info_type AS it2', "((it2.info)::text = 'release dates'::text)"): 1,
 ('info_type AS it2', "((it2.info)::text = 'votes'::text)"): 1,
 ('info_type AS it2', '(it2.id = 18)'): 1,
 ('info_type AS it2', '(it2.id = 2)'): 1,
 ('info_type AS it2', '(it2.id = 3)'): 1,
 ('info_type AS it2', '(it2.id = 4)'): 1,
 ('info_type AS it2', '(it2.id = 6)'): 1,
 ('info_type AS it2', '(it2.id = 7)'): 1,
 ('info_type AS it2', '(it2.id = 8)'): 1,
 ('info_type AS it3', "((it3.info)::text = 'trivia'::text)"): 1,
 ('info_type AS it3', '(it3.id = 100)'): 1,
 ('info_type AS it4', '(it4.id = 101)'): 1,
 ('info_type AS it5', '(it5.id = 19)'): 1,
 ('info_type AS it5', '(it5.id = 25)'): 1,
 ('info_type AS it5', '(it5.id = 26)'): 1,
 ('info_type AS it5', '(it5.id = 31)'): 1,
 ('info_type AS it5', '(it5.id = 32)'): 1,
 ('info_type AS it5', '(it5.id = 34)'): 1,
 ('keyword AS k', "(k.keyword = '10,000-mile-club'::text)"): 1,
 ('keyword AS k', "(k.keyword = 'character-name-in-title'::text)"): 1,
 ('keyword AS k', "(k.keyword = 'computer-animation'::text)"): 1,
 ('keyword AS k', "(k.keyword = 'marvel-cinematic-universe'::text)"): 1,
 ('keyword AS k', "(k.keyword = 'sequel'::text)"): 1,
 ('keyword AS k', "(k.keyword = ANY ('{based-on-comic,tv-special,fight,violence,magnet,web,claw,laser}'::text[]))"): 8,
 ('keyword AS k', "(k.keyword = ANY ('{based-on-play,cigarette-smoking,friendship,independent-film,jealousy,lesbian-sex,male-nudity,marriage,mother-daughter-relationship,one-word-title,oral-sex,police,singing,song}'::text[]))"): 14,
 ('keyword AS k', "(k.keyword = ANY ('{based-on-play,dog,family-relationships,father-son-relationship,female-nudity,hardcore,husband-wife-relationship,independent-film,lesbian-sex,love,marriage,mother-daughter-relationship,nudity,one-word-title,police,sequel,sex,singer}'::text[]))"): 18,
 ('keyword AS k', "(k.keyword = ANY ('{death,father-son-relationship,bruce,gay,independent-film,lesbian-sex,mother-daughter-relationship,murder,number-in-title}'::text[]))"): 9,
 ('keyword AS k', "(k.keyword = ANY ('{death,father-son-relationship,fight,gay,independent-film,lesbian-sex,mother-daughter-relationship,murder,number-in-title}'::text[]))"): 9,
 ('keyword AS k', "(k.keyword = ANY ('{father-son-relationship,combat,gay,independent-film,lesbian-sex,mother-daughter-relationship,murder,number-in-title}'::text[]))"): 8,
 ('keyword AS k', "(k.keyword = ANY ('{fight,gay,independent-film,lesbian-sex,mother-daughter-relationship,murder,number-in-title}'::text[]))"): 7,
 ('keyword AS k', "(k.keyword = ANY ('{hero,martial-arts,hand-to-hand-combat,computer-animated-movie}'::text[]))"): 4,
 ('keyword AS k', "(k.keyword = ANY ('{hero,martial-arts,hand-to-hand-combat}'::text[]))"): 3,
 ('keyword AS k', "(k.keyword = ANY ('{murder,blood,gore,death,female-nudity}'::text[]))"): 5,
 ('keyword AS k', "(k.keyword = ANY ('{murder,murder-in-title,blood,violence}'::text[]))"): 4,
 ('keyword AS k', "(k.keyword = ANY ('{murder,murder-in-title}'::text[]))"): 2,
 ('keyword AS k', "(k.keyword = ANY ('{murder,violence,blood,gore,death,female-nudity,hospital}'::text[]))"): 7,
 ('keyword AS k', "(k.keyword = ANY ('{nerd,loner,alienation,dignity}'::text[]))"): 4,
 ('keyword AS k', "(k.keyword = ANY ('{superhero,marvel-comics,based-on-comic,fight}'::text[]))"): 4,
 ('keyword AS k', "(k.keyword = ANY ('{superhero,marvel-comics,based-on-comic,tv-special,fight,violence,magnet,web,claw,laser}'::text[]))"): 10,
 ('keyword AS k', "(k.keyword = ANY ('{superhero,sequel,second-part,marvel-comics,based-on-comic,tv-special,fight,violence}'::text[]))"): 8,
 ('keyword AS k', "(k.keyword ~~ '%sequel%'::text)"): 13,
 ('kind_type AS kt', "((kt.kind)::text = 'episode'::text)"): 1,
 ('kind_type AS kt', "((kt.kind)::text = 'movie'::text)"): 1,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{"tv movie","tv series","video game"}\'::text[]))'): 3,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{"tv movie","video movie"}\'::text[]))'): 2,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{"tv series","video game","video movie"}\'::text[]))'): 3,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{"tv series","video movie"}\'::text[]))'): 2,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{episode,movie,"tv movie"}\'::text[]))'): 3,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{episode,movie,"video movie"}\'::text[]))'): 3,
 ('kind_type AS kt', "((kt.kind)::text = ANY ('{episode,movie}'::text[]))"): 2,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{movie,"tv movie","tv series"}\'::text[]))'): 3,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{movie,"tv movie","video movie","video game"}\'::text[]))'): 4,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{movie,"tv series"}\'::text[]))'): 2,
 ('kind_type AS kt', "((kt.kind)::text = ANY ('{movie,episode}'::text[]))"): 2,
 ('kind_type AS kt1', '((kt1.kind)::text = ANY (\'{"tv series",episode}\'::text[]))'): 2,
 ('kind_type AS kt2', '((kt2.kind)::text = ANY (\'{"tv series",episode}\'::text[]))'): 2,
 ('link_type AS lt', "((lt.link)::text = 'features'::text)"): 1,
 ('link_type AS lt', '((lt.link)::text = ANY (\'{sequel,follows,"followed by"}\'::text[]))'): 3,
 ('link_type AS lt', "((lt.link)::text ~~ '%follow%'::text)"): 1,
 ('link_type AS lt', "((lt.link)::text ~~ '%follows%'::text)"): 1,
 ('movie_companies AS mc', "((mc.note !~~ '%(USA)%'::text) AND (mc.note ~~ '%(200%)%'::text))"): 145456,
 ('movie_companies AS mc', "((mc.note !~~ '%(as Metro-Goldwyn-Mayer Pictures)%'::text) AND ((mc.note ~~ '%(co-production)%'::text) OR (mc.note ~~ '%(presents)%'::text)))"): 18288,
 ('movie_companies AS mc', "((mc.note IS NOT NULL) AND ((mc.note ~~ '%(USA)%'::text) OR (mc.note ~~ '%(worldwide)%'::text)))"): 290493,
 ('movie_companies AS mc', "((mc.note ~~ '%(200%)%'::text) AND ((mc.note ~~ '%(USA)%'::text) OR (mc.note ~~ '%(worldwide)%'::text)))"): 97391,
 ('movie_companies AS mc', "((mc.note ~~ '%(200%)%'::text) AND (mc.note ~~ '%(worldwide)%'::text))"): 14724,
 ('movie_companies AS mc', "((mc.note ~~ '%(Japan)%'::text) AND (mc.note !~~ '%(USA)%'::text) AND ((mc.note ~~ '%(2006)%'::text) OR (mc.note ~~ '%(2007)%'::text)))"): 536,
 ('movie_companies AS mc', "((mc.note ~~ '%(Japan)%'::text) AND (mc.note !~~ '%(USA)%'::text))"): 11423,
 ('movie_companies AS mc', "((mc.note ~~ '%(VHS)%'::text) AND (mc.note ~~ '%(USA)%'::text) AND (mc.note ~~ '%(1994)%'::text))"): 52,
 ('movie_companies AS mc', "((mc.note ~~ '%(theatrical)%'::text) AND (mc.note ~~ '%(France)%'::text))"): 7837,
 ('movie_companies AS mc', "(mc.note !~~ '%(as Metro-Goldwyn-Mayer Pictures)%'::text)"): 1340478,
 ('movie_companies AS mc', '(mc.note IS NULL)'): 1268559,
 ('movie_info AS mi', "((mi.info IS NOT NULL) AND ((mi.info ~~ 'Japan:%200%'::text) OR (mi.info ~~ 'USA:%200%'::text)))"): 458197,
 ('movie_info AS mi', "((mi.info IS NOT NULL) AND ((mi.info ~~ 'Japan:%2007%'::text) OR (mi.info ~~ 'USA:%2008%'::text)))"): 230835,
 ('movie_info AS mi', "((mi.info IS NOT NULL) AND ((mi.info ~~ 'Japan:%201%'::text) OR (mi.info ~~ 'USA:%201%'::text)))"): 154143,
 ('movie_info AS mi', "((mi.info IS NOT NULL) AND (mi.note ~~ '%internet%'::text) AND ((mi.info ~~ 'USA:% 199%'::text) OR (mi.info ~~ 'USA:% 200%'::text)))"): 560,
 ('movie_info AS mi', "((mi.note IS NULL) AND (mi.info = ANY ('{Horror,Thriller}'::text[])))"): 70758,
 ('movie_info AS mi', "((mi.note ~~ '%internet%'::text) AND (mi.info ~~ 'USA:% 200%'::text))"): 469,
 ('movie_info AS mi', "(mi.info = 'Bulgaria'::text)"): 391,
 ('movie_info AS mi', "(mi.info = 'Horror'::text)"): 34687,
 ('movie_info AS mi', "(mi.info = ANY ('{Drama,Horror}'::text[]))"): 286907,
 ('movie_info AS mi', "(mi.info = ANY ('{German,USA,American}'::text[]))"): 615334,
 ('movie_info AS mi', "(mi.info = ANY ('{Germany,German,USA,American}'::text[]))"): 667364,
 ('movie_info AS mi', "(mi.info = ANY ('{Germany,German}'::text[]))"): 121899,
 ('movie_info AS mi', "(mi.info = ANY ('{Horror,Action,Sci-Fi,Thriller,Crime,War}'::text[]))"): 208615,
 ('movie_info AS mi', "(mi.info = ANY ('{Sweden,Germany,Swedish,German}'::text[]))"): 134182,
 ('movie_info AS mi', "(mi.info = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Danish,Norwegian,German,USA,American}'::text[]))"): 706196,
 ('movie_info AS mi', "(mi.info = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Denish,Norwegian,German,English}'::text[]))"): 911342,
 ('movie_info AS mi', "(mi.info = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Denish,Norwegian,German,USA,American}'::text[]))"): 693703,
 ('movie_info AS mi', "(mi.info = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Denish,Norwegian,German}'::text[]))"): 148237,
 ('movie_info AS mi', "(mi.info = ANY ('{USA,America}'::text[]))"): 545465,
 ('movie_info AS mi1', '((mi1.info = ANY (\'{"Black and White",Color}\'::text[])) AND (mi1.info_type_id = 2))'): 123057,
 ('movie_info AS mi1', "((mi1.info = ANY ('{Crime,Drama}'::text[])) AND (mi1.info_type_id = 3))"): 31429,
 ('movie_info AS mi1', "((mi1.info_type_id = 13) AND (mi1.info = 'Mono'::text))"): 2534,
 ('movie_info AS mi1', '((mi1.info_type_id = 18) AND (mi1.info = ANY (\'{"Buenos Aires, Federal District, Argentina","Los Angeles, California, USA",Mexico,"New York City, New York, USA","Paramount Studios - 5555 Melrose Avenue, Hollywood, Los Angeles, California, USA"}\'::text[])))'): 3365,
 ('movie_info AS mi1', "((mi1.info_type_id = 2) AND (mi1.info = 'Black and White'::text))"): 26886,
 ('movie_info AS mi1', "((mi1.info_type_id = 2) AND (mi1.info = 'Color'::text))"): 96170,
 ('movie_info AS mi1', "((mi1.info_type_id = 3) AND (mi1.info = ANY ('{Adventure,Animation,Crime,Drama}'::text[])))"): 39922,
 ('movie_info AS mi1', "((mi1.info_type_id = 3) AND (mi1.info = ANY ('{Fantasy,Mystery,Short}'::text[])))"): 48469,
 ('movie_info AS mi1', "((mi1.info_type_id = 5) AND (mi1.info = ANY ('{Argentina:Atp,Canada:G,Iceland:L,UK:X,USA:X}'::text[])))"): 1198,
 ('movie_info AS mi1', '((mi1.info_type_id = 7) AND (mi1.info = ANY (\'{"CAM:Panavision Cameras and Lenses","OFM:16 mm","OFM:35 mm",OFM:Video,PCS:Spherical,"PFM:35 mm","RAT:1.33 : 1","RAT:1.37 : 1","RAT:1.66 : 1","RAT:1.78 : 1","RAT:2.35 : 1",RAT:4:3}\'::text[])))'): 92722,
 ('movie_info AS mi1', '((mi1.info_type_id = 7) AND (mi1.info = ANY (\'{"MET:600 m","OFM:35 mm",PCS:Spherical,"PFM:35 mm","RAT:1.37 : 1"}\'::text[])))'): 62815,
 ('movie_info AS mi1', '((mi1.info_type_id = 7) AND (mi1.info = ANY (\'{"OFM:35 mm",OFM:Live,"PFM:35 mm","RAT:1.33 : 1"}\'::text[])))'): 67817,
 ('movie_info AS mi1', '((mi1.info_type_id = 7) AND (mi1.info = ANY (\'{"PFM:35 mm","RAT:1.33 : 1","RAT:1.66 : 1","RAT:1.85 : 1"}\'::text[])))'): 47860,
 ('movie_info AS mi1', '((mi1.info_type_id = 7) AND (mi1.info = ANY (\'{MET:,"OFM:35 mm","PCS:Digital Intermediate","PFM:35 mm",PFM:Video,"RAT:1.33 : 1","RAT:1.37 : 1"}\'::text[])))'): 72682,
 ('movie_info AS mi1', "((mi1.info_type_id = 8) AND (mi1.info = ANY ('{Austria,Belgium,Brazil,Denmark,France,Mexico,Spain,UK,USA,Yugoslavia}'::text[])))"): 77535,
 ('movie_info AS mi1', "((mi1.info_type_id = 8) AND (mi1.info = ANY ('{Austria,Belgium,Brazil,Hungary,India,Mexico,Poland,Spain}'::text[])))"): 13262,
 ('movie_info AS mi1', "((mi1.info_type_id = 8) AND (mi1.info = ANY ('{Brazil,Denmark,France,Mexico,Spain,UK,USA,Yugoslavia}'::text[])))"): 76385,
 ('movie_info AS mi1', "((mi1.info_type_id = 8) AND (mi1.info = ANY ('{Brazil,India,Ireland,Italy,Netherlands,Philippines,Poland,USA}'::text[])))"): 58849,
 ('movie_info AS mi1', '((mi1.info_type_id = 8) AND (mi1.info = ANY (\'{Italy,Japan,China,"West Germany"}\'::text[])))'): 9311,
 ('movie_info AS mi1', '((mi1.info_type_id = 8) AND (mi1.info = ANY (\'{Italy,Japan,Nigeria,Spain,"West Germany"}\'::text[])))'): 14172,
 ('movie_info AS mi1', "(mi1.info = 'Mono'::text)"): 210597,
 ('movie_info AS mi1', '(mi1.info = ANY (\'{"Hong Kong",Poland,Portugal,"South Korea","Soviet Union",Sweden,Switzerland,Turkey,Yugoslavia}\'::text[]))'): 25033,
 ('movie_info AS mi1', '(mi1.info = ANY (\'{"OFM:35 mm",PCS:Spherical,"PFM:35 mm",PFM:Video,"RAT:1.33 : 1","RAT:1.37 : 1"}\'::text[]))'): 914734,
 ('movie_info AS mi1', '(mi1.info = ANY (\'{Biography,Fantasy,"OFM:35 mm",OFM:Video,Romance,Sci-Fi,Sport,Thriller}\'::text[]))'): 444484,
 ('movie_info AS mi1', "(mi1.info = ANY ('{Color,OFM:Live,OFM:Video,PFM:Video}'::text[]))"): 1104415,
 ('movie_info AS mi1', '(mi1.info = ANY (\'{PCS:Spherical,"PFM:35 mm","RAT:1.33 : 1","RAT:1.37 : 1"}\'::text[]))'): 650125,
 ('movie_info AS mi2', '((mi2.info = ANY (\'{"Black and White",Color}\'::text[])) AND (mi2.info_type_id = 2))'): 123057,
 ('movie_info AS mi2', "((mi2.info = ANY ('{Mono,Silent}'::text[])) AND (mi2.info_type_id = 6))"): 11107,
 ('movie_info AS mi2', '((mi2.info_type_id = 18) AND (mi2.info = ANY (\'{"20th Century Fox Studios - 10201 Pico Blvd., Century City, Los Angeles, California, USA","Desilu Studios - 9336 W. Washington Blvd., Culver City, California, USA","Hal Roach Studios - 8822 Washington Blvd., Culver City, California, USA","New York City, New York, USA","Revue Studios, Hollywood, Los Angeles, California, USA","Universal Studios - 100 Universal City Plaza, Universal City, California, USA","Warner Brothers Burbank Studios - 4000 Warner Boulevard, Burbank, California, USA"}\'::text[])))'): 804,
 ('movie_info AS mi2', "((mi2.info_type_id = 3) AND (mi2.info = ANY ('{Adult,Comedy,Documentary,Drama,Mystery,Romance,Short,Thriller,Western}'::text[])))"): 130735,
 ('movie_info AS mi2', "((mi2.info_type_id = 4) AND (mi2.info = ANY ('{English,French,Italian,Malayalam,Polish,Portuguese,Tagalog}'::text[])))"): 72459,
 ('movie_info AS mi2', '((mi2.info_type_id = 7) AND (mi2.info = ANY (\'{"LAB:FotoKem Laboratory, Burbank (CA), USA",MET:,"MET:300 m",PCS:Spherical,"RAT:1.33 : 1","RAT:1.66 : 1"}\'::text[])))'): 34919,
 ('movie_info AS mi2', '((mi2.info_type_id = 7) AND (mi2.info = ANY (\'{"OFM:35 mm","PFM:35 mm","RAT:1.33 : 1"}\'::text[])))'): 67781,
 ('movie_info AS mi2', '((mi2.info_type_id = 8) AND (mi2.info = ANY (\'{"East Germany","Hong Kong",Italy,Taiwan,UK,USA,"West Germany"}\'::text[])))'): 64281,
 ('movie_info AS mi2', "((mi2.info_type_id = 8) AND (mi2.info = ANY ('{Japan,Mexico,Portugal,Spain,UK,USA}'::text[])))"): 73095,
 ('movie_info_idx AS mi_idx', "(mi_idx.info < '7.0'::text)"): 1170254,
 ('movie_info_idx AS mi_idx', "(mi_idx.info < '8.5'::text)"): 1338567,
 ('movie_info_idx AS mi_idx', "(mi_idx.info > '5.0'::text)"): 518871,
 ('movie_info_idx AS mi_idx', "(mi_idx.info > '6.0'::text)"): 373424,
 ('movie_info_idx AS mi_idx', "(mi_idx.info > '8.0'::text)"): 53792,
 ('movie_info_idx AS mi_idx', "(mi_idx.info > '9.0'::text)"): 9408,
 ('movie_info_idx AS mi_idx2', "(mi_idx2.info < '3.5'::text)"): 684800,
 ('movie_info_idx AS mii1', "((mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info_type_id = 100) AND ('0'::double precision <= (mii1.info)::double precision) AND ((mii1.info)::double precision <= '1000'::double precision))"): 1188,
 ('movie_info_idx AS mii1', "((mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info_type_id = 100) AND ('0'::double precision <= (mii1.info)::double precision) AND ((mii1.info)::double precision <= '10000'::double precision))"): 1188,
 ('movie_info_idx AS mii1', "((mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info_type_id = 100) AND ('1000'::double precision <= (mii1.info)::double precision) AND ((mii1.info)::double precision <= '10000'::double precision))"): 1188,
 ('movie_info_idx AS mii1', "((mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info_type_id = 100) AND ('5000'::double precision <= (mii1.info)::double precision) AND ((mii1.info)::double precision <= '500000'::double precision))"): 1188,
 ('movie_info_idx AS mii2', "((mii2.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii2.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii2.info_type_id = 101) AND ((mii2.info)::double precision <= '11'::double precision) AND ('7'::double precision <= (mii2.info)::double precision))"): 1151,
 ('movie_info_idx AS mii2', "((mii2.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii2.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii2.info_type_id = 101) AND ((mii2.info)::double precision <= '7'::double precision) AND ('3'::double precision <= (mii2.info)::double precision))"): 1151,
 ('movie_info_idx AS mii2', "((mii2.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii2.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii2.info_type_id = 101) AND ((mii2.info)::double precision <= '8'::double precision) AND ('0'::double precision <= (mii2.info)::double precision))"): 1151,
 ('name AS n', "((((n.gender)::text = 'f'::text) OR (n.gender IS NULL)) AND (((n.name_pcode_nf)::text = 'C6235'::text) OR (n.name_pcode_nf IS NULL)))"): 63114,
 ('name AS n', "((((n.gender)::text = 'f'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_nf)::text = ANY ('{A5136,B4532,C6435,H4524,J2451,J6362,L2525,M6415,S4125,W5245}'::text[])))"): 1642,
 ('name AS n', "((((n.gender)::text = 'm'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_cf)::text = ANY ('{A2365,A6252,C52,D1614,E1524,E2163,L1214,L2,P5215,Q5325,R2425,S1452,T5212,V4524,V4626}'::text[])))"): 6427,
 ('name AS n', "((((n.gender)::text = 'm'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_nf)::text = ANY ('{A4163,B6563,D1316,F6521,F6523,F6524,J5216,J5262,P3616}'::text[])))"): 29197,
 ('name AS n', "((((n.gender)::text = 'm'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_nf)::text = ANY ('{B6514,D1352,J5163,J5245,M2423,M6126,M6241,M6245,M6252,P3614,V2361,W4125,W4525}'::text[])))"): 17162,
 ('name AS n', "((((n.gender)::text = 'm'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_nf)::text = ANY ('{D2313,E3261,G625,J5141,K1524,L2125,M2563,M265,M3215,P3625,S5326,S6256,T5252}'::text[])))"): 9455,
 ('name AS n', "((((n.gender)::text = 'm'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_nf)::text = ANY ('{M2423,M6126,M6241,M6245,M6252,P3614,V2361,W4125,W4525}'::text[])))"): 9733,
 ('name AS n', "((((n.gender)::text = ANY ('{f,m}'::text[])) OR (n.gender IS NULL)) AND ((n.name_pcode_cf)::text = ANY ('{A5362,J5252,R1632,R2632,W4525}'::text[])))"): 31244,
 ('name AS n', "((((n.name_pcode_nf)::text = ANY ('{C6235,E4213}'::text[])) OR (n.name_pcode_nf IS NULL)) AND ((n.gender)::text = 'f'::text))"): 31515,
 ('name AS n', "(((n.gender)::text = 'm'::text) AND (((n.surname_pcode)::text = ANY ('{B4,B6,C462,D12,D25,G65,H65,J525,K5,P6,P62,R3,S5}'::text[])) OR (n.surname_pcode IS NULL)))"): 433106,
 ('name AS n', "(((n.gender)::text = 'm'::text) AND ((n.name_pcode_cf)::text = ANY ('{B6261,B6526,J5252,M6352,R363,S3152,S5362}'::text[])))"): 16478,
 ('name AS n', "(((n.gender)::text = 'm'::text) AND ((n.name_pcode_nf)::text = ANY ('{C6231,F6362,F6525,J513,R1631,R1632,R1636,R2631,S2153}'::text[])))"): 22903,
 ('name AS n', "(((n.gender)::text = 'm'::text) OR (n.gender IS NULL))"): 2581078,
 ('name AS n', "(((n.gender)::text = ANY ('{f,m}'::text[])) AND ((n.surname_pcode)::text = ANY ('{C4,C62,C632,D5,F6,F63,G63,H2,L5,M245,S,S6}'::text[])))"): 49735,
 ('name AS n', "(((n.name_pcode_cf)::text >= 'A'::text) AND ((n.name_pcode_cf)::text <= 'F'::text) AND (((n.gender)::text = 'm'::text) OR (((n.gender)::text = 'f'::text) AND (n.name ~~ 'B%'::text))))"): 480835,
 ('name AS n', "(((n.name_pcode_cf)::text ~~ 'D%'::text) AND ((n.gender)::text = 'm'::text))"): 97627,
 ('name AS n', "((n.gender IS NOT NULL) AND ((n.gender)::text = 'f'::text))"): 639999,
 ('name AS n', "((n.gender IS NULL) AND (((n.name_pcode_nf)::text = ANY ('{A4163,A4253,A5362,A6532,C5321,C6231,C6235,R516,R5316,S3152,S3521}'::text[])) OR (n.name_pcode_nf IS NULL)))"): 69743,
 ('name AS n', "((n.gender)::text = 'f'::text)"): 982547,
 ('name AS n', "((n.gender)::text = 'm'::text)"): 1731995,
 ('name AS n', "((n.gender)::text = ANY ('{f,m}'::text[]))"): 2714543,
 ('name AS n', "((n.name ~~ '%An%'::text) AND ((n.gender)::text = 'f'::text))"): 29774,
 ('name AS n', "((n.name ~~ '%Ang%'::text) AND ((n.gender)::text = 'f'::text))"): 98,
 ('name AS n', "((n.name ~~ '%Angel%'::text) AND ((n.gender)::text = 'f'::text))"): 98,
 ('name AS n', "((n.name ~~ '%Tim%'::text) AND ((n.gender)::text = 'm'::text))"): 17495,
 ('name AS n', "((n.name ~~ '%Yo%'::text) AND (n.name !~~ '%Yu%'::text))"): 84183,
 ('name AS n', '(n.gender IS NULL)'): 1452914,
 ('name AS n', "(n.name ~~ '%Downey%Robert%'::text)"): 417,
 ('name AS n', "(n.name ~~ 'B%'::text)"): 336764,
 ('name AS n', "(n.name ~~ 'X%'::text)"): 417,
 ('name AS n', "(n.name ~~ 'Z%'::text)"): 42096,
 ('name AS n1', "((n1.name ~~ '%Yo%'::text) AND (n1.name !~~ '%Yu%'::text))"): 84183,
 ('person_info AS pi', "(pi.note = 'Volker Boehm'::text)"): 29,
 ('person_info AS pi1', '(pi1.info_type_id = 19)'): 83524,
 ('person_info AS pi1', '(pi1.info_type_id = 25)'): 427503,
 ('person_info AS pi1', '(pi1.info_type_id = 26)'): 136603,
 ('person_info AS pi1', '(pi1.info_type_id = 31)'): 6721,
 ('person_info AS pi1', '(pi1.info_type_id = 32)'): 9588,
 ('person_info AS pi1', '(pi1.info_type_id = 34)'): 20263,
 ('role_type AS rt', "((rt.role)::text = 'actor'::text)"): 1,
 ('role_type AS rt', "((rt.role)::text = 'actress'::text)"): 1,
 ('role_type AS rt', "((rt.role)::text = 'miscellaneous crew'::text)"): 1,
 ('role_type AS rt', "((rt.role)::text = 'producer'::text)"): 1,
 ('role_type AS rt', "((rt.role)::text = 'production designer'::text)"): 1,
 ('role_type AS rt', '((rt.role)::text = ANY (\'{"costume designer","production designer"}\'::text[]))'): 2,
 ('role_type AS rt', '((rt.role)::text = ANY (\'{"miscellaneous crew",producer}\'::text[]))'): 2,
 ('role_type AS rt', "((rt.role)::text = ANY ('{actor,actress}'::text[]))"): 2,
 ('role_type AS rt', '((rt.role)::text = ANY (\'{actor,composer,"miscellaneous crew",producer,"production designer"}\'::text[]))'): 5,
 ('role_type AS rt', "((rt.role)::text = ANY ('{actor,director,writer}'::text[]))"): 3,
 ('role_type AS rt', "((rt.role)::text = ANY ('{actor,producer}'::text[]))"): 2,
 ('role_type AS rt', "((rt.role)::text = ANY ('{actor,writer}'::text[]))"): 2,
 ('role_type AS rt', "((rt.role)::text = ANY ('{actress,cinematographer,writer}'::text[]))"): 3,
 ('role_type AS rt', "((rt.role)::text = ANY ('{actress,writer}'::text[]))"): 2,
 ('role_type AS rt', '((rt.role)::text = ANY (\'{cinematographer,composer,director,editor,"miscellaneous crew",producer,"production designer",writer}\'::text[]))'): 8,
 ('role_type AS rt', "((rt.role)::text = ANY ('{cinematographer,composer}'::text[]))"): 2,
 ('role_type AS rt', "((rt.role)::text = ANY ('{director,producer}'::text[]))"): 2,
 ('role_type AS rt', "((rt.role)::text = ANY ('{editor,writer}'::text[]))"): 2,
 ('title AS t', '((t.production_year <= 1975) AND (t.production_year >= 1875))'): 457842,
 ('title AS t', '((t.production_year <= 1975) AND (t.production_year >= 1925))'): 353956,
 ('title AS t', '((t.production_year <= 1990) AND (t.production_year >= 1950))'): 545566,
 ('title AS t', '((t.production_year <= 2008) AND (t.production_year >= 1952))'): 1617245,
 ('title AS t', '((t.production_year <= 2010) AND (t.production_year >= 1950))'): 1898081,
 ('title AS t', '((t.production_year <= 2010) AND (t.production_year >= 1952))'): 1888172,
 ('title AS t', '((t.production_year <= 2010) AND (t.production_year >= 1990))'): 1376866,
 ('title AS t', '((t.production_year <= 2011) AND (t.production_year >= 1949))'): 2066691,
 ('title AS t', '((t.production_year <= 2015) AND (1925 < t.production_year))'): 2352208,
 ('title AS t', '((t.production_year <= 2015) AND (2000 < t.production_year))'): 1367146,
 ('title AS t', '((t.production_year <= 2015) AND (t.production_year >= 1925))'): 2356669,
 ('title AS t', '((t.production_year <= 2015) AND (t.production_year >= 1975))'): 2016445,
 ('title AS t', '((t.production_year <= 2015) AND (t.production_year >= 1990))'): 1770494,
 ('title AS t', "((t.production_year > 2000) AND ((t.title ~~ 'Birdemic%'::text) OR (t.title ~~ '%Movie%'::text)))"): 254,
 ('title AS t', "((t.production_year > 2010) AND ((t.title ~~ '%murder%'::text) OR (t.title ~~ '%Murder%'::text) OR (t.title ~~ '%Mord%'::text)))"): 110,
 ('title AS t', "((t.production_year > 2010) AND (t.title ~~ 'Kung Fu Panda%'::text))"): 37,
 ('title AS t', "((t.production_year > 2010) AND (t.title ~~ 'Vampire%'::text))"): 37,
 ('title AS t', '((t.production_year >= 1950) AND (t.production_year <= 2000))'): 924563,
 ('title AS t', '((t.production_year >= 1950) AND (t.production_year <= 2010))'): 1898081,
 ('title AS t', '((t.production_year >= 1980) AND (t.production_year <= 1984))'): 78386,
 ('title AS t', '((t.production_year >= 1980) AND (t.production_year <= 1995))'): 347588,
 ('title AS t', '((t.production_year >= 2000) AND (t.production_year <= 2010))'): 1030486,
 ('title AS t', '((t.production_year >= 2005) AND (t.production_year <= 2008))'): 440098,
 ('title AS t', '((t.production_year >= 2005) AND (t.production_year <= 2010))'): 711026,
 ('title AS t', '((t.production_year >= 2005) AND (t.production_year <= 2015))'): 1104654,
 ('title AS t', "((t.production_year >= 2006) AND (t.production_year <= 2007) AND ((t.title ~~ 'One Piece%'::text) OR (t.title ~~ 'Dragon Ball Z%'::text)))"): 42,
 ('title AS t', "((t.production_year >= 2007) AND (t.production_year <= 2008) AND (t.title ~~ '%Kung%Fu%Panda%'::text))"): 22,
 ('title AS t', '((t.production_year >= 2007) AND (t.production_year <= 2010))'): 508113,
 ('title AS t', '((t.production_year >= 2008) AND (t.production_year <= 2014))'): 785891,
 ('title AS t', "((t.title <> ''::text) AND ((t.title ~~ '%Champion%'::text) OR (t.title ~~ '%Loser%'::text)))"): 470,
 ('title AS t', "((t.title ~~ '%Money%'::text) AND (t.production_year = 1998))"): 5,
 ('title AS t', '(t.episode_nr < 100)'): 937760,
 ('title AS t', '(t.production_year = 1998)'): 49389,
 ('title AS t', '(t.production_year > 1950)'): 2285164,
 ('title AS t', '(t.production_year > 1970)'): 2069943,
 ('title AS t', '(t.production_year > 1990)'): 1746167,
 ('title AS t', '(t.production_year > 2000)'): 1367170,
 ('title AS t', '(t.production_year > 2005)'): 1006917,
 ('title AS t', '(t.production_year > 2009)'): 540578,
 ('title AS t', '(t.production_year > 2010)'): 393652,
 ('title AS t', '(t.production_year > 2014)'): 47,
 ('title AS t2', '((t2.production_year >= 2000) AND (t2.production_year <= 2010))'): 1030486}
costs stats mean 16.462356567382812 std 1.2829639911651611
Number of model parameters: 2301732 (~= 8.8MB)
SimModel(
  (tree_conv): TreeConvolution(
    (attention_merger_3): AttentionMerger(
      (softmax): Softmax(dim=0)
    )
    (query_mlp): Sequential(
      (0): Linear(in_features=46, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
      (2): LeakyReLU(negative_slope=0.01)
      (3): Linear(in_features=128, out_features=64, bias=True)
      (4): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
      (5): LeakyReLU(negative_slope=0.01)
      (6): Linear(in_features=64, out_features=32, bias=True)
    )
    (conv_module_list_other): ModuleList(
      (0): Sequential(
        (0): TreeConv1d(
          (weights): Conv1d(173, 512, kernel_size=(3,), stride=(3,))
        )
        (1): TreeStandardize()
        (2): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (3): TreeConv1d(
          (weights): Conv1d(512, 256, kernel_size=(3,), stride=(3,))
        )
        (4): TreeStandardize()
        (5): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (6): TreeConv1d(
          (weights): Conv1d(256, 128, kernel_size=(3,), stride=(3,))
        )
        (7): TreeStandardize()
        (8): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (9): TreeMaxPool()
      )
    )
    (conv_module_list_hash_join): ModuleList(
      (0): Sequential(
        (0): TreeConv1d(
          (weights): Conv1d(173, 512, kernel_size=(3,), stride=(3,))
        )
        (1): TreeStandardize()
        (2): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (3): TreeConv1d(
          (weights): Conv1d(512, 256, kernel_size=(3,), stride=(3,))
        )
        (4): TreeStandardize()
        (5): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (6): TreeConv1d(
          (weights): Conv1d(256, 128, kernel_size=(3,), stride=(3,))
        )
        (7): TreeStandardize()
        (8): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (9): TreeMaxPool()
      )
    )
    (conv_module_list_nested_loop_join): ModuleList(
      (0): Sequential(
        (0): TreeConv1d(
          (weights): Conv1d(173, 512, kernel_size=(3,), stride=(3,))
        )
        (1): TreeStandardize()
        (2): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (3): TreeConv1d(
          (weights): Conv1d(512, 256, kernel_size=(3,), stride=(3,))
        )
        (4): TreeStandardize()
        (5): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (6): TreeConv1d(
          (weights): Conv1d(256, 128, kernel_size=(3,), stride=(3,))
        )
        (7): TreeStandardize()
        (8): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (9): TreeMaxPool()
      )
    )
    (out_mlp): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
      (2): LeakyReLU(negative_slope=0.01)
      (3): Linear(in_features=64, out_features=32, bias=True)
      (4): LayerNorm((32,), eps=1e-05, elementwise_affine=True)
      (5): LeakyReLU(negative_slope=0.01)
      (6): Linear(in_features=32, out_features=1, bias=True)
    )
  )
)
No best checkpoint found (run validaiton yet?); model left unchanged.
plans_lib.FilterScansOrJoins()
plans_lib.GatherUnaryFiltersInfo()
postgres.EstimateFilterRows()
305 unique filters
{('aka_name AS an', "(an.name ~~ '%a%'::text)"): 690766,
 ('cast_info AS ci', "((ci.note = '(archive footage)'::text) OR (ci.note IS NULL))"): 22040471,
 ('cast_info AS ci', "((ci.note = '(executive producer)'::text) OR (ci.note IS NULL))"): 22372469,
 ('cast_info AS ci', "((ci.note = '(writer)'::text) OR (ci.note IS NULL))"): 22241379,
 ('cast_info AS ci', '((ci.note = ANY (\'{(deviser),(producer),"(production assistant)","(senior producer)","(supervising producer)",(writer)}\'::text[])) OR (ci.note IS NULL))'): 23077311,
 ('cast_info AS ci', "((ci.note ~~ '%(voice)%'::text) AND (ci.note ~~ '%(uncredited)%'::text))"): 19373,
 ('cast_info AS ci', "(ci.note = '(producer)'::text)"): 1423314,
 ('cast_info AS ci', "(ci.note = '(voice)'::text)"): 690530,
 ('cast_info AS ci', "(ci.note = '(voice: English version)'::text)"): 89334,
 ('cast_info AS ci', '(ci.note = ANY (\'{"(voice) (uncredited)","(voice: English version)"}\'::text[]))'): 118308,
 ('cast_info AS ci', '(ci.note = ANY (\'{"(voice: Japanese version)","(voice) (uncredited)","(voice: English version)"}\'::text[]))'): 154524,
 ('cast_info AS ci', '(ci.note = ANY (\'{(producer),"(executive producer)"}\'::text[]))'): 2451866,
 ('cast_info AS ci', '(ci.note = ANY (\'{(voice),"(voice: Japanese version)","(voice) (uncredited)","(voice: English version)"}\'::text[]))'): 845055,
 ('cast_info AS ci', '(ci.note = ANY (\'{(writer),"(head writer)","(story editor)"}\'::text[]))'): 822118,
 ('cast_info AS ci', '(ci.note = ANY (\'{(writer),"(head writer)","(written by)",(story),"(story editor)"}\'::text[]))'): 1195149,
 ('cast_info AS ci', '(ci.note IS NULL)'): 21967802,
 ('cast_info AS ci', "(ci.note ~~ '%(producer)%'::text)"): 1485211,
 ('char_name AS chn', "((chn.name !~~ '%Sherlock%'::text) AND ((chn.name ~~ '%Tony%Stark%'::text) OR (chn.name ~~ '%Iron%Man%'::text)))"): 628,
 ('char_name AS chn', "((chn.name IS NOT NULL) AND ((chn.name ~~ '%man%'::text) OR (chn.name ~~ '%Man%'::text)))"): 125924,
 ('comp_cast_type AS cct1', "((cct1.kind)::text = 'cast'::text)"): 1,
 ('comp_cast_type AS cct1', "((cct1.kind)::text = 'complete+verified'::text)"): 1,
 ('comp_cast_type AS cct1', "((cct1.kind)::text = ANY ('{cast,crew}'::text[]))"): 2,
 ('comp_cast_type AS cct2', "((cct2.kind)::text = 'complete'::text)"): 1,
 ('comp_cast_type AS cct2', "((cct2.kind)::text = 'complete+verified'::text)"): 1,
 ('comp_cast_type AS cct2', "((cct2.kind)::text ~~ '%complete%'::text)"): 1,
 ('comp_cast_type AS cct2', "((cct2.kind)::text ~~ 'complete%'::text)"): 1,
 ('company_name AS cn', "(((cn.country_code)::text <> '[pl]'::text) AND ((cn.name ~~ '%Film%'::text) OR (cn.name ~~ '%Warner%'::text)))"): 59321,
 ('company_name AS cn', "(((cn.country_code)::text = '[us]'::text) AND (cn.name = 'DreamWorks Animation'::text))"): 1,
 ('company_name AS cn', "(((cn.country_code)::text = '[us]'::text) AND (cn.name = 'YouTube'::text))"): 1,
 ('company_name AS cn', "((cn.country_code)::text <> '[us]'::text)"): 125582,
 ('company_name AS cn', "((cn.country_code)::text = '[de]'::text)"): 10230,
 ('company_name AS cn', "((cn.country_code)::text = '[jp]'::text)"): 6329,
 ('company_name AS cn', "((cn.country_code)::text = '[nl]'::text)"): 2569,
 ('company_name AS cn', "((cn.country_code)::text = '[ru]'::text)"): 1363,
 ('company_name AS cn', "((cn.country_code)::text = '[uk]'::text)"): 22,
 ('company_name AS cn', "((cn.country_code)::text = '[us]'::text)"): 85578,
 ('company_name AS cn', '(cn.name = ANY (\'{"American Broadcasting Company (ABC)","Columbia Broadcasting System (CBS)","National Broadcasting Company (NBC)"}\'::text[]))'): 3,
 ('company_name AS cn', '(cn.name = ANY (\'{"Columbia Broadcasting System (CBS)","Fox Network","Independent Television (ITV)","Metro-Goldwyn-Mayer (MGM)","National Broadcasting Company (NBC)","Shout! Factory","Universal Pictures","Universal TV","Warner Bros"}\'::text[]))'): 10,
 ('company_name AS cn', '(cn.name = ANY (\'{"Columbia Broadcasting System (CBS)","Metro-Goldwyn-Mayer (MGM)","Paramount Pictures","Pathé Frères","Universal Pictures","Warner Home Video"}\'::text[]))'): 7,
 ('company_name AS cn', '(cn.name = ANY (\'{"Fox Network","Independent Television (ITV)","Metro-Goldwyn-Mayer (MGM)","National Broadcasting Company (NBC)","Paramount Pictures","Shout! Factory","Sony Pictures Home Entertainment","Universal Pictures","Universal TV"}\'::text[]))'): 10,
 ('company_name AS cn', '(cn.name = ANY (\'{ABS-CBN,"American Broadcasting Company (ABC)","British Broadcasting Corporation (BBC)"}\'::text[]))'): 3,
 ('company_name AS cn', "(cn.name ~~ 'Lionsgate%'::text)"): 23,
 ('company_name AS cn1', "((cn1.country_code)::text <> '[us]'::text)"): 125582,
 ('company_type AS ct', "((ct.kind IS NOT NULL) AND (((ct.kind)::text = 'production companies'::text) OR ((ct.kind)::text = 'distributors'::text)))"): 2,
 ('company_type AS ct', "((ct.kind)::text = 'distributors'::text)"): 1,
 ('company_type AS ct', "((ct.kind)::text = 'production companies'::text)"): 1,
 ('company_type AS ct', '((ct.kind)::text = ANY (\'{distributors,"production companies"}\'::text[]))'): 2,
 ('info_type AS it', "((it.info)::text = 'bottom 10 rank'::text)"): 1,
 ('info_type AS it', "((it.info)::text = 'mini biography'::text)"): 1,
 ('info_type AS it', "((it.info)::text = 'rating'::text)"): 1,
 ('info_type AS it', "((it.info)::text = 'release dates'::text)"): 1,
 ('info_type AS it', "((it.info)::text = 'top 250 rank'::text)"): 1,
 ('info_type AS it1', "((it1.info)::text = 'budget'::text)"): 1,
 ('info_type AS it1', "((it1.info)::text = 'countries'::text)"): 1,
 ('info_type AS it1', "((it1.info)::text = 'genres'::text)"): 1,
 ('info_type AS it1', '((it1.info)::text = \'rating\'::text COLLATE "C")'): 1,
 ('info_type AS it1', "((it1.info)::text = 'release dates'::text)"): 1,
 ('info_type AS it1', '(it1.id = 13)'): 1,
 ('info_type AS it1', '(it1.id = 18)'): 1,
 ('info_type AS it1', '(it1.id = 2)'): 1,
 ('info_type AS it1', '(it1.id = 3)'): 1,
 ('info_type AS it1', '(it1.id = 5)'): 1,
 ('info_type AS it1', '(it1.id = 7)'): 1,
 ('info_type AS it1', '(it1.id = 8)'): 1,
 ('info_type AS it2', "((it2.info)::text = 'bottom 10 rank'::text)"): 1,
 ('info_type AS it2', '((it2.info)::text = \'rating\'::text COLLATE "C")'): 1,
 ('info_type AS it2', "((it2.info)::text = 'rating'::text)"): 1,
 ('info_type AS it2', "((it2.info)::text = 'release dates'::text)"): 1,
 ('info_type AS it2', "((it2.info)::text = 'votes'::text)"): 1,
 ('info_type AS it2', '(it2.id = 18)'): 1,
 ('info_type AS it2', '(it2.id = 2)'): 1,
 ('info_type AS it2', '(it2.id = 3)'): 1,
 ('info_type AS it2', '(it2.id = 4)'): 1,
 ('info_type AS it2', '(it2.id = 6)'): 1,
 ('info_type AS it2', '(it2.id = 7)'): 1,
 ('info_type AS it2', '(it2.id = 8)'): 1,
 ('info_type AS it3', "((it3.info)::text = 'trivia'::text)"): 1,
 ('info_type AS it3', '(it3.id = 100)'): 1,
 ('info_type AS it4', '(it4.id = 101)'): 1,
 ('info_type AS it5', '(it5.id = 19)'): 1,
 ('info_type AS it5', '(it5.id = 25)'): 1,
 ('info_type AS it5', '(it5.id = 26)'): 1,
 ('info_type AS it5', '(it5.id = 31)'): 1,
 ('info_type AS it5', '(it5.id = 32)'): 1,
 ('info_type AS it5', '(it5.id = 34)'): 1,
 ('keyword AS k', "(k.keyword = '10,000-mile-club'::text)"): 1,
 ('keyword AS k', "(k.keyword = 'character-name-in-title'::text)"): 1,
 ('keyword AS k', "(k.keyword = 'computer-animation'::text)"): 1,
 ('keyword AS k', "(k.keyword = 'marvel-cinematic-universe'::text)"): 1,
 ('keyword AS k', "(k.keyword = 'sequel'::text)"): 1,
 ('keyword AS k', "(k.keyword = ANY ('{based-on-comic,tv-special,fight,violence,magnet,web,claw,laser}'::text[]))"): 8,
 ('keyword AS k', "(k.keyword = ANY ('{based-on-play,cigarette-smoking,friendship,independent-film,jealousy,lesbian-sex,male-nudity,marriage,mother-daughter-relationship,one-word-title,oral-sex,police,singing,song}'::text[]))"): 14,
 ('keyword AS k', "(k.keyword = ANY ('{based-on-play,dog,family-relationships,father-son-relationship,female-nudity,hardcore,husband-wife-relationship,independent-film,lesbian-sex,love,marriage,mother-daughter-relationship,nudity,one-word-title,police,sequel,sex,singer}'::text[]))"): 18,
 ('keyword AS k', "(k.keyword = ANY ('{death,father-son-relationship,bruce,gay,independent-film,lesbian-sex,mother-daughter-relationship,murder,number-in-title}'::text[]))"): 9,
 ('keyword AS k', "(k.keyword = ANY ('{death,father-son-relationship,fight,gay,independent-film,lesbian-sex,mother-daughter-relationship,murder,number-in-title}'::text[]))"): 9,
 ('keyword AS k', "(k.keyword = ANY ('{father-son-relationship,combat,gay,independent-film,lesbian-sex,mother-daughter-relationship,murder,number-in-title}'::text[]))"): 8,
 ('keyword AS k', "(k.keyword = ANY ('{fight,gay,independent-film,lesbian-sex,mother-daughter-relationship,murder,number-in-title}'::text[]))"): 7,
 ('keyword AS k', "(k.keyword = ANY ('{hero,martial-arts,hand-to-hand-combat,computer-animated-movie}'::text[]))"): 4,
 ('keyword AS k', "(k.keyword = ANY ('{hero,martial-arts,hand-to-hand-combat}'::text[]))"): 3,
 ('keyword AS k', "(k.keyword = ANY ('{murder,blood,gore,death,female-nudity}'::text[]))"): 5,
 ('keyword AS k', "(k.keyword = ANY ('{murder,murder-in-title,blood,violence}'::text[]))"): 4,
 ('keyword AS k', "(k.keyword = ANY ('{murder,murder-in-title}'::text[]))"): 2,
 ('keyword AS k', "(k.keyword = ANY ('{murder,violence,blood,gore,death,female-nudity,hospital}'::text[]))"): 7,
 ('keyword AS k', "(k.keyword = ANY ('{nerd,loner,alienation,dignity}'::text[]))"): 4,
 ('keyword AS k', "(k.keyword = ANY ('{superhero,marvel-comics,based-on-comic,fight}'::text[]))"): 4,
 ('keyword AS k', "(k.keyword = ANY ('{superhero,marvel-comics,based-on-comic,tv-special,fight,violence,magnet,web,claw,laser}'::text[]))"): 10,
 ('keyword AS k', "(k.keyword = ANY ('{superhero,sequel,second-part,marvel-comics,based-on-comic,tv-special,fight,violence}'::text[]))"): 8,
 ('keyword AS k', "(k.keyword ~~ '%sequel%'::text)"): 13,
 ('kind_type AS kt', "((kt.kind)::text = 'episode'::text)"): 1,
 ('kind_type AS kt', "((kt.kind)::text = 'movie'::text)"): 1,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{"tv movie","tv series","video game"}\'::text[]))'): 3,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{"tv movie","video movie"}\'::text[]))'): 2,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{"tv series","video game","video movie"}\'::text[]))'): 3,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{"tv series","video movie"}\'::text[]))'): 2,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{episode,movie,"tv movie"}\'::text[]))'): 3,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{episode,movie,"video movie"}\'::text[]))'): 3,
 ('kind_type AS kt', "((kt.kind)::text = ANY ('{episode,movie}'::text[]))"): 2,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{movie,"tv movie","tv series"}\'::text[]))'): 3,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{movie,"tv movie","video movie","video game"}\'::text[]))'): 4,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{movie,"tv series"}\'::text[]))'): 2,
 ('kind_type AS kt', "((kt.kind)::text = ANY ('{movie,episode}'::text[]))"): 2,
 ('kind_type AS kt1', '((kt1.kind)::text = ANY (\'{"tv series",episode}\'::text[]))'): 2,
 ('kind_type AS kt2', '((kt2.kind)::text = ANY (\'{"tv series",episode}\'::text[]))'): 2,
 ('link_type AS lt', "((lt.link)::text = 'features'::text)"): 1,
 ('link_type AS lt', '((lt.link)::text = ANY (\'{sequel,follows,"followed by"}\'::text[]))'): 3,
 ('link_type AS lt', "((lt.link)::text ~~ '%follow%'::text)"): 1,
 ('link_type AS lt', "((lt.link)::text ~~ '%follows%'::text)"): 1,
 ('movie_companies AS mc', "((mc.note !~~ '%(USA)%'::text) AND (mc.note ~~ '%(200%)%'::text))"): 145456,
 ('movie_companies AS mc', "((mc.note !~~ '%(as Metro-Goldwyn-Mayer Pictures)%'::text) AND ((mc.note ~~ '%(co-production)%'::text) OR (mc.note ~~ '%(presents)%'::text)))"): 18288,
 ('movie_companies AS mc', "((mc.note IS NOT NULL) AND ((mc.note ~~ '%(USA)%'::text) OR (mc.note ~~ '%(worldwide)%'::text)))"): 290493,
 ('movie_companies AS mc', "((mc.note ~~ '%(200%)%'::text) AND ((mc.note ~~ '%(USA)%'::text) OR (mc.note ~~ '%(worldwide)%'::text)))"): 97391,
 ('movie_companies AS mc', "((mc.note ~~ '%(200%)%'::text) AND (mc.note ~~ '%(worldwide)%'::text))"): 14724,
 ('movie_companies AS mc', "((mc.note ~~ '%(Japan)%'::text) AND (mc.note !~~ '%(USA)%'::text) AND ((mc.note ~~ '%(2006)%'::text) OR (mc.note ~~ '%(2007)%'::text)))"): 536,
 ('movie_companies AS mc', "((mc.note ~~ '%(Japan)%'::text) AND (mc.note !~~ '%(USA)%'::text))"): 11423,
 ('movie_companies AS mc', "((mc.note ~~ '%(VHS)%'::text) AND (mc.note ~~ '%(USA)%'::text) AND (mc.note ~~ '%(1994)%'::text))"): 52,
 ('movie_companies AS mc', "((mc.note ~~ '%(theatrical)%'::text) AND (mc.note ~~ '%(France)%'::text))"): 7837,
 ('movie_companies AS mc', "(mc.note !~~ '%(as Metro-Goldwyn-Mayer Pictures)%'::text)"): 1340478,
 ('movie_companies AS mc', '(mc.note IS NULL)'): 1268559,
 ('movie_info AS mi', "((mi.info IS NOT NULL) AND ((mi.info ~~ 'Japan:%200%'::text) OR (mi.info ~~ 'USA:%200%'::text)))"): 458197,
 ('movie_info AS mi', "((mi.info IS NOT NULL) AND ((mi.info ~~ 'Japan:%2007%'::text) OR (mi.info ~~ 'USA:%2008%'::text)))"): 230835,
 ('movie_info AS mi', "((mi.info IS NOT NULL) AND ((mi.info ~~ 'Japan:%201%'::text) OR (mi.info ~~ 'USA:%201%'::text)))"): 154143,
 ('movie_info AS mi', "((mi.info IS NOT NULL) AND (mi.note ~~ '%internet%'::text) AND ((mi.info ~~ 'USA:% 199%'::text) OR (mi.info ~~ 'USA:% 200%'::text)))"): 560,
 ('movie_info AS mi', "((mi.note IS NULL) AND (mi.info = ANY ('{Horror,Thriller}'::text[])))"): 70758,
 ('movie_info AS mi', "((mi.note ~~ '%internet%'::text) AND (mi.info ~~ 'USA:% 200%'::text))"): 469,
 ('movie_info AS mi', "(mi.info = 'Bulgaria'::text)"): 391,
 ('movie_info AS mi', "(mi.info = 'Horror'::text)"): 34687,
 ('movie_info AS mi', "(mi.info = ANY ('{Drama,Horror}'::text[]))"): 286907,
 ('movie_info AS mi', "(mi.info = ANY ('{German,USA,American}'::text[]))"): 615334,
 ('movie_info AS mi', "(mi.info = ANY ('{Germany,German,USA,American}'::text[]))"): 667364,
 ('movie_info AS mi', "(mi.info = ANY ('{Germany,German}'::text[]))"): 121899,
 ('movie_info AS mi', "(mi.info = ANY ('{Horror,Action,Sci-Fi,Thriller,Crime,War}'::text[]))"): 208615,
 ('movie_info AS mi', "(mi.info = ANY ('{Sweden,Germany,Swedish,German}'::text[]))"): 134182,
 ('movie_info AS mi', "(mi.info = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Danish,Norwegian,German,USA,American}'::text[]))"): 706196,
 ('movie_info AS mi', "(mi.info = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Denish,Norwegian,German,English}'::text[]))"): 911342,
 ('movie_info AS mi', "(mi.info = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Denish,Norwegian,German,USA,American}'::text[]))"): 693703,
 ('movie_info AS mi', "(mi.info = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Denish,Norwegian,German}'::text[]))"): 148237,
 ('movie_info AS mi', "(mi.info = ANY ('{USA,America}'::text[]))"): 545465,
 ('movie_info AS mi1', '((mi1.info = ANY (\'{"Black and White",Color}\'::text[])) AND (mi1.info_type_id = 2))'): 123057,
 ('movie_info AS mi1', "((mi1.info = ANY ('{Crime,Drama}'::text[])) AND (mi1.info_type_id = 3))"): 31429,
 ('movie_info AS mi1', "((mi1.info_type_id = 13) AND (mi1.info = 'Mono'::text))"): 2534,
 ('movie_info AS mi1', '((mi1.info_type_id = 18) AND (mi1.info = ANY (\'{"Buenos Aires, Federal District, Argentina","Los Angeles, California, USA",Mexico,"New York City, New York, USA","Paramount Studios - 5555 Melrose Avenue, Hollywood, Los Angeles, California, USA"}\'::text[])))'): 3365,
 ('movie_info AS mi1', "((mi1.info_type_id = 2) AND (mi1.info = 'Black and White'::text))"): 26886,
 ('movie_info AS mi1', "((mi1.info_type_id = 2) AND (mi1.info = 'Color'::text))"): 96170,
 ('movie_info AS mi1', "((mi1.info_type_id = 3) AND (mi1.info = ANY ('{Adventure,Animation,Crime,Drama}'::text[])))"): 39922,
 ('movie_info AS mi1', "((mi1.info_type_id = 3) AND (mi1.info = ANY ('{Fantasy,Mystery,Short}'::text[])))"): 48469,
 ('movie_info AS mi1', "((mi1.info_type_id = 5) AND (mi1.info = ANY ('{Argentina:Atp,Canada:G,Iceland:L,UK:X,USA:X}'::text[])))"): 1198,
 ('movie_info AS mi1', '((mi1.info_type_id = 7) AND (mi1.info = ANY (\'{"CAM:Panavision Cameras and Lenses","OFM:16 mm","OFM:35 mm",OFM:Video,PCS:Spherical,"PFM:35 mm","RAT:1.33 : 1","RAT:1.37 : 1","RAT:1.66 : 1","RAT:1.78 : 1","RAT:2.35 : 1",RAT:4:3}\'::text[])))'): 92722,
 ('movie_info AS mi1', '((mi1.info_type_id = 7) AND (mi1.info = ANY (\'{"MET:600 m","OFM:35 mm",PCS:Spherical,"PFM:35 mm","RAT:1.37 : 1"}\'::text[])))'): 62815,
 ('movie_info AS mi1', '((mi1.info_type_id = 7) AND (mi1.info = ANY (\'{"OFM:35 mm",OFM:Live,"PFM:35 mm","RAT:1.33 : 1"}\'::text[])))'): 67817,
 ('movie_info AS mi1', '((mi1.info_type_id = 7) AND (mi1.info = ANY (\'{"PFM:35 mm","RAT:1.33 : 1","RAT:1.66 : 1","RAT:1.85 : 1"}\'::text[])))'): 47860,
 ('movie_info AS mi1', '((mi1.info_type_id = 7) AND (mi1.info = ANY (\'{MET:,"OFM:35 mm","PCS:Digital Intermediate","PFM:35 mm",PFM:Video,"RAT:1.33 : 1","RAT:1.37 : 1"}\'::text[])))'): 72682,
 ('movie_info AS mi1', "((mi1.info_type_id = 8) AND (mi1.info = ANY ('{Austria,Belgium,Brazil,Denmark,France,Mexico,Spain,UK,USA,Yugoslavia}'::text[])))"): 77535,
 ('movie_info AS mi1', "((mi1.info_type_id = 8) AND (mi1.info = ANY ('{Austria,Belgium,Brazil,Hungary,India,Mexico,Poland,Spain}'::text[])))"): 13262,
 ('movie_info AS mi1', "((mi1.info_type_id = 8) AND (mi1.info = ANY ('{Brazil,Denmark,France,Mexico,Spain,UK,USA,Yugoslavia}'::text[])))"): 76385,
 ('movie_info AS mi1', "((mi1.info_type_id = 8) AND (mi1.info = ANY ('{Brazil,India,Ireland,Italy,Netherlands,Philippines,Poland,USA}'::text[])))"): 58849,
 ('movie_info AS mi1', '((mi1.info_type_id = 8) AND (mi1.info = ANY (\'{Italy,Japan,China,"West Germany"}\'::text[])))'): 9311,
 ('movie_info AS mi1', '((mi1.info_type_id = 8) AND (mi1.info = ANY (\'{Italy,Japan,Nigeria,Spain,"West Germany"}\'::text[])))'): 14172,
 ('movie_info AS mi1', "(mi1.info = 'Mono'::text)"): 210597,
 ('movie_info AS mi1', '(mi1.info = ANY (\'{"Hong Kong",Poland,Portugal,"South Korea","Soviet Union",Sweden,Switzerland,Turkey,Yugoslavia}\'::text[]))'): 25033,
 ('movie_info AS mi1', '(mi1.info = ANY (\'{"OFM:35 mm",PCS:Spherical,"PFM:35 mm",PFM:Video,"RAT:1.33 : 1","RAT:1.37 : 1"}\'::text[]))'): 914734,
 ('movie_info AS mi1', '(mi1.info = ANY (\'{Biography,Fantasy,"OFM:35 mm",OFM:Video,Romance,Sci-Fi,Sport,Thriller}\'::text[]))'): 444484,
 ('movie_info AS mi1', "(mi1.info = ANY ('{Color,OFM:Live,OFM:Video,PFM:Video}'::text[]))"): 1104415,
 ('movie_info AS mi1', '(mi1.info = ANY (\'{PCS:Spherical,"PFM:35 mm","RAT:1.33 : 1","RAT:1.37 : 1"}\'::text[]))'): 650125,
 ('movie_info AS mi2', '((mi2.info = ANY (\'{"Black and White",Color}\'::text[])) AND (mi2.info_type_id = 2))'): 123057,
 ('movie_info AS mi2', "((mi2.info = ANY ('{Mono,Silent}'::text[])) AND (mi2.info_type_id = 6))"): 11107,
 ('movie_info AS mi2', '((mi2.info_type_id = 18) AND (mi2.info = ANY (\'{"20th Century Fox Studios - 10201 Pico Blvd., Century City, Los Angeles, California, USA","Desilu Studios - 9336 W. Washington Blvd., Culver City, California, USA","Hal Roach Studios - 8822 Washington Blvd., Culver City, California, USA","New York City, New York, USA","Revue Studios, Hollywood, Los Angeles, California, USA","Universal Studios - 100 Universal City Plaza, Universal City, California, USA","Warner Brothers Burbank Studios - 4000 Warner Boulevard, Burbank, California, USA"}\'::text[])))'): 804,
 ('movie_info AS mi2', "((mi2.info_type_id = 3) AND (mi2.info = ANY ('{Adult,Comedy,Documentary,Drama,Mystery,Romance,Short,Thriller,Western}'::text[])))"): 130735,
 ('movie_info AS mi2', "((mi2.info_type_id = 4) AND (mi2.info = ANY ('{English,French,Italian,Malayalam,Polish,Portuguese,Tagalog}'::text[])))"): 72459,
 ('movie_info AS mi2', '((mi2.info_type_id = 7) AND (mi2.info = ANY (\'{"LAB:FotoKem Laboratory, Burbank (CA), USA",MET:,"MET:300 m",PCS:Spherical,"RAT:1.33 : 1","RAT:1.66 : 1"}\'::text[])))'): 34919,
 ('movie_info AS mi2', '((mi2.info_type_id = 7) AND (mi2.info = ANY (\'{"OFM:35 mm","PFM:35 mm","RAT:1.33 : 1"}\'::text[])))'): 67781,
 ('movie_info AS mi2', '((mi2.info_type_id = 8) AND (mi2.info = ANY (\'{"East Germany","Hong Kong",Italy,Taiwan,UK,USA,"West Germany"}\'::text[])))'): 64281,
 ('movie_info AS mi2', "((mi2.info_type_id = 8) AND (mi2.info = ANY ('{Japan,Mexico,Portugal,Spain,UK,USA}'::text[])))"): 73095,
 ('movie_info_idx AS mi_idx', "(mi_idx.info < '7.0'::text)"): 1170254,
 ('movie_info_idx AS mi_idx', "(mi_idx.info < '8.5'::text)"): 1338567,
 ('movie_info_idx AS mi_idx', "(mi_idx.info > '5.0'::text)"): 518871,
 ('movie_info_idx AS mi_idx', "(mi_idx.info > '6.0'::text)"): 373424,
 ('movie_info_idx AS mi_idx', "(mi_idx.info > '8.0'::text)"): 53792,
 ('movie_info_idx AS mi_idx', "(mi_idx.info > '9.0'::text)"): 9408,
 ('movie_info_idx AS mi_idx2', "(mi_idx2.info < '3.5'::text)"): 684800,
 ('movie_info_idx AS mii1', "((mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info_type_id = 100) AND ('0'::double precision <= (mii1.info)::double precision) AND ((mii1.info)::double precision <= '1000'::double precision))"): 1188,
 ('movie_info_idx AS mii1', "((mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info_type_id = 100) AND ('0'::double precision <= (mii1.info)::double precision) AND ((mii1.info)::double precision <= '10000'::double precision))"): 1188,
 ('movie_info_idx AS mii1', "((mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info_type_id = 100) AND ('1000'::double precision <= (mii1.info)::double precision) AND ((mii1.info)::double precision <= '10000'::double precision))"): 1188,
 ('movie_info_idx AS mii1', "((mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info_type_id = 100) AND ('5000'::double precision <= (mii1.info)::double precision) AND ((mii1.info)::double precision <= '500000'::double precision))"): 1188,
 ('movie_info_idx AS mii2', "((mii2.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii2.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii2.info_type_id = 101) AND ((mii2.info)::double precision <= '11'::double precision) AND ('7'::double precision <= (mii2.info)::double precision))"): 1151,
 ('movie_info_idx AS mii2', "((mii2.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii2.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii2.info_type_id = 101) AND ((mii2.info)::double precision <= '7'::double precision) AND ('3'::double precision <= (mii2.info)::double precision))"): 1151,
 ('movie_info_idx AS mii2', "((mii2.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii2.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii2.info_type_id = 101) AND ((mii2.info)::double precision <= '8'::double precision) AND ('0'::double precision <= (mii2.info)::double precision))"): 1151,
 ('name AS n', "((((n.gender)::text = 'f'::text) OR (n.gender IS NULL)) AND (((n.name_pcode_nf)::text = 'C6235'::text) OR (n.name_pcode_nf IS NULL)))"): 63114,
 ('name AS n', "((((n.gender)::text = 'f'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_nf)::text = ANY ('{A5136,B4532,C6435,H4524,J2451,J6362,L2525,M6415,S4125,W5245}'::text[])))"): 1642,
 ('name AS n', "((((n.gender)::text = 'm'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_cf)::text = ANY ('{A2365,A6252,C52,D1614,E1524,E2163,L1214,L2,P5215,Q5325,R2425,S1452,T5212,V4524,V4626}'::text[])))"): 6427,
 ('name AS n', "((((n.gender)::text = 'm'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_nf)::text = ANY ('{A4163,B6563,D1316,F6521,F6523,F6524,J5216,J5262,P3616}'::text[])))"): 29197,
 ('name AS n', "((((n.gender)::text = 'm'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_nf)::text = ANY ('{B6514,D1352,J5163,J5245,M2423,M6126,M6241,M6245,M6252,P3614,V2361,W4125,W4525}'::text[])))"): 17162,
 ('name AS n', "((((n.gender)::text = 'm'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_nf)::text = ANY ('{D2313,E3261,G625,J5141,K1524,L2125,M2563,M265,M3215,P3625,S5326,S6256,T5252}'::text[])))"): 9455,
 ('name AS n', "((((n.gender)::text = 'm'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_nf)::text = ANY ('{M2423,M6126,M6241,M6245,M6252,P3614,V2361,W4125,W4525}'::text[])))"): 9733,
 ('name AS n', "((((n.gender)::text = ANY ('{f,m}'::text[])) OR (n.gender IS NULL)) AND ((n.name_pcode_cf)::text = ANY ('{A5362,J5252,R1632,R2632,W4525}'::text[])))"): 31244,
 ('name AS n', "((((n.name_pcode_nf)::text = ANY ('{C6235,E4213}'::text[])) OR (n.name_pcode_nf IS NULL)) AND ((n.gender)::text = 'f'::text))"): 31515,
 ('name AS n', "(((n.gender)::text = 'm'::text) AND (((n.surname_pcode)::text = ANY ('{B4,B6,C462,D12,D25,G65,H65,J525,K5,P6,P62,R3,S5}'::text[])) OR (n.surname_pcode IS NULL)))"): 433106,
 ('name AS n', "(((n.gender)::text = 'm'::text) AND ((n.name_pcode_cf)::text = ANY ('{B6261,B6526,J5252,M6352,R363,S3152,S5362}'::text[])))"): 16478,
 ('name AS n', "(((n.gender)::text = 'm'::text) AND ((n.name_pcode_nf)::text = ANY ('{C6231,F6362,F6525,J513,R1631,R1632,R1636,R2631,S2153}'::text[])))"): 22903,
 ('name AS n', "(((n.gender)::text = 'm'::text) OR (n.gender IS NULL))"): 2581078,
 ('name AS n', "(((n.gender)::text = ANY ('{f,m}'::text[])) AND ((n.surname_pcode)::text = ANY ('{C4,C62,C632,D5,F6,F63,G63,H2,L5,M245,S,S6}'::text[])))"): 49735,
 ('name AS n', "(((n.name_pcode_cf)::text >= 'A'::text) AND ((n.name_pcode_cf)::text <= 'F'::text) AND (((n.gender)::text = 'm'::text) OR (((n.gender)::text = 'f'::text) AND (n.name ~~ 'B%'::text))))"): 480835,
 ('name AS n', "(((n.name_pcode_cf)::text ~~ 'D%'::text) AND ((n.gender)::text = 'm'::text))"): 97627,
 ('name AS n', "((n.gender IS NOT NULL) AND ((n.gender)::text = 'f'::text))"): 639999,
 ('name AS n', "((n.gender IS NULL) AND (((n.name_pcode_nf)::text = ANY ('{A4163,A4253,A5362,A6532,C5321,C6231,C6235,R516,R5316,S3152,S3521}'::text[])) OR (n.name_pcode_nf IS NULL)))"): 69743,
 ('name AS n', "((n.gender)::text = 'f'::text)"): 982547,
 ('name AS n', "((n.gender)::text = 'm'::text)"): 1731995,
 ('name AS n', "((n.gender)::text = ANY ('{f,m}'::text[]))"): 2714543,
 ('name AS n', "((n.name ~~ '%An%'::text) AND ((n.gender)::text = 'f'::text))"): 29774,
 ('name AS n', "((n.name ~~ '%Ang%'::text) AND ((n.gender)::text = 'f'::text))"): 98,
 ('name AS n', "((n.name ~~ '%Angel%'::text) AND ((n.gender)::text = 'f'::text))"): 98,
 ('name AS n', "((n.name ~~ '%Tim%'::text) AND ((n.gender)::text = 'm'::text))"): 17495,
 ('name AS n', "((n.name ~~ '%Yo%'::text) AND (n.name !~~ '%Yu%'::text))"): 84183,
 ('name AS n', '(n.gender IS NULL)'): 1452914,
 ('name AS n', "(n.name ~~ '%Downey%Robert%'::text)"): 417,
 ('name AS n', "(n.name ~~ 'B%'::text)"): 336764,
 ('name AS n', "(n.name ~~ 'X%'::text)"): 417,
 ('name AS n', "(n.name ~~ 'Z%'::text)"): 42096,
 ('name AS n1', "((n1.name ~~ '%Yo%'::text) AND (n1.name !~~ '%Yu%'::text))"): 84183,
 ('person_info AS pi', "(pi.note = 'Volker Boehm'::text)"): 29,
 ('person_info AS pi1', '(pi1.info_type_id = 19)'): 83524,
 ('person_info AS pi1', '(pi1.info_type_id = 25)'): 427503,
 ('person_info AS pi1', '(pi1.info_type_id = 26)'): 136603,
 ('person_info AS pi1', '(pi1.info_type_id = 31)'): 6721,
 ('person_info AS pi1', '(pi1.info_type_id = 32)'): 9588,
 ('person_info AS pi1', '(pi1.info_type_id = 34)'): 20263,
 ('role_type AS rt', "((rt.role)::text = 'actor'::text)"): 1,
 ('role_type AS rt', "((rt.role)::text = 'actress'::text)"): 1,
 ('role_type AS rt', "((rt.role)::text = 'miscellaneous crew'::text)"): 1,
 ('role_type AS rt', "((rt.role)::text = 'producer'::text)"): 1,
 ('role_type AS rt', "((rt.role)::text = 'production designer'::text)"): 1,
 ('role_type AS rt', '((rt.role)::text = ANY (\'{"costume designer","production designer"}\'::text[]))'): 2,
 ('role_type AS rt', '((rt.role)::text = ANY (\'{"miscellaneous crew",producer}\'::text[]))'): 2,
 ('role_type AS rt', "((rt.role)::text = ANY ('{actor,actress}'::text[]))"): 2,
 ('role_type AS rt', '((rt.role)::text = ANY (\'{actor,composer,"miscellaneous crew",producer,"production designer"}\'::text[]))'): 5,
 ('role_type AS rt', "((rt.role)::text = ANY ('{actor,director,writer}'::text[]))"): 3,
 ('role_type AS rt', "((rt.role)::text = ANY ('{actor,producer}'::text[]))"): 2,
 ('role_type AS rt', "((rt.role)::text = ANY ('{actor,writer}'::text[]))"): 2,
 ('role_type AS rt', "((rt.role)::text = ANY ('{actress,cinematographer,writer}'::text[]))"): 3,
 ('role_type AS rt', "((rt.role)::text = ANY ('{actress,writer}'::text[]))"): 2,
 ('role_type AS rt', '((rt.role)::text = ANY (\'{cinematographer,composer,director,editor,"miscellaneous crew",producer,"production designer",writer}\'::text[]))'): 8,
 ('role_type AS rt', "((rt.role)::text = ANY ('{cinematographer,composer}'::text[]))"): 2,
 ('role_type AS rt', "((rt.role)::text = ANY ('{director,producer}'::text[]))"): 2,
 ('role_type AS rt', "((rt.role)::text = ANY ('{editor,writer}'::text[]))"): 2,
 ('title AS t', '((t.production_year <= 1975) AND (t.production_year >= 1875))'): 457842,
 ('title AS t', '((t.production_year <= 1975) AND (t.production_year >= 1925))'): 353956,
 ('title AS t', '((t.production_year <= 1990) AND (t.production_year >= 1950))'): 545566,
 ('title AS t', '((t.production_year <= 2008) AND (t.production_year >= 1952))'): 1617245,
 ('title AS t', '((t.production_year <= 2010) AND (t.production_year >= 1950))'): 1898081,
 ('title AS t', '((t.production_year <= 2010) AND (t.production_year >= 1952))'): 1888172,
 ('title AS t', '((t.production_year <= 2010) AND (t.production_year >= 1990))'): 1376866,
 ('title AS t', '((t.production_year <= 2011) AND (t.production_year >= 1949))'): 2066691,
 ('title AS t', '((t.production_year <= 2015) AND (1925 < t.production_year))'): 2352208,
 ('title AS t', '((t.production_year <= 2015) AND (2000 < t.production_year))'): 1367146,
 ('title AS t', '((t.production_year <= 2015) AND (t.production_year >= 1925))'): 2356669,
 ('title AS t', '((t.production_year <= 2015) AND (t.production_year >= 1975))'): 2016445,
 ('title AS t', '((t.production_year <= 2015) AND (t.production_year >= 1990))'): 1770494,
 ('title AS t', "((t.production_year > 2000) AND ((t.title ~~ 'Birdemic%'::text) OR (t.title ~~ '%Movie%'::text)))"): 254,
 ('title AS t', "((t.production_year > 2010) AND ((t.title ~~ '%murder%'::text) OR (t.title ~~ '%Murder%'::text) OR (t.title ~~ '%Mord%'::text)))"): 110,
 ('title AS t', "((t.production_year > 2010) AND (t.title ~~ 'Kung Fu Panda%'::text))"): 37,
 ('title AS t', "((t.production_year > 2010) AND (t.title ~~ 'Vampire%'::text))"): 37,
 ('title AS t', '((t.production_year >= 1950) AND (t.production_year <= 2000))'): 924563,
 ('title AS t', '((t.production_year >= 1950) AND (t.production_year <= 2010))'): 1898081,
 ('title AS t', '((t.production_year >= 1980) AND (t.production_year <= 1984))'): 78386,
 ('title AS t', '((t.production_year >= 1980) AND (t.production_year <= 1995))'): 347588,
 ('title AS t', '((t.production_year >= 2000) AND (t.production_year <= 2010))'): 1030486,
 ('title AS t', '((t.production_year >= 2005) AND (t.production_year <= 2008))'): 440098,
 ('title AS t', '((t.production_year >= 2005) AND (t.production_year <= 2010))'): 711026,
 ('title AS t', '((t.production_year >= 2005) AND (t.production_year <= 2015))'): 1104654,
 ('title AS t', "((t.production_year >= 2006) AND (t.production_year <= 2007) AND ((t.title ~~ 'One Piece%'::text) OR (t.title ~~ 'Dragon Ball Z%'::text)))"): 42,
 ('title AS t', "((t.production_year >= 2007) AND (t.production_year <= 2008) AND (t.title ~~ '%Kung%Fu%Panda%'::text))"): 22,
 ('title AS t', '((t.production_year >= 2007) AND (t.production_year <= 2010))'): 508113,
 ('title AS t', '((t.production_year >= 2008) AND (t.production_year <= 2014))'): 785891,
 ('title AS t', "((t.title <> ''::text) AND ((t.title ~~ '%Champion%'::text) OR (t.title ~~ '%Loser%'::text)))"): 470,
 ('title AS t', "((t.title ~~ '%Money%'::text) AND (t.production_year = 1998))"): 5,
 ('title AS t', '(t.episode_nr < 100)'): 937760,
 ('title AS t', '(t.production_year = 1998)'): 49389,
 ('title AS t', '(t.production_year > 1950)'): 2285164,
 ('title AS t', '(t.production_year > 1970)'): 2069943,
 ('title AS t', '(t.production_year > 1990)'): 1746167,
 ('title AS t', '(t.production_year > 2000)'): 1367170,
 ('title AS t', '(t.production_year > 2005)'): 1006917,
 ('title AS t', '(t.production_year > 2009)'): 540578,
 ('title AS t', '(t.production_year > 2010)'): 393652,
 ('title AS t', '(t.production_year > 2014)'): 47,
 ('title AS t2', '((t2.production_year >= 2000) AND (t2.production_year <= 2010))'): 1030486}
21 rels: ['aka_name' 'aka_title' 'cast_info' 'char_name' 'comp_cast_type'
 'company_name' 'company_type' 'complete_cast' 'info_type' 'keyword'
 'kind_type' 'link_type' 'movie_companies' 'movie_info' 'movie_info_idx'
 'movie_keyword' 'movie_link' 'name' 'person_info' 'role_type' 'title']
46 rel_ids: ['aka_name AS an' 'aka_name AS an1' 'aka_title AS aka_t' 'aka_title AS at'
 'cast_info AS ci' 'char_name AS chn' 'comp_cast_type AS cct1'
 'comp_cast_type AS cct2' 'company_name AS cn' 'company_name AS cn1'
 'company_name AS cn2' 'company_type AS ct' 'complete_cast AS cc'
 'info_type AS it' 'info_type AS it1' 'info_type AS it2'
 'info_type AS it3' 'info_type AS it4' 'info_type AS it5' 'keyword AS k'
 'kind_type AS kt' 'kind_type AS kt1' 'kind_type AS kt2' 'link_type AS lt'
 'movie_companies AS mc' 'movie_companies AS mc1' 'movie_companies AS mc2'
 'movie_info AS mi' 'movie_info AS mi1' 'movie_info AS mi2'
 'movie_info_idx AS mi_idx' 'movie_info_idx AS mi_idx1'
 'movie_info_idx AS mi_idx2' 'movie_info_idx AS mii1'
 'movie_info_idx AS mii2' 'movie_info_idx AS miidx' 'movie_keyword AS mk'
 'movie_link AS ml' 'name AS n' 'name AS n1' 'person_info AS pi'
 'person_info AS pi1' 'role_type AS rt' 'title AS t' 'title AS t1'
 'title AS t2']
3 scans: ['Index Only Scan' 'Index Scan' 'Seq Scan']
3 joins: ['Hash Join' 'Merge Join' 'Nested Loop']
14 all ops: ['FinalizeAggregate' 'Gather' 'Gather Merge' 'Hash' 'Hash Join'
 'Index Only Scan' 'Index Scan' 'Materialize' 'Merge Join' 'Nested Loop'
 'PartialAggregate' 'Seq Scan' 'SimpleAggregate' 'Sort']
Calling make_and_featurize_trees()...
took 0.2s
num_total_subtrees=1030 num_featurized_subtrees=1030 num_new_datapoints=1030
head
  query=3.144 feat=16.0 cost=21168.447
  query=3.144 feat=16.0 cost=21168.447
tail
  query=2.705 feat=5.0 cost=168.556
  query=2.705 feat=10.0 cost=168.556
costs stats mean 7.1459269523620605 std 2.1118733882904053
num_train=927 num_validation=103
MakeModel afresh
InitializeModel curr_value_iter=0
Initialized from SIM weights.
iter 0 lr 0.001
number of model parameters: 2301732 (~= 8.8MB)
BalsaModel(
  (model): TreeConvolution(
    (attention_merger_3): AttentionMerger(
      (softmax): Softmax(dim=0)
    )
    (query_mlp): Sequential(
      (0): Linear(in_features=46, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
      (2): LeakyReLU(negative_slope=0.01)
      (3): Linear(in_features=128, out_features=64, bias=True)
      (4): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
      (5): LeakyReLU(negative_slope=0.01)
      (6): Linear(in_features=64, out_features=32, bias=True)
    )
    (conv_module_list_other): ModuleList(
      (0): Sequential(
        (0): TreeConv1d(
          (weights): Conv1d(173, 512, kernel_size=(3,), stride=(3,))
        )
        (1): TreeStandardize()
        (2): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (3): TreeConv1d(
          (weights): Conv1d(512, 256, kernel_size=(3,), stride=(3,))
        )
        (4): TreeStandardize()
        (5): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (6): TreeConv1d(
          (weights): Conv1d(256, 128, kernel_size=(3,), stride=(3,))
        )
        (7): TreeStandardize()
        (8): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (9): TreeMaxPool()
      )
    )
    (conv_module_list_hash_join): ModuleList(
      (0): Sequential(
        (0): TreeConv1d(
          (weights): Conv1d(173, 512, kernel_size=(3,), stride=(3,))
        )
        (1): TreeStandardize()
        (2): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (3): TreeConv1d(
          (weights): Conv1d(512, 256, kernel_size=(3,), stride=(3,))
        )
        (4): TreeStandardize()
        (5): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (6): TreeConv1d(
          (weights): Conv1d(256, 128, kernel_size=(3,), stride=(3,))
        )
        (7): TreeStandardize()
        (8): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (9): TreeMaxPool()
      )
    )
    (conv_module_list_nested_loop_join): ModuleList(
      (0): Sequential(
        (0): TreeConv1d(
          (weights): Conv1d(173, 512, kernel_size=(3,), stride=(3,))
        )
        (1): TreeStandardize()
        (2): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (3): TreeConv1d(
          (weights): Conv1d(512, 256, kernel_size=(3,), stride=(3,))
        )
        (4): TreeStandardize()
        (5): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (6): TreeConv1d(
          (weights): Conv1d(256, 128, kernel_size=(3,), stride=(3,))
        )
        (7): TreeStandardize()
        (8): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (9): TreeMaxPool()
      )
    )
    (out_mlp): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
      (2): LeakyReLU(negative_slope=0.01)
      (3): Linear(in_features=64, out_features=32, bias=True)
      (4): LayerNorm((32,), eps=1e-05, elementwise_affine=True)
      (5): LeakyReLU(negative_slope=0.01)
      (6): Linear(in_features=32, out_features=1, bias=True)
    )
  )
)
No best checkpoint found (run validaiton yet?); model left unchanged.
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('8'))
AND (it2.id in ('6'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('Austria','Belgium','Brazil','Hungary','India','Mexico','Poland','Spain'))
AND (mi2.info in ('Mono','Silent'))
AND (kt.kind in ('episode','movie','tv movie'))
AND (rt.role in ('costume designer','production designer'))
AND (n.gender IS NULL)
AND (t.production_year <= 1975)
AND (t.production_year >= 1875)
AND (k.keyword IN ('based-on-play','cigarette-smoking','friendship','independent-film','jealousy','lesbian-sex','male-nudity','marriage','mother-daughter-relationship','one-word-title','oral-sex','police','singing','song'))

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 1 1 4 4 4 3 4 4 4 3 3 4 4]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 8.84955749e-03 8.84955749e-03
 0.00000000e+00 0.00000000e+00 0.00000000e+00 1.04345236e-04
 4.28571433e-01 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 8.93923570e-04 7.48666062e-04 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.00000000e+00 0.00000000e+00 3.48630399e-01 0.00000000e+00
 0.00000000e+00 0.00000000e+00 1.66666672e-01 1.81086034e-01
 0.00000000e+00 0.00000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  120.18293139873083
Other difference exceed the threshold, need to switch module.
the difference value is:  120.18293139873083
Hash difference exceed the threshold, need to switch module.
the difference value is:  120.18293139873083
Nested loop difference exceed the threshold, need to switch module.
created a new module and initialize the weights for other
created a new module and initialize the weights for hash join
created a new module and initialize the weights for nested loop join
Planning took 226.9ms
q10a_bao, predicted time: 12.2
q10a_bao,(predicted 12.2),/*+ MergeJoin(it1 mi2 t kt mk mi1 k ci rt n it2)
 MergeJoin(it1 mi2 t kt mk mi1 k ci rt n)
 MergeJoin(it1 mi2 t kt mk mi1 k ci rt)
 MergeJoin(it1 mi2 t kt mk mi1 k ci)
 MergeJoin(it1 mi2 t kt mk mi1 k)
 MergeJoin(mi2 t kt mk mi1 k)
 MergeJoin(mi2 t kt mk mi1)
 MergeJoin(mi2 t kt mk)
 MergeJoin(mi2 t kt)
 MergeJoin(mi2 t)
 SeqScan(it1)
 IndexScan(mi2)
 SeqScan(t)
 IndexScan(kt)
 SeqScan(mk)
 IndexScan(mi1)
 SeqScan(k)
 SeqScan(ci)
 IndexScan(rt)
 IndexScan(n)
 IndexScan(it2)
 Leading((((((it1 (((((mi2 t) kt) mk) mi1) k)) ci) rt) n) it2)) */
---------------------------------------
sql_str:  SELECT MIN(chn.name) AS uncredited_voiced_character,
       MIN(t.title) AS russian_movie
FROM char_name AS chn,
     cast_info AS ci,
     company_name AS cn,
     company_type AS ct,
     movie_companies AS mc,
     role_type AS rt,
     title AS t
WHERE ci.note LIKE '%(voice)%'
  AND ci.note LIKE '%(uncredited)%'
  AND cn.country_code = '[ru]'
  AND rt.role = 'actor'
  AND t.production_year > 2005
  AND t.id = mc.movie_id
  AND t.id = ci.movie_id
  AND ci.movie_id = mc.movie_id
  AND chn.id = ci.person_role_id
  AND rt.id = ci.role_id
  AND cn.id = mc.company_id
  AND ct.id = mc.company_type_id;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 0 1 1 0 3 3 4 4 3 4 5]
indexes_env_matrix for this sql:  [ 1  2 13  2  3 12  3  4 11  4  5 10  5  6  9  6  7  8  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.3451100e-04
 1.0000000e+00 0.0000000e+00 0.0000000e+00 5.8000740e-03 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 8.3333336e-02 3.9825663e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  126.85547989786495
Other difference exceed the threshold, need to switch module.
the difference value is:  126.85547989786495
Hash difference exceed the threshold, need to switch module.
the difference value is:  126.85547989786495
Nested loop difference exceed the threshold, need to switch module.
Planning took 406.8ms
q10a_job, predicted time: 4.6
q10a_job,(predicted 4.6),/*+ MergeJoin(cn rt chn ci t mc ct)
 MergeJoin(rt chn ci t mc ct)
 MergeJoin(chn ci t mc ct)
 MergeJoin(ci t mc ct)
 MergeJoin(t mc ct)
 MergeJoin(mc ct)
 IndexScan(cn)
 SeqScan(rt)
 SeqScan(chn)
 SeqScan(ci)
 IndexScan(t)
 SeqScan(mc)
 IndexScan(ct)
 Leading((cn (rt (chn (ci (t (mc ct))))))) */
---------------------------------------
sql_str:  SELECT MIN(chn.name) AS character,
       MIN(t.title) AS russian_mov_with_actor_producer
FROM char_name AS chn,
     cast_info AS ci,
     company_name AS cn,
     company_type AS ct,
     movie_companies AS mc,
     role_type AS rt,
     title AS t
WHERE ci.note LIKE '%(producer)%'
  AND cn.country_code = '[ru]'
  AND rt.role = 'actor'
  AND t.production_year > 2010
  AND t.id = mc.movie_id
  AND t.id = ci.movie_id
  AND ci.movie_id = mc.movie_id
  AND chn.id = ci.person_role_id
  AND rt.id = ci.role_id
  AND cn.id = mc.company_id
  AND ct.id = mc.company_type_id;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [0 1 0 1 1 0 3 3 4 4 3 4 3]
indexes_env_matrix for this sql:  [ 1  2 13  2  3 12  3  4 11  4  5 10  5  6  9  6  7  8  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0]
query_enc_matrix for this sql:  [0.         0.         0.         0.         0.04097773 1.
 0.         0.         0.00580007 0.         0.         1.
 0.         0.         0.         0.         0.         0.
 0.         0.         0.         0.         0.         0.
 1.         0.         0.         0.         0.         0.
 0.         0.         0.         0.         0.         0.
 0.         0.         0.         0.         0.         0.
 0.08333334 0.15569755 0.         0.        ]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  127.44624032416239
Other difference exceed the threshold, need to switch module.
the difference value is:  127.44624032416239
Hash difference exceed the threshold, need to switch module.
the difference value is:  127.44624032416239
Nested loop difference exceed the threshold, need to switch module.
Planning took 114.4ms
q10b_job, predicted time: 12.4
q10b_job,(predicted 12.4),/*+ MergeJoin(ct cn ci rt t chn mc)
 MergeJoin(cn ci rt t chn mc)
 MergeJoin(ci rt t chn mc)
 MergeJoin(ci rt t chn)
 MergeJoin(ci rt t)
 MergeJoin(ci rt)
 SeqScan(ct)
 SeqScan(cn)
 IndexScan(ci)
 SeqScan(rt)
 IndexScan(t)
 SeqScan(chn)
 SeqScan(mc)
 Leading((ct (cn ((((ci rt) t) chn) mc)))) */
---------------------------------------
sql_str:  SELECT MIN(n.name) AS member_in_charnamed_movie FROM cast_info AS ci, company_name AS cn, keyword AS k, movie_companies AS mc, movie_keyword AS mk, name AS n, title AS t WHERE cn.country_code ='[us]' AND k.keyword ='character-name-in-title' AND n.id = ci.person_id AND ci.movie_id = t.id AND t.id = mk.movie_id AND mk.keyword_id = k.id AND t.id = mc.movie_id AND mc.company_id = cn.id AND ci.movie_id = mc.movie_id AND ci.movie_id = mk.movie_id AND mc.movie_id = mk.movie_id;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 3 4 5 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 13  2  3 12  3  4 11  4  5 10  5  6  9  6  7  8  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 3.6416635e-01 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 7.4532309e-06
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  123.89187446643552
Other difference exceed the threshold, need to switch module.
the difference value is:  123.89187446643552
Hash difference exceed the threshold, need to switch module.
the difference value is:  123.89187446643552
Nested loop difference exceed the threshold, need to switch module.
Planning took 331.5ms
q11a_bao, predicted time: 7.8
q11a_bao,(predicted 7.8),/*+ MergeJoin(n ci k cn mc t mk)
 MergeJoin(ci k cn mc t mk)
 MergeJoin(k cn mc t mk)
 MergeJoin(cn mc t mk)
 MergeJoin(cn mc t)
 MergeJoin(mc t)
 IndexScan(n)
 SeqScan(ci)
 SeqScan(k)
 IndexScan(cn)
 IndexScan(mc)
 SeqScan(t)
 SeqScan(mk)
 Leading((n (ci (k ((cn (mc t)) mk))))) */
---------------------------------------
sql_str:  SELECT MIN(cn.name) AS from_company,
       MIN(lt.link) AS movie_link_type,
       MIN(t.title) AS non_polish_sequel_movie
FROM company_name AS cn,
     company_type AS ct,
     keyword AS k,
     link_type AS lt,
     movie_companies AS mc,
     movie_keyword AS mk,
     movie_link AS ml,
     title AS t
WHERE cn.country_code !='[pl]'
  AND (cn.name LIKE '%Film%'
       OR cn.name LIKE '%Warner%')
  AND ct.kind ='production companies'
  AND k.keyword ='sequel'
  AND lt.link LIKE '%follow%'
  AND mc.note IS NULL
  AND t.production_year BETWEEN 1950 AND 2000
  AND lt.id = ml.link_type_id
  AND ml.movie_id = t.id
  AND t.id = mk.movie_id
  AND mk.keyword_id = k.id
  AND t.id = mc.movie_id
  AND mc.company_type_id = ct.id
  AND mc.company_id = cn.id
  AND ml.movie_id = mk.movie_id
  AND ml.movie_id = mc.movie_id
  AND mk.movie_id = mc.movie_id;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 3 1 1 3 4 4 4 4 3 4]
indexes_env_matrix for this sql:  [ 1  2 15  2  3 14  3  4 13  4  5 12  5  6  7  6  0  0  7  8 11  8  9 10
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.5243300e-01 0.0000000e+00
 0.0000000e+00 2.5000000e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 7.4532309e-06
 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.5555556e-02 4.8620018e-01
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 3.6568391e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  122.78767754484014
Other difference exceed the threshold, need to switch module.
the difference value is:  122.78767754484014
Hash difference exceed the threshold, need to switch module.
the difference value is:  122.78767754484014
Nested loop difference exceed the threshold, need to switch module.
Planning took 95.5ms
q11a_job, predicted time: 8.4
q11a_job,(predicted 8.4),/*+ MergeJoin(cn ct mc ml t lt mk k)
 MergeJoin(cn ct mc ml t lt mk)
 MergeJoin(cn ct mc ml t lt)
 MergeJoin(ct mc ml t lt)
 MergeJoin(mc ml t lt)
 MergeJoin(ml t lt)
 MergeJoin(ml t)
 IndexScan(cn)
 SeqScan(ct)
 SeqScan(mc)
 SeqScan(ml)
 IndexScan(t)
 SeqScan(lt)
 IndexScan(mk)
 IndexScan(k)
 Leading((((cn (ct (mc ((ml t) lt)))) mk) k)) */
---------------------------------------
sql_str:  SELECT MIN(cn.name) AS from_company,
       MIN(lt.link) AS movie_link_type,
       MIN(t.title) AS sequel_movie
FROM company_name AS cn,
     company_type AS ct,
     keyword AS k,
     link_type AS lt,
     movie_companies AS mc,
     movie_keyword AS mk,
     movie_link AS ml,
     title AS t
WHERE cn.country_code !='[pl]'
  AND (cn.name LIKE '%Film%'
       OR cn.name LIKE '%Warner%')
  AND ct.kind ='production companies'
  AND k.keyword ='sequel'
  AND lt.link LIKE '%follows%'
  AND mc.note IS NULL
  AND t.production_year = 1998
  AND t.title LIKE '%Money%'
  AND lt.id = ml.link_type_id
  AND ml.movie_id = t.id
  AND t.id = mk.movie_id
  AND mk.keyword_id = k.id
  AND t.id = mc.movie_id
  AND mc.company_type_id = ct.id
  AND mc.company_id = cn.id
  AND ml.movie_id = mk.movie_id
  AND ml.movie_id = mc.movie_id
  AND mk.movie_id = mc.movie_id;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 3 1 1 3 4 4 4 4 3 4]
indexes_env_matrix for this sql:  [ 1  2 15  2  3 14  3  4 13  4  5 12  5  6  7  6  0  0  7  8 11  8  9 10
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.5243300e-01 0.0000000e+00
 0.0000000e+00 2.5000000e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 7.4532309e-06
 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.5555556e-02 4.8620018e-01
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.9776041e-06 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  120.44639005870886
Other difference exceed the threshold, need to switch module.
the difference value is:  120.44639005870886
Hash difference exceed the threshold, need to switch module.
the difference value is:  120.44639005870886
Nested loop difference exceed the threshold, need to switch module.
Planning took 271.0ms
q11b_job, predicted time: 4.6
q11b_job,(predicted 4.6),/*+ MergeJoin(cn k t ml mc mk ct lt)
 MergeJoin(cn k t ml mc mk ct)
 MergeJoin(k t ml mc mk ct)
 MergeJoin(k t ml mc mk)
 MergeJoin(t ml mc mk)
 MergeJoin(ml mc mk)
 MergeJoin(mc mk)
 SeqScan(cn)
 SeqScan(k)
 IndexScan(t)
 IndexScan(ml)
 SeqScan(mc)
 SeqScan(mk)
 IndexScan(ct)
 SeqScan(lt)
 Leading(((cn ((k (t (ml (mc mk)))) ct)) lt)) */
---------------------------------------
sql_str:  SELECT
    MIN(n.name) AS member_in_charnamed_movie
FROM
    cast_info AS ci,
    company_name AS cn,
    keyword AS k,
    movie_companies AS mc,
    movie_keyword AS mk,
    name AS n,
    title AS t
WHERE
    cn.country_code = '[uk]'
    AND k.keyword = 'character-name-in-title'
    AND n.id = ci.person_id
    AND ci.movie_id = t.id
    AND t.id = mk.movie_id
    AND mk.keyword_id = k.id
    AND t.id = mc.movie_id
    AND mc.company_id = cn.id
    AND ci.movie_id = mc.movie_id
    AND ci.movie_id = mk.movie_id
    AND mc.movie_id = mk.movie_id
GROUP BY t.production_year, t.title
ORDER BY t.production_year, t.title;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 3 4 4 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 13  2  3 12  3  4 11  4  5 10  5  6  9  6  7  8  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0]
query_enc_matrix for this sql:  [0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 1.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 9.361822e-05 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 7.453231e-06
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 1.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 1.000000e+00 0.000000e+00 1.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 1.000000e+00 0.000000e+00
 0.000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  228.11360074614248
Other difference exceed the threshold, need to switch module.
the difference value is:  228.11360074614248
Hash difference exceed the threshold, need to switch module.
the difference value is:  228.11360074614248
Nested loop difference exceed the threshold, need to switch module.
Planning took 500.6ms
q11c_baochanged, predicted time: 5596.3
q11c_baochanged,(predicted 5596.3),/*+ NestLoop(mk k t mc cn ci n)
 NestLoop(mk k t mc cn ci)
 NestLoop(mk k t mc cn)
 NestLoop(mk k t mc)
 NestLoop(mk k t)
 NestLoop(mk k)
 SeqScan(mk)
 IndexScan(k)
 IndexScan(t)
 IndexScan(mc)
 IndexScan(cn)
 IndexScan(ci)
 IndexScan(n)
 Leading(((((((mk k) t) mc) cn) ci) n)) */
---------------------------------------
sql_str:  SELECT MIN(n.name) AS member_in_charnamed_american_movie, MIN(n.name) AS a1 FROM cast_info AS ci, company_name AS cn, keyword AS k, movie_companies AS mc, movie_keyword AS mk, name AS n, title AS t WHERE cn.country_code ='[us]' AND k.keyword ='character-name-in-title' AND n.name  LIKE 'B%' AND n.id = ci.person_id AND ci.movie_id = t.id AND t.id = mk.movie_id AND mk.keyword_id = k.id AND t.id = mc.movie_id AND mc.company_id = cn.id AND ci.movie_id = mc.movie_id AND ci.movie_id = mk.movie_id AND mc.movie_id = mk.movie_id;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 3 4 5 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 13  2  3 12  3  4 11  4  5 10  5  6  9  6  7  8  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 3.6416635e-01 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 7.4532309e-06
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 8.0807373e-02 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  123.89187446643552
Other difference exceed the threshold, need to switch module.
the difference value is:  123.89187446643552
Hash difference exceed the threshold, need to switch module.
the difference value is:  123.89187446643552
Nested loop difference exceed the threshold, need to switch module.
Planning took 126.3ms
q12a_bao, predicted time: 7.8
q12a_bao,(predicted 7.8),/*+ MergeJoin(cn ci k mc mk t n)
 MergeJoin(cn ci k mc mk t)
 MergeJoin(ci k mc mk t)
 MergeJoin(k mc mk t)
 MergeJoin(mc mk t)
 MergeJoin(mc mk)
 IndexScan(cn)
 SeqScan(ci)
 IndexScan(k)
 IndexScan(mc)
 SeqScan(mk)
 SeqScan(t)
 IndexScan(n)
 Leading(((cn (ci (k ((mc mk) t)))) n)) */
---------------------------------------
sql_str:  SELECT MIN(cn.name) AS movie_company,
       MIN(mi_idx.info) AS rating,
       MIN(t.title) AS drama_horror_movie
FROM company_name AS cn,
     company_type AS ct,
     info_type AS it1,
     info_type AS it2,
     movie_companies AS mc,
     movie_info AS mi,
     movie_info_idx AS mi_idx,
     title AS t
WHERE cn.country_code = '[us]'
  AND ct.kind = 'production companies'
  AND it1.info = 'genres'
  AND it2.info = 'rating'
  AND mi.info IN ('Drama',
                  'Horror')
  AND mi_idx.info > '8.0'
  AND t.production_year BETWEEN 2005 AND 2008
  AND t.id = mi.movie_id
  AND t.id = mi_idx.movie_id
  AND mi.info_type_id = it1.id
  AND mi_idx.info_type_id = it2.id
  AND t.id = mc.movie_id
  AND ct.id = mc.company_type_id
  AND cn.id = mc.company_id
  AND mc.movie_id = mi.movie_id
  AND mc.movie_id = mi_idx.movie_id
  AND mi.movie_id = mi_idx.movie_id;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 0 1 0 3 3 4 3 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 15  2  3 14  3  4 13  4  5 12  5  6 11  6  7 10  7  8  9  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0]
query_enc_matrix for this sql:  [0.         0.         0.         0.         0.         0.
 0.         0.         0.36416635 0.         0.         0.25
 0.         0.         0.00884956 0.00884956 0.         0.
 0.         0.         0.         0.         0.         0.
 1.         0.         0.         0.01933893 0.         0.
 0.03897872 0.         0.         0.         0.         0.
 0.         0.         0.         0.         0.         0.
 0.         0.17406791 0.         0.        ]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  123.49574470015631
Other difference exceed the threshold, need to switch module.
the difference value is:  123.49574470015631
Hash difference exceed the threshold, need to switch module.
the difference value is:  123.49574470015631
Nested loop difference exceed the threshold, need to switch module.
Planning took 78.8ms
q12a_job, predicted time: 4.4
q12a_job,(predicted 4.4),/*+ MergeJoin(ct mi t it1 mi_idx it2 mc cn)
 MergeJoin(ct mi t it1 mi_idx it2 mc)
 MergeJoin(mi t it1 mi_idx it2 mc)
 MergeJoin(mi t it1 mi_idx it2)
 MergeJoin(mi t it1 mi_idx)
 MergeJoin(mi t it1)
 MergeJoin(mi t)
 SeqScan(ct)
 IndexScan(mi)
 IndexScan(t)
 SeqScan(it1)
 SeqScan(mi_idx)
 IndexScan(it2)
 SeqScan(mc)
 SeqScan(cn)
 Leading(((ct (((((mi t) it1) mi_idx) it2) mc)) cn)) */
---------------------------------------
sql_str:  SELECT MIN(mi.info) AS budget,
       MIN(t.title) AS unsuccsessful_movie
FROM company_name AS cn,
     company_type AS ct,
     info_type AS it1,
     info_type AS it2,
     movie_companies AS mc,
     movie_info AS mi,
     movie_info_idx AS mi_idx,
     title AS t
WHERE cn.country_code ='[us]'
  AND ct.kind IS NOT NULL
  AND (ct.kind ='production companies'
       OR ct.kind = 'distributors')
  AND it1.info ='budget'
  AND it2.info ='bottom 10 rank'
  AND t.production_year >2000
  AND (t.title LIKE 'Birdemic%'
       OR t.title LIKE '%Movie%')
  AND t.id = mi.movie_id
  AND t.id = mi_idx.movie_id
  AND mi.info_type_id = it1.id
  AND mi_idx.info_type_id = it2.id
  AND t.id = mc.movie_id
  AND ct.id = mc.company_type_id
  AND cn.id = mc.company_id
  AND mc.movie_id = mi.movie_id
  AND mc.movie_id = mi_idx.movie_id
  AND mi.movie_id = mi_idx.movie_id;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 0 3 3 4 4 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 15  2  3 14  3  4 13  4  5 12  5  6 11  6  7 10  7  8  9  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 3.6416635e-01 0.0000000e+00
 0.0000000e+00 5.0000000e-01 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0046228e-04 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  123.33232980492409
Other difference exceed the threshold, need to switch module.
the difference value is:  123.33232980492409
Hash difference exceed the threshold, need to switch module.
the difference value is:  123.33232980492409
Nested loop difference exceed the threshold, need to switch module.
Planning took 598.5ms
q12b_job, predicted time: 2.4
q12b_job,(predicted 2.4),/*+ MergeJoin(cn it2 it1 mi_idx t mi mc ct)
 MergeJoin(it2 it1 mi_idx t mi mc ct)
 MergeJoin(it1 mi_idx t mi mc ct)
 MergeJoin(mi_idx t mi mc ct)
 MergeJoin(t mi mc ct)
 MergeJoin(mi mc ct)
 MergeJoin(mc ct)
 IndexScan(cn)
 SeqScan(it2)
 SeqScan(it1)
 IndexScan(mi_idx)
 IndexScan(t)
 IndexScan(mi)
 IndexScan(mc)
 IndexScan(ct)
 Leading((cn (it2 (it1 (mi_idx (t (mi (mc ct)))))))) */
---------------------------------------
sql_str:  SELECT
    MIN(n.name) AS member_in_charnamed_american_movie,
    MIN(n.name) AS a1
FROM
    cast_info AS ci,
    company_name AS cn,
    keyword AS k,
    movie_companies AS mc,
    movie_keyword AS mk,
    name AS n,
    title AS t
WHERE
    cn.country_code = '[uk]'
    AND k.keyword = 'character-name-in-title'
    AND n.name LIKE 'B%'
    AND n.id = ci.person_id
    AND ci.movie_id = t.id
    AND t.id = mk.movie_id
    AND mk.keyword_id = k.id
    AND t.id = mc.movie_id
    AND mc.company_id = cn.id
    AND ci.movie_id = mc.movie_id
    AND ci.movie_id = mk.movie_id
    AND mc.movie_id = mk.movie_id
GROUP BY t.production_year, t.title
ORDER BY t.production_year, t.title;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 3 4 4 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 13  2  3 12  3  4 11  4  5 10  5  6  9  6  7  8  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0]
query_enc_matrix for this sql:  [0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 1.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 9.361822e-05 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 7.453231e-06
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 1.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 1.000000e+00 0.000000e+00 8.080737e-02 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 1.000000e+00 0.000000e+00
 0.000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  227.0558454927897
Other difference exceed the threshold, need to switch module.
the difference value is:  227.0558454927897
Hash difference exceed the threshold, need to switch module.
the difference value is:  227.0558454927897
Nested loop difference exceed the threshold, need to switch module.
Planning took 529.9ms
q12c_baochanged, predicted time: 5578.5
q12c_baochanged,(predicted 5578.5),/*+ MergeJoin(ci n cn mc t mk k)
 NestLoop(mk k)
 MergeJoin(ci n cn mc t)
 MergeJoin(cn mc t)
 NestLoop(mc t)
 NestLoop(ci n)
 SeqScan(ci)
 IndexScan(n)
 SeqScan(cn)
 IndexScan(mc)
 IndexScan(t)
 IndexScan(mk)
 IndexScan(k)
 Leading((((ci n) (cn (mc t))) (mk k))) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
movie_keyword as mk,
keyword as k,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND t.id = mk.movie_id
AND mk.keyword_id = k.id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('episode'))
AND (t.production_year <= 1975)
AND (t.production_year >= 1925)
AND (mi1.info IN ('Mono'))
AND (it1.id IN ('13','6','8'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 7.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 3.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 10000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND rt.id = ci.role_id
AND (n.gender in ('m') OR n.gender IS NULL)
AND (n.name_pcode_nf in ('A4163','B6563','D1316','F6521','F6523','F6524','J5216','J5262','P3616'))
AND (ci.note IS NULL)
AND (rt.role in ('actor'))
AND (it5.id in ('32'))

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 4 3 5 4 5 4 5 3 4]
indexes_env_matrix for this sql:  [ 1  2 31  2  3 30  3  4 29  4  5  6  5  0  0  6  7 28  7  8 27  8  9 26
  9 10 25 10 11 24 11 12 23 12 13 22 13 14 21 14 15 20 15 16 19 16 17 18
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0 28  0  0 29  0  0 30  0  0 31  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.0610288e-01
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 1.0000000e+00
 1.4285715e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.4195266e-02 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04
 0.0000000e+00 1.0000000e+00 0.0000000e+00 7.0058941e-03 0.0000000e+00
 0.0000000e+00 3.2351846e-03 8.3333336e-02 1.3999696e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  94.9127693901942
the difference value is:  94.9127693901942
the difference value is:  94.9127693901942
Planning took 1498.9ms
q13a_bao, predicted time: 2.1
q13a_bao,(predicted 2.1),/*+ MergeJoin(it4 an rt mii2 it1 k mi1 pi1 it3 kt mii1 t ci n it5 mk)
 MergeJoin(an rt mii2 it1 k mi1 pi1 it3 kt mii1 t ci n it5 mk)
 MergeJoin(rt mii2 it1 k mi1 pi1 it3 kt mii1 t ci n it5 mk)
 MergeJoin(mii2 it1 k mi1 pi1 it3 kt mii1 t ci n it5 mk)
 MergeJoin(it1 k mi1 pi1 it3 kt mii1 t ci n it5 mk)
 MergeJoin(k mi1 pi1 it3 kt mii1 t ci n it5 mk)
 MergeJoin(mi1 pi1 it3 kt mii1 t ci n it5 mk)
 MergeJoin(mi1 pi1 it3 kt mii1 t ci n it5)
 MergeJoin(mi1 pi1 it3 kt mii1 t ci n)
 MergeJoin(pi1 it3 kt mii1 t ci n)
 MergeJoin(pi1 it3 kt mii1 t ci)
 MergeJoin(it3 kt mii1 t ci)
 MergeJoin(it3 kt mii1 t)
 MergeJoin(kt mii1 t)
 MergeJoin(mii1 t)
 IndexScan(it4)
 SeqScan(an)
 SeqScan(rt)
 IndexScan(mii2)
 IndexScan(it1)
 IndexScan(k)
 IndexScan(mi1)
 IndexScan(pi1)
 SeqScan(it3)
 SeqScan(kt)
 IndexScan(mii1)
 SeqScan(t)
 IndexScan(ci)
 IndexScan(n)
 SeqScan(it5)
 IndexScan(mk)
 Leading((it4 (an (rt (mii2 (it1 (k (((mi1 ((pi1 ((it3 (kt (mii1 t))) ci)) n)) it5) mk)))))))) */
---------------------------------------
sql_str:  SELECT MIN(mi.info) AS release_date,
       MIN(miidx.info) AS rating,
       MIN(t.title) AS german_movie
FROM company_name AS cn,
     company_type AS ct,
     info_type AS it,
     info_type AS it2,
     kind_type AS kt,
     movie_companies AS mc,
     movie_info AS mi,
     movie_info_idx AS miidx,
     title AS t
WHERE cn.country_code ='[de]'
  AND ct.kind ='production companies'
  AND it.info ='rating'
  AND it2.info ='release dates'
  AND kt.kind ='movie'
  AND mi.movie_id = t.id
  AND it2.id = mi.info_type_id
  AND kt.id = t.kind_id
  AND mc.movie_id = t.id
  AND cn.id = mc.company_id
  AND ct.id = mc.company_type_id
  AND miidx.movie_id = t.id
  AND it.id = miidx.info_type_id
  AND mi.movie_id = miidx.movie_id
  AND mi.movie_id = mc.movie_id
  AND miidx.movie_id = mc.movie_id;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [0 1 1 0 1 0 1 0 3 3 4 3 4 3 4 4 3]
indexes_env_matrix for this sql:  [ 1  2 17  2  3 16  3  4 15  4  5 14  5  6 13  6  7 12  7  8 11  8  9 10
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0]
query_enc_matrix for this sql:  [0.         0.         0.         0.         0.         0.
 0.         0.         0.04353247 0.         0.         0.25
 0.         0.00884956 0.         0.00884956 0.         0.
 0.         0.         0.14285715 0.         0.         0.
 1.         0.         0.         1.         0.         0.
 0.         0.         0.         0.         0.         1.
 0.         0.         0.         0.         0.         0.
 0.         1.         0.         0.        ]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  127.54524619844362
Other difference exceed the threshold, need to switch module.
the difference value is:  127.54524619844362
Hash difference exceed the threshold, need to switch module.
the difference value is:  127.54524619844362
Nested loop difference exceed the threshold, need to switch module.
Planning took 136.5ms
q13a_job, predicted time: 2158.4
q13a_job,(predicted 2158.4),/*+ MergeJoin(ct miidx kt mi it2 t it mc cn)
 MergeJoin(miidx kt mi it2 t it mc cn)
 MergeJoin(miidx kt mi it2 t it mc)
 MergeJoin(miidx kt mi it2 t it)
 MergeJoin(miidx kt mi it2 t)
 NestLoop(kt mi it2 t)
 NestLoop(mi it2 t)
 HashJoin(mi it2)
 SeqScan(ct)
 SeqScan(miidx)
 SeqScan(kt)
 IndexScan(mi)
 IndexScan(it2)
 IndexScan(t)
 SeqScan(it)
 IndexScan(mc)
 SeqScan(cn)
 Leading((ct ((((miidx (kt ((mi it2) t))) it) mc) cn))) */
---------------------------------------
sql_str:  SELECT MIN(cn.name) AS producing_company,
       MIN(miidx.info) AS rating,
       MIN(t.title) AS movie_about_winning
FROM company_name AS cn,
     company_type AS ct,
     info_type AS it,
     info_type AS it2,
     kind_type AS kt,
     movie_companies AS mc,
     movie_info AS mi,
     movie_info_idx AS miidx,
     title AS t
WHERE cn.country_code ='[us]'
  AND ct.kind ='production companies'
  AND it.info ='rating'
  AND it2.info ='release dates'
  AND kt.kind ='movie'
  AND t.title != ''
  AND (t.title LIKE '%Champion%'
       OR t.title LIKE '%Loser%')
  AND mi.movie_id = t.id
  AND it2.id = mi.info_type_id
  AND kt.id = t.kind_id
  AND mc.movie_id = t.id
  AND cn.id = mc.company_id
  AND ct.id = mc.company_type_id
  AND miidx.movie_id = t.id
  AND it.id = miidx.info_type_id
  AND mi.movie_id = miidx.movie_id
  AND mi.movie_id = mc.movie_id
  AND miidx.movie_id = mc.movie_id;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 3 3 4 4 4 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 17  2  3 16  3  4 15  4  5 14  5  6 13  6  7 12  7  8 11  8  9 10
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 3.6416635e-01 0.0000000e+00
 0.0000000e+00 2.5000000e-01 0.0000000e+00 8.8495575e-03 0.0000000e+00
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.4285715e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.8589478e-04 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  120.42202286486149
Other difference exceed the threshold, need to switch module.
the difference value is:  120.42202286486149
Hash difference exceed the threshold, need to switch module.
the difference value is:  120.42202286486149
Nested loop difference exceed the threshold, need to switch module.
Planning took 465.0ms
q13b_job, predicted time: 2.7
q13b_job,(predicted 2.7),/*+ MergeJoin(cn it miidx kt mc ct t it2 mi)
 MergeJoin(it miidx kt mc ct t it2 mi)
 MergeJoin(miidx kt mc ct t it2 mi)
 MergeJoin(kt mc ct t it2 mi)
 MergeJoin(mc ct t it2 mi)
 MergeJoin(t it2 mi)
 MergeJoin(it2 mi)
 MergeJoin(mc ct)
 IndexScan(cn)
 IndexScan(it)
 IndexScan(miidx)
 SeqScan(kt)
 SeqScan(mc)
 IndexScan(ct)
 IndexScan(t)
 IndexScan(it2)
 IndexScan(mi)
 Leading((cn (it (miidx (kt ((mc ct) (t (it2 mi)))))))) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
movie_keyword as mk,
keyword as k,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND t.id = mk.movie_id
AND mk.keyword_id = k.id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('episode'))
AND (t.production_year <= 1975)
AND (t.production_year >= 1925)
AND (mi1.info IN ('Mono'))
AND (it1.id IN ('13'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 7.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 3.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 10000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND rt.id = ci.role_id
AND (n.gender in ('m') OR n.gender IS NULL)
AND (n.name_pcode_nf in ('A4163','B6563','D1316','F6521','F6523','F6524','J5216','J5262','P3616'))
AND (ci.note IS NULL)
AND (rt.role in ('actor'))
AND (it5.id in ('32'))
GROUP BY t.production_year, kt.kind
ORDER BY t.production_year, kt.kind;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 4 3 5 4 3 4 5 3 4]
indexes_env_matrix for this sql:  [ 1  2 31  2  3 30  3  4 29  4  5  6  5  0  0  6  7 28  7  8 27  8  9 26
  9 10 25 10 11 24 11 12 23 12 13 22 13 14 21 14 15 20 15 16 19 16 17 18
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0 28  0  0 29  0  0 30  0  0 31  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.0610288e-01
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 1.0000000e+00
 1.4285715e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.7080398e-04 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04
 0.0000000e+00 1.0000000e+00 0.0000000e+00 7.0058941e-03 0.0000000e+00
 0.0000000e+00 3.2351846e-03 8.3333336e-02 1.3999696e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  209.4843479443451
Other difference exceed the threshold, need to switch module.
the difference value is:  209.4843479443451
Hash difference exceed the threshold, need to switch module.
the difference value is:  209.4843479443451
Nested loop difference exceed the threshold, need to switch module.
Planning took 2353.8ms
q13c_baochanged, predicted time: 426.0
q13c_baochanged,(predicted 426.0),/*+ MergeJoin(mi1 mii2 it4 t kt it3 mii1 mk k it1 ci pi1 it5 rt n an)
 MergeJoin(mi1 mii2 it4 t kt it3 mii1 mk k it1 ci pi1 it5 rt n)
 MergeJoin(mi1 mii2 it4 t kt it3 mii1 mk k it1 ci pi1 it5 rt)
 MergeJoin(mi1 mii2 it4 t kt it3 mii1 mk k it1 ci pi1 it5)
 MergeJoin(mi1 mii2 it4 t kt it3 mii1 mk k it1 ci pi1)
 MergeJoin(mi1 mii2 it4 t kt it3 mii1 mk k it1 ci)
 MergeJoin(mi1 mii2 it4 t kt it3 mii1 mk k it1)
 MergeJoin(mi1 mii2 it4 t kt it3 mii1 mk k)
 MergeJoin(mii2 it4 t kt it3 mii1 mk k)
 MergeJoin(mii2 it4 t kt it3 mii1 mk)
 MergeJoin(mii2 it4 t kt it3 mii1)
 NestLoop(it3 mii1)
 MergeJoin(mii2 it4 t kt)
 NestLoop(t kt)
 NestLoop(mii2 it4)
 IndexScan(mi1)
 SeqScan(mii2)
 IndexScan(it4)
 SeqScan(t)
 IndexScan(kt)
 IndexScan(it3)
 IndexScan(mii1)
 IndexScan(mk)
 SeqScan(k)
 IndexScan(it1)
 IndexScan(ci)
 IndexScan(pi1)
 SeqScan(it5)
 SeqScan(rt)
 IndexScan(n)
 IndexScan(an)
 Leading(((((((((mi1 (((((mii2 it4) (t kt)) (it3 mii1)) mk) k)) it1) ci) pi1) it5) rt) n) an)) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND mii2.movie_id = mii1.movie_id
AND mi1.movie_id = mii1.movie_id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('episode','movie'))
AND (t.production_year <= 1990)
AND (t.production_year >= 1950)
AND (mi1.info IN ('OFM:35 mm','PCS:Spherical','PFM:35 mm','PFM:Video','RAT:1.33 : 1','RAT:1.37 : 1'))
AND (it1.id IN ('15','7','98'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 11.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 7.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 1000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND an.person_id = pi1.person_id
AND rt.id = ci.role_id
AND (n.gender in ('m') OR n.gender IS NULL)
AND (n.name_pcode_nf in ('B6514','D1352','J5163','J5245','M2423','M6126','M6241','M6245','M6252','P3614','V2361','W4125','W4525'))
AND (ci.note in ('(executive producer)') OR ci.note IS NULL)
AND (rt.role in ('actor','producer'))
AND (it5.id in ('19'))

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 4 5 5 4 3 4 3]
indexes_env_matrix for this sql:  [ 1  2 27  2  3 26  3  4 25  4  5  6  5  0  0  6  7 24  7  8 23  8  9 22
  9 10 21 10 11 20 11 12 19 12 13 18 13 14 17 14 15 16 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.1726785e-01
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 0.0000000e+00
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.1657541e-02 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04
 0.0000000e+00 0.0000000e+00 0.0000000e+00 4.1180653e-03 0.0000000e+00
 0.0000000e+00 2.8182682e-02 1.6666667e-01 2.1578270e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  101.69280053491296
Other difference exceed the threshold, need to switch module.
the difference value is:  101.69280053491296
Hash difference exceed the threshold, need to switch module.
the difference value is:  101.69280053491296
Nested loop difference exceed the threshold, need to switch module.
Planning took 653.0ms
q14a_bao, predicted time: 2.5
q14a_bao,(predicted 2.5),/*+ MergeJoin(an rt it5 pi1 ci it3 kt mii1 t mi1 it1 mii2 it4 n)
 MergeJoin(rt it5 pi1 ci it3 kt mii1 t mi1 it1 mii2 it4 n)
 MergeJoin(rt it5 pi1 ci it3 kt mii1 t mi1 it1 mii2 it4)
 MergeJoin(rt it5 pi1 ci it3 kt mii1 t mi1 it1 mii2)
 MergeJoin(it5 pi1 ci it3 kt mii1 t mi1 it1 mii2)
 MergeJoin(it5 pi1 ci it3 kt mii1 t mi1 it1)
 MergeJoin(pi1 ci it3 kt mii1 t mi1 it1)
 MergeJoin(pi1 ci it3 kt mii1 t mi1)
 MergeJoin(ci it3 kt mii1 t mi1)
 MergeJoin(it3 kt mii1 t mi1)
 MergeJoin(it3 kt mii1 t)
 MergeJoin(kt mii1 t)
 MergeJoin(mii1 t)
 SeqScan(an)
 SeqScan(rt)
 SeqScan(it5)
 IndexScan(pi1)
 SeqScan(ci)
 SeqScan(it3)
 SeqScan(kt)
 IndexScan(mii1)
 SeqScan(t)
 SeqScan(mi1)
 IndexScan(it1)
 IndexScan(mii2)
 SeqScan(it4)
 IndexScan(n)
 Leading((an (((rt ((it5 ((pi1 (ci ((it3 (kt (mii1 t))) mi1))) it1)) mii2)) it4) n))) */
---------------------------------------
sql_str:  SELECT MIN(mi_idx.info) AS rating,
       MIN(t.title) AS northern_dark_movie
FROM info_type AS it1,
     info_type AS it2,
     keyword AS k,
     kind_type AS kt,
     movie_info AS mi,
     movie_info_idx AS mi_idx,
     movie_keyword AS mk,
     title AS t
WHERE it1.info = 'countries'
  AND it2.info = 'rating'
  AND k.keyword IN ('murder',
                    'murder-in-title',
                    'blood',
                    'violence')
  AND kt.kind = 'movie'
  AND mi.info IN ('Sweden',
                  'Norway',
                  'Germany',
                  'Denmark',
                  'Swedish',
                  'Denish',
                  'Norwegian',
                  'German',
                  'USA',
                  'American')
  AND mi_idx.info < '8.5'
  AND t.production_year > 2010
  AND kt.id = t.kind_id
  AND t.id = mi.movie_id
  AND t.id = mk.movie_id
  AND t.id = mi_idx.movie_id
  AND mk.movie_id = mi.movie_id
  AND mk.movie_id = mi_idx.movie_id
  AND mi.movie_id = mi_idx.movie_id
  AND k.id = mk.keyword_id
  AND it1.id = mi.info_type_id
  AND it2.id = mi_idx.info_type_id;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 3 1 1 3 1 1 3 4 4 4 4 3]
indexes_env_matrix for this sql:  [ 1  2 15  2  3 14  3  4  5  4  0  0  5  6 13  6  7  8  7  0  0  8  9 12
  9 10 11 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.9812923e-05
 1.4285715e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 4.6758972e-02 0.0000000e+00 0.0000000e+00
 9.6995151e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.5569755e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  128.6440620446787
Other difference exceed the threshold, need to switch module.
the difference value is:  128.6440620446787
Hash difference exceed the threshold, need to switch module.
the difference value is:  128.6440620446787
Nested loop difference exceed the threshold, need to switch module.
Planning took 151.1ms
q14a_job, predicted time: 7.4
q14a_job,(predicted 7.4),/*+ MergeJoin(it2 mi t it1 kt mi_idx mk k)
 MergeJoin(it2 mi t it1 kt mi_idx mk)
 MergeJoin(it2 mi t it1 kt mi_idx)
 MergeJoin(mi t it1 kt mi_idx)
 MergeJoin(mi t it1 kt)
 MergeJoin(mi t it1)
 MergeJoin(mi t)
 IndexScan(it2)
 IndexScan(mi)
 IndexScan(t)
 SeqScan(it1)
 SeqScan(kt)
 SeqScan(mi_idx)
 IndexScan(mk)
 IndexScan(k)
 Leading((((it2 ((((mi t) it1) kt) mi_idx)) mk) k)) */
---------------------------------------
sql_str:  SELECT MIN(mi_idx.info) AS rating,
       MIN(t.title) AS western_dark_production
FROM info_type AS it1,
     info_type AS it2,
     keyword AS k,
     kind_type AS kt,
     movie_info AS mi,
     movie_info_idx AS mi_idx,
     movie_keyword AS mk,
     title AS t
WHERE it1.info = 'countries'
  AND it2.info = 'rating'
  AND k.keyword IN ('murder',
                    'murder-in-title')
  AND kt.kind = 'movie'
  AND mi.info IN ('Sweden',
                  'Norway',
                  'Germany',
                  'Denmark',
                  'Swedish',
                  'Denish',
                  'Norwegian',
                  'German',
                  'USA',
                  'American')
  AND mi_idx.info > '6.0'
  AND t.production_year > 2010
  AND (t.title LIKE '%murder%'
       OR t.title LIKE '%Murder%'
       OR t.title LIKE '%Mord%')
  AND kt.id = t.kind_id
  AND t.id = mi.movie_id
  AND t.id = mk.movie_id
  AND t.id = mi_idx.movie_id
  AND mk.movie_id = mi.movie_id
  AND mk.movie_id = mi_idx.movie_id
  AND mi.movie_id = mi_idx.movie_id
  AND k.id = mk.keyword_id
  AND it1.id = mi.info_type_id
  AND it2.id = mi_idx.info_type_id;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 3 4 4 4 3 4 3 3]
indexes_env_matrix for this sql:  [ 1  2 15  2  3 14  3  4 13  4  5 12  5  6 11  6  7 10  7  8  9  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.4906462e-05
 1.4285715e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 4.6758972e-02 0.0000000e+00 0.0000000e+00
 2.7059025e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 4.3507287e-05 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  117.41027942926092
Other difference exceed the threshold, need to switch module.
the difference value is:  117.41027942926092
Hash difference exceed the threshold, need to switch module.
the difference value is:  117.41027942926092
Nested loop difference exceed the threshold, need to switch module.
Planning took 158.2ms
q14b_job, predicted time: 6.1
q14b_job,(predicted 6.1),/*+ MergeJoin(k it1 t mi mk mi_idx it2 kt)
 MergeJoin(k it1 t mi mk mi_idx it2)
 MergeJoin(k it1 t mi mk mi_idx)
 MergeJoin(it1 t mi mk mi_idx)
 MergeJoin(it1 t mi mk)
 MergeJoin(t mi mk)
 MergeJoin(mi mk)
 IndexScan(k)
 IndexScan(it1)
 IndexScan(t)
 IndexScan(mi)
 SeqScan(mk)
 SeqScan(mi_idx)
 IndexScan(it2)
 IndexScan(kt)
 Leading((((k ((it1 (t (mi mk))) mi_idx)) it2) kt)) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND mii2.movie_id = mii1.movie_id
AND mi1.movie_id = mii1.movie_id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('episode','movie'))
AND (t.production_year <= 1990)
AND (t.production_year >= 1950)
AND (mi1.info IN ('OFM:35 mm','PCS:Spherical','PFM:35 mm','PFM:Video','RAT:1.33 : 1','RAT:1.37 : 1'))
AND (it1.id IN ('15','7','98'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 11.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 7.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 1000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND an.person_id = pi1.person_id
AND rt.id = ci.role_id
AND (n.gender in ('m') OR n.gender IS NULL)
AND (n.name_pcode_nf in ('M2423','M6126','M6241','M6245','M6252','P3614','V2361','W4125','W4525'))
AND (ci.note in ('(executive producer)') OR ci.note IS NULL)
AND (rt.role in ('actor','producer'))
AND (it5.id in ('19'))
GROUP BY t.production_year, kt.kind
ORDER BY t.production_year, kt.kind;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 4 5 5 4 3 4 3]
indexes_env_matrix for this sql:  [ 1  2 27  2  3 26  3  4 25  4  5  6  5  0  0  6  7 24  7  8 23  8  9 22
  9 10 21 10 11 20 11 12 19 12 13 18 13 14 17 14 15 16 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.1726785e-01
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 0.0000000e+00
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.1657541e-02 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04
 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.3354581e-03 0.0000000e+00
 0.0000000e+00 2.8182682e-02 1.6666667e-01 2.1578270e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  212.40213307242175
Other difference exceed the threshold, need to switch module.
the difference value is:  212.40213307242175
Hash difference exceed the threshold, need to switch module.
the difference value is:  212.40213307242175
Nested loop difference exceed the threshold, need to switch module.
Planning took 282.2ms
q14c_baochanged, predicted time: 183.4
q14c_baochanged,(predicted 183.4),/*+ NestLoop(kt mii1 mi1 t mii2 it4 it3 it1 ci n pi1 it5 rt an)
 NestLoop(kt mii1 mi1 t mii2 it4 it3 it1 ci n pi1 it5 rt)
 NestLoop(kt mii1 mi1 t mii2 it4 it3 it1 ci n pi1 it5)
 NestLoop(kt mii1 mi1 t mii2 it4 it3 it1 ci n pi1)
 NestLoop(kt mii1 mi1 t mii2 it4 it3 it1 ci n)
 NestLoop(kt mii1 mi1 t mii2 it4 it3 it1 ci)
 NestLoop(kt mii1 mi1 t mii2 it4 it3 it1)
 HashJoin(kt mii1 mi1 t mii2 it4 it3)
 HashJoin(kt mii1 mi1 t mii2 it4)
 HashJoin(mii1 mi1 t mii2 it4)
 MergeJoin(mii1 mi1 t mii2)
 HashJoin(mi1 t mii2)
 HashJoin(t mii2)
 IndexScan(kt)
 IndexScan(mii1)
 SeqScan(mi1)
 IndexScan(t)
 IndexScan(mii2)
 IndexScan(it4)
 IndexScan(it3)
 IndexScan(it1)
 IndexScan(ci)
 IndexScan(n)
 IndexScan(pi1)
 SeqScan(it5)
 SeqScan(rt)
 IndexScan(an)
 Leading((((((((((kt ((mii1 (mi1 (t mii2))) it4)) it3) it1) ci) n) pi1) it5) rt) an)) */
---------------------------------------
sql_str:  SELECT MIN(mi.info) AS movie_budget, MIN(mi_idx.info) AS movie_votes, MIN(t.title) AS movie_title FROM cast_info AS ci, info_type AS it1, info_type AS it2, movie_info AS mi, movie_info_idx AS mi_idx, name AS n, title AS t WHERE ci.note  in ('(producer)', '(executive producer)') AND it1.info  = 'budget' AND it2.info  = 'votes' AND n.gender  = 'm' and n.name like '%Tim%' AND t.id = mi.movie_id AND t.id = mi_idx.movie_id AND t.id = ci.movie_id AND ci.movie_id = mi.movie_id AND ci.movie_id = mi_idx.movie_id AND mi.movie_id = mi_idx.movie_id AND n.id = ci.person_id AND it1.id = mi.info_type_id AND it2.id = mi_idx.info_type_id;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 0 1 0 3 3 4 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 13  2  3 12  3  4 11  4  5 10  5  6  9  6  7  8  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0]
query_enc_matrix for this sql:  [0.         0.         0.         0.         0.06764824 0.
 0.         0.         0.         0.         0.         0.
 0.         0.         0.00884956 0.00884956 0.         0.
 0.         0.         0.         0.         0.         0.
 0.         0.         0.         1.         0.         0.
 1.         0.         0.         0.         0.         0.
 0.         0.         0.00419797 0.         0.         0.
 0.         1.         0.         0.        ]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  123.4627377834751
Other difference exceed the threshold, need to switch module.
the difference value is:  123.4627377834751
Hash difference exceed the threshold, need to switch module.
the difference value is:  123.4627377834751
Nested loop difference exceed the threshold, need to switch module.
Planning took 384.1ms
q15a_bao, predicted time: 6.2
q15a_bao,(predicted 6.2),/*+ MergeJoin(it1 n ci t it2 mi mi_idx)
 MergeJoin(n ci t it2 mi mi_idx)
 MergeJoin(ci t it2 mi mi_idx)
 MergeJoin(t it2 mi mi_idx)
 MergeJoin(it2 mi mi_idx)
 MergeJoin(mi mi_idx)
 SeqScan(it1)
 IndexScan(n)
 IndexScan(ci)
 SeqScan(t)
 IndexScan(it2)
 IndexScan(mi)
 IndexScan(mi_idx)
 Leading((it1 (n (ci (t (it2 (mi mi_idx))))))) */
---------------------------------------
sql_str:  SELECT MIN(mi.info) AS release_date,
       MIN(t.title) AS internet_movie
FROM aka_title AS aka_t,
     company_name AS cn,
     company_type AS ct,
     info_type AS it1,
     keyword AS k,
     movie_companies AS mc,
     movie_info AS mi,
     movie_keyword AS mk,
     title AS t
WHERE cn.country_code = '[us]'
  AND it1.info = 'release dates'
  AND mc.note LIKE '%(200%)%'
  AND mc.note LIKE '%(worldwide)%'
  AND mi.note LIKE '%internet%'
  AND mi.info LIKE 'USA:% 200%'
  AND t.production_year > 2000
  AND t.id = aka_t.movie_id
  AND t.id = mi.movie_id
  AND t.id = mk.movie_id
  AND t.id = mc.movie_id
  AND mk.movie_id = mi.movie_id
  AND mk.movie_id = mc.movie_id
  AND mk.movie_id = aka_t.movie_id
  AND mi.movie_id = mc.movie_id
  AND mi.movie_id = aka_t.movie_id
  AND mc.movie_id = aka_t.movie_id
  AND k.id = mk.keyword_id
  AND it1.id = mi.info_type_id
  AND cn.id = mc.company_id
  AND ct.id = mc.company_type_id;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 3 3 5 4 4 5 4 4 5]
indexes_env_matrix for this sql:  [ 1  2 17  2  3 16  3  4 15  4  5 14  5  6 13  6  7 12  7  8 11  8  9 10
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 3.6416635e-01 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.6432625e-03
 0.0000000e+00 0.0000000e+00 3.1612890e-05 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.4074419e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  127.24357776462493
Other difference exceed the threshold, need to switch module.
the difference value is:  127.24357776462493
Hash difference exceed the threshold, need to switch module.
the difference value is:  127.24357776462493
Nested loop difference exceed the threshold, need to switch module.
Planning took 306.6ms
q15a_job, predicted time: 8.8
q15a_job,(predicted 8.8),/*+ MergeJoin(cn mi t it1 aka_t mc ct mk k)
 MergeJoin(cn mi t it1 aka_t mc ct mk)
 MergeJoin(cn mi t it1 aka_t mc ct)
 MergeJoin(cn mi t it1 aka_t mc)
 MergeJoin(mi t it1 aka_t mc)
 MergeJoin(mi t it1 aka_t)
 MergeJoin(mi t it1)
 MergeJoin(mi t)
 IndexScan(cn)
 IndexScan(mi)
 IndexScan(t)
 SeqScan(it1)
 SeqScan(aka_t)
 SeqScan(mc)
 SeqScan(ct)
 IndexScan(mk)
 IndexScan(k)
 Leading(((((cn ((((mi t) it1) aka_t) mc)) ct) mk) k)) */
---------------------------------------
sql_str:  SELECT MIN(mi.info) AS release_date,
       MIN(t.title) AS youtube_movie
FROM aka_title AS at,
     company_name AS cn,
     company_type AS ct,
     info_type AS it1,
     keyword AS k,
     movie_companies AS mc,
     movie_info AS mi,
     movie_keyword AS mk,
     title AS t
WHERE cn.country_code = '[us]'
  AND cn.name = 'YouTube'
  AND it1.info = 'release dates'
  AND mc.note LIKE '%(200%)%'
  AND mc.note LIKE '%(worldwide)%'
  AND mi.note LIKE '%internet%'
  AND mi.info LIKE 'USA:% 200%'
  AND t.production_year BETWEEN 2005 AND 2010
  AND t.id = at.movie_id
  AND t.id = mi.movie_id
  AND t.id = mk.movie_id
  AND t.id = mc.movie_id
  AND mk.movie_id = mi.movie_id
  AND mk.movie_id = mc.movie_id
  AND mk.movie_id = at.movie_id
  AND mi.movie_id = mc.movie_id
  AND mi.movie_id = at.movie_id
  AND mc.movie_id = at.movie_id
  AND k.id = mk.keyword_id
  AND it1.id = mi.info_type_id
  AND cn.id = mc.company_id
  AND ct.id = mc.company_type_id;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 1 3 4 5 5 4 4 4 4 5]
indexes_env_matrix for this sql:  [ 1  2 17  2  3 16  3  4 15  4  5 14  5  6 13  6  7 12  7  8 11  8  9 10
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 4.2553734e-06 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.6432625e-03
 0.0000000e+00 0.0000000e+00 3.1612890e-05 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.8122556e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  121.04030491465876
Other difference exceed the threshold, need to switch module.
the difference value is:  121.04030491465876
Hash difference exceed the threshold, need to switch module.
the difference value is:  121.04030491465876
Nested loop difference exceed the threshold, need to switch module.
Planning took 319.9ms
q15b_job, predicted time: 4.6
q15b_job,(predicted 4.6),/*+ MergeJoin(at k it1 ct t mc mi mk cn)
 MergeJoin(k it1 ct t mc mi mk cn)
 MergeJoin(it1 ct t mc mi mk cn)
 MergeJoin(ct t mc mi mk cn)
 MergeJoin(ct t mc mi mk)
 MergeJoin(t mc mi mk)
 MergeJoin(mc mi mk)
 MergeJoin(mi mk)
 SeqScan(at)
 IndexScan(k)
 SeqScan(it1)
 SeqScan(ct)
 IndexScan(t)
 SeqScan(mc)
 IndexScan(mi)
 SeqScan(mk)
 SeqScan(cn)
 Leading((at (k (it1 ((ct (t (mc (mi mk)))) cn))))) */
---------------------------------------
sql_str:  SELECT
    MIN(mi.info) AS movie_budget,
    MIN(mi_idx.info) AS movie_votes,
    MIN(t.title) AS movie_title
FROM
    cast_info AS ci,
    info_type AS it1,
    info_type AS it2,
    movie_info AS mi,
    movie_info_idx AS mi_idx,
    name AS n,
    title AS t
WHERE
    ci.note in ('(producer)')
    AND it1.info = 'budget'
    AND it2.info = 'votes'
    AND n.gender = 'm'
    and n.name like '%Tim%'
    AND t.id = mi.movie_id
    AND t.id = mi_idx.movie_id
    AND t.id = ci.movie_id
    AND ci.movie_id = mi.movie_id
    AND ci.movie_id = mi_idx.movie_id
    AND mi.movie_id = mi_idx.movie_id
    AND n.id = ci.person_id
    AND it1.id = mi.info_type_id
    AND it2.id = mi_idx.info_type_id
GROUP BY t.production_year, n.name
ORDER BY t.production_year, n.name;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 0 1 0 3 3 4 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 13  2  3 12  3  4 11  4  5 10  5  6  9  6  7  8  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0]
query_enc_matrix for this sql:  [0.         0.         0.         0.         0.03926996 0.
 0.         0.         0.         0.         0.         0.
 0.         0.         0.00884956 0.00884956 0.         0.
 0.         0.         0.         0.         0.         0.
 0.         0.         0.         1.         0.         0.
 1.         0.         0.         0.         0.         0.
 0.         0.         0.00419797 0.         0.         0.
 0.         1.         0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  226.105525119743
Other difference exceed the threshold, need to switch module.
the difference value is:  226.105525119743
Hash difference exceed the threshold, need to switch module.
the difference value is:  226.105525119743
Nested loop difference exceed the threshold, need to switch module.
Planning took 74.0ms
q15c_baochanged, predicted time: 1906.5
q15c_baochanged,(predicted 1906.5),/*+ MergeJoin(mi_idx mi it1 it2 t ci n)
 MergeJoin(mi_idx mi it1 it2 t ci)
 MergeJoin(mi_idx mi it1 it2 t)
 MergeJoin(mi_idx mi it1 it2)
 HashJoin(mi_idx mi it1)
 HashJoin(mi it1)
 SeqScan(mi_idx)
 IndexScan(mi)
 IndexScan(it1)
 SeqScan(it2)
 IndexScan(t)
 IndexScan(ci)
 IndexScan(n)
 Leading((((((mi_idx (mi it1)) it2) t) ci) n)) */
---------------------------------------
sql_str:  SELECT MIN(chn.name) AS character_name, MIN(mi_idx.info) AS rating, MIN(t.title) AS complete_hero_movie FROM complete_cast AS cc, comp_cast_type AS cct1, comp_cast_type AS cct2, char_name AS chn, cast_info AS ci, info_type AS it2, keyword AS k, kind_type AS kt, movie_info_idx AS mi_idx, movie_keyword AS mk, name AS n, title AS t WHERE cct1.kind  = 'cast' AND cct2.kind  like '%complete%' AND chn.name  is not NULL and (chn.name like '%man%' or chn.name like '%Man%') AND it2.info  = 'rating' AND k.keyword  in ('superhero', 'marvel-comics', 'based-on-comic', 'tv-special', 'fight', 'violence', 'magnet', 'web', 'claw', 'laser') AND kt.kind  = 'movie' AND t.production_year  > 2000 AND kt.id = t.kind_id AND t.id = mk.movie_id AND t.id = ci.movie_id AND t.id = cc.movie_id AND t.id = mi_idx.movie_id AND mk.movie_id = ci.movie_id AND mk.movie_id = cc.movie_id AND mk.movie_id = mi_idx.movie_id AND ci.movie_id = cc.movie_id AND ci.movie_id = mi_idx.movie_id AND cc.movie_id = mi_idx.movie_id AND chn.id = ci.person_role_id AND n.id = ci.person_id AND k.id = mk.keyword_id AND cct1.id = cc.subject_id AND cct2.id = cc.status_id AND it2.id = mi_idx.info_type_id;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 3 1 1 3 1 1 3 1 1 3 4 4 4 4 4 4 5 3]
indexes_env_matrix for this sql:  [ 1  2 23  2  3 22  3  4 21  4  5 20  5  6  7  6  0  0  7  8 19  8  9 10
  9  0  0 10 11 18 11 12 13 12  0  0 13 14 17 14 15 16 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 4.0098857e-02 2.5000000e-01 2.5000000e-01 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 7.4532312e-05
 1.4285715e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.4074419e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  107.7066378612161
Other difference exceed the threshold, need to switch module.
the difference value is:  107.7066378612161
Hash difference exceed the threshold, need to switch module.
the difference value is:  107.7066378612161
Nested loop difference exceed the threshold, need to switch module.
Planning took 977.3ms
q16a_bao, predicted time: 7.2
q16a_bao,(predicted 7.2),/*+ MergeJoin(cct1 n cct2 chn cc ci k it2 mi_idx t mk kt)
 MergeJoin(n cct2 chn cc ci k it2 mi_idx t mk kt)
 MergeJoin(cct2 chn cc ci k it2 mi_idx t mk kt)
 MergeJoin(chn cc ci k it2 mi_idx t mk kt)
 MergeJoin(cc ci k it2 mi_idx t mk kt)
 MergeJoin(ci k it2 mi_idx t mk kt)
 MergeJoin(k it2 mi_idx t mk kt)
 MergeJoin(it2 mi_idx t mk kt)
 MergeJoin(mi_idx t mk kt)
 MergeJoin(mi_idx t mk)
 MergeJoin(t mk)
 IndexScan(cct1)
 IndexScan(n)
 IndexScan(cct2)
 SeqScan(chn)
 SeqScan(cc)
 SeqScan(ci)
 SeqScan(k)
 IndexScan(it2)
 IndexScan(mi_idx)
 SeqScan(t)
 SeqScan(mk)
 IndexScan(kt)
 Leading((cct1 (n (cct2 (chn (cc (ci (k (it2 ((mi_idx (t mk)) kt)))))))))) */
---------------------------------------
sql_str:  SELECT MIN(an.name) AS cool_actor_pseudonym,
       MIN(t.title) AS series_named_after_char
FROM aka_name AS an,
     cast_info AS ci,
     company_name AS cn,
     keyword AS k,
     movie_companies AS mc,
     movie_keyword AS mk,
     name AS n,
     title AS t
WHERE cn.country_code ='[us]'
  AND k.keyword ='character-name-in-title'
  AND an.person_id = n.id
  AND n.id = ci.person_id
  AND ci.movie_id = t.id
  AND t.id = mk.movie_id
  AND mk.keyword_id = k.id
  AND t.id = mc.movie_id
  AND mc.company_id = cn.id
  AND an.person_id = ci.person_id
  AND ci.movie_id = mc.movie_id
  AND ci.movie_id = mk.movie_id
  AND mc.movie_id = mk.movie_id
GROUP BY t.id
ORDER BY series_named_after_char;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 3 4 4 4 4 4 5 4]
indexes_env_matrix for this sql:  [ 1  2 15  2  3 14  3  4 13  4  5 12  5  6 11  6  7 10  7  8  9  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 3.6416635e-01 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 7.4532309e-06
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  228.2627798669752
Other difference exceed the threshold, need to switch module.
the difference value is:  228.2627798669752
Hash difference exceed the threshold, need to switch module.
the difference value is:  228.2627798669752
Nested loop difference exceed the threshold, need to switch module.
Planning took 688.9ms
q16b_jobchanged, predicted time: 4932.4
q16b_jobchanged,(predicted 4932.4),/*+ NestLoop(mk k t ci an n mc cn)
 NestLoop(mk k t ci an n mc)
 MergeJoin(mk k t ci an n)
 NestLoop(an n)
 NestLoop(mk k t ci)
 NestLoop(mk k t)
 NestLoop(mk k)
 SeqScan(mk)
 IndexScan(k)
 IndexScan(t)
 IndexScan(ci)
 SeqScan(an)
 IndexScan(n)
 IndexScan(mc)
 IndexScan(cn)
 Leading(((((((mk k) t) ci) (an n)) mc) cn)) */
---------------------------------------
sql_str:  SELECT
    MIN(chn.name) AS character_name,
    MIN(mi_idx.info) AS rating,
    MIN(t.title) AS complete_hero_movie
FROM
    complete_cast AS cc,
    comp_cast_type AS cct1,
    comp_cast_type AS cct2,
    char_name AS chn,
    cast_info AS ci,
    info_type AS it2,
    keyword AS k,
    kind_type AS kt,
    movie_info_idx AS mi_idx,
    movie_keyword AS mk,
    name AS n,
    title AS t
WHERE
    cct1.kind = 'cast'
    AND cct2.kind like '%complete%'
    AND chn.name is not NULL
    and (
        chn.name like '%man%'
        or chn.name like '%Man%'
    )
    AND it2.info = 'rating'
    AND k.keyword in (
        'based-on-comic',
        'tv-special',
        'fight',
        'violence',
        'magnet',
        'web',
        'claw',
        'laser'
    )
    AND kt.kind = 'movie'
    AND t.production_year > 2000
    AND kt.id = t.kind_id
    AND t.id = mk.movie_id
    AND t.id = ci.movie_id
    AND t.id = cc.movie_id
    AND t.id = mi_idx.movie_id
    AND mk.movie_id = ci.movie_id
    AND mk.movie_id = cc.movie_id
    AND mk.movie_id = mi_idx.movie_id
    AND ci.movie_id = cc.movie_id
    AND ci.movie_id = mi_idx.movie_id
    AND cc.movie_id = mi_idx.movie_id
    AND chn.id = ci.person_role_id
    AND n.id = ci.person_id
    AND k.id = mk.keyword_id
    AND cct1.id = cc.subject_id
    AND cct2.id = cc.status_id
    AND it2.id = mi_idx.info_type_id
GROUP BY t.production_year, kt.kind
ORDER BY t.production_year, kt.kind;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 3 1 1 1 3 1 1 3 4 4 4 4 3 3 4 4 5]
indexes_env_matrix for this sql:  [ 1  2 23  2  3 22  3  4 21  4  5 20  5  6 19  6  7  8  7  0  0  8  9 18
  9 10 17 10 11 12 11  0  0 12 13 16 13 14 15 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 4.0098857e-02 2.5000000e-01 2.5000000e-01 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.9625847e-05
 1.4285715e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.4074419e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  209.70663814726151
Other difference exceed the threshold, need to switch module.
the difference value is:  209.70663814726151
Hash difference exceed the threshold, need to switch module.
the difference value is:  209.70663814726151
Nested loop difference exceed the threshold, need to switch module.
Planning took 976.4ms
q16c_baochanged, predicted time: 7.2
q16c_baochanged,(predicted 7.2),/*+ MergeJoin(cct1 n cct2 chn cc ci k it2 mi_idx t mk kt)
 MergeJoin(n cct2 chn cc ci k it2 mi_idx t mk kt)
 MergeJoin(cct2 chn cc ci k it2 mi_idx t mk kt)
 MergeJoin(chn cc ci k it2 mi_idx t mk kt)
 MergeJoin(cc ci k it2 mi_idx t mk kt)
 MergeJoin(ci k it2 mi_idx t mk kt)
 MergeJoin(k it2 mi_idx t mk kt)
 MergeJoin(it2 mi_idx t mk kt)
 MergeJoin(mi_idx t mk kt)
 MergeJoin(mi_idx t mk)
 MergeJoin(t mk)
 IndexScan(cct1)
 IndexScan(n)
 IndexScan(cct2)
 SeqScan(chn)
 SeqScan(cc)
 SeqScan(ci)
 SeqScan(k)
 IndexScan(it2)
 IndexScan(mi_idx)
 SeqScan(t)
 SeqScan(mk)
 IndexScan(kt)
 Leading((cct1 (n (cct2 (chn (cc (ci (k (it2 ((mi_idx (t mk)) kt)))))))))) */
---------------------------------------
sql_str:  SELECT MIN(an.name) AS cool_actor_pseudonym,
       MIN(t.title) AS series_named_after_char
FROM aka_name AS an,
     cast_info AS ci,
     company_name AS cn,
     keyword AS k,
     movie_companies AS mc,
     movie_keyword AS mk,
     name AS n,
     title AS t
WHERE cn.country_code ='[us]'
  AND k.keyword ='character-name-in-title'
  AND t.episode_nr < 100
  AND an.person_id = n.id
  AND n.id = ci.person_id
  AND ci.movie_id = t.id
  AND t.id = mk.movie_id
  AND mk.keyword_id = k.id
  AND t.id = mc.movie_id
  AND mc.company_id = cn.id
  AND an.person_id = ci.person_id
  AND ci.movie_id = mc.movie_id
  AND ci.movie_id = mk.movie_id
  AND mc.movie_id = mk.movie_id
GROUP BY t.id
ORDER BY series_named_after_char;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 3 4 4 4 4 4 5 4]
indexes_env_matrix for this sql:  [ 1  2 15  2  3 14  3  4 13  4  5 12  5  6 11  6  7 10  7  8  9  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 3.6416635e-01 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 7.4532309e-06
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 3.7090358e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  228.2627798669752
Other difference exceed the threshold, need to switch module.
the difference value is:  228.2627798669752
Hash difference exceed the threshold, need to switch module.
the difference value is:  228.2627798669752
Nested loop difference exceed the threshold, need to switch module.
Planning took 618.5ms
q16c_jobchanged, predicted time: 4678.6
q16c_jobchanged,(predicted 4678.6),/*+ NestLoop(ci t an n mc mk k cn)
 MergeJoin(ci t an n mc mk k)
 NestLoop(mk k)
 NestLoop(ci t an n mc)
 MergeJoin(ci t an n)
 NestLoop(an n)
 NestLoop(ci t)
 SeqScan(ci)
 IndexScan(t)
 SeqScan(an)
 IndexScan(n)
 IndexScan(mc)
 IndexScan(mk)
 IndexScan(k)
 IndexScan(cn)
 Leading((((((ci t) (an n)) mc) (mk k)) cn)) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
movie_keyword as mk,
keyword as k,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND t.id = mk.movie_id
AND mk.keyword_id = k.id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('tv movie','video movie'))
AND (t.production_year <= 2015)
AND (t.production_year >= 1925)
AND (mi1.info IN ('Italy','Japan','Nigeria','Spain','West Germany'))
AND (it1.id IN ('8'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 8.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 1000.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 10000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND rt.id = ci.role_id
AND (n.gender in ('f'))
AND (n.name_pcode_nf in ('C6235','E4213') OR n.name_pcode_nf IS NULL)
AND (ci.note IS NULL)
AND (rt.role in ('actress'))
AND (it5.id in ('25'))

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 4 3 5 4 3 4 5 3 4]
indexes_env_matrix for this sql:  [ 1  2 31  2  3 30  3  4 29  4  5  6  5  0  0  6  7 28  7  8 27  8  9 26
  9 10 25 10 11 24 11 12 23 12 13 22 13 14 21 14 15 20 15 16 19 16 17 18
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0 28  0  0 29  0  0 30  0  0 31  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.0610288e-01
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 1.0000000e+00
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 9.5526205e-04 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04
 0.0000000e+00 1.0000000e+00 0.0000000e+00 7.5621037e-03 0.0000000e+00
 0.0000000e+00 1.4424813e-01 8.3333336e-02 9.3211162e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  94.72681242769373
the difference value is:  94.72681242769373
the difference value is:  94.72681242769373
Planning took 1359.7ms
q17a_bao, predicted time: 5.5
q17a_bao,(predicted 5.5),/*+ MergeJoin(n it3 pi1 mii1 mi1 mk t ci kt it1 mii2 it5 an it4 rt k)
 MergeJoin(n it3 pi1 mii1 mi1 mk t ci kt it1 mii2 it5 an it4 rt)
 MergeJoin(n it3 pi1 mii1 mi1 mk t ci kt it1 mii2 it5 an it4)
 MergeJoin(n it3 pi1 mii1 mi1 mk t ci kt it1 mii2 it5 an)
 MergeJoin(n it3 pi1 mii1 mi1 mk t ci kt it1 mii2 it5)
 MergeJoin(it3 pi1 mii1 mi1 mk t ci kt it1 mii2 it5)
 MergeJoin(it3 pi1 mii1 mi1 mk t ci kt it1 mii2)
 MergeJoin(pi1 mii1 mi1 mk t ci kt it1 mii2)
 MergeJoin(pi1 mii1 mi1 mk t ci kt it1)
 MergeJoin(mii1 mi1 mk t ci kt it1)
 MergeJoin(mi1 mk t ci kt it1)
 MergeJoin(mi1 mk t ci kt)
 MergeJoin(mi1 mk t ci)
 MergeJoin(mi1 mk t)
 MergeJoin(mk t)
 IndexScan(n)
 SeqScan(it3)
 IndexScan(pi1)
 SeqScan(mii1)
 IndexScan(mi1)
 SeqScan(mk)
 SeqScan(t)
 SeqScan(ci)
 SeqScan(kt)
 SeqScan(it1)
 IndexScan(mii2)
 IndexScan(it5)
 IndexScan(an)
 IndexScan(it4)
 IndexScan(rt)
 SeqScan(k)
 Leading((((((n ((it3 ((pi1 (mii1 ((((mi1 (mk t)) ci) kt) it1))) mii2)) it5)) an) it4) rt) k)) */
---------------------------------------
sql_str:  SELECT MIN(n.name) AS member_in_charnamed_movie,
       MIN(n.name) AS a1
FROM cast_info AS ci,
     company_name AS cn,
     keyword AS k,
     movie_companies AS mc,
     movie_keyword AS mk,
     name AS n,
     title AS t
WHERE k.keyword ='character-name-in-title'
  AND n.name LIKE 'Z%'
  AND n.id = ci.person_id
  AND ci.movie_id = t.id
  AND t.id = mk.movie_id
  AND mk.keyword_id = k.id
  AND t.id = mc.movie_id
  AND mc.company_id = cn.id
  AND ci.movie_id = mc.movie_id
  AND ci.movie_id = mk.movie_id
  AND mc.movie_id = mk.movie_id
GROUP BY n.id
ORDER BY member_in_charnamed_movie;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 3 4 4 4 5 4 5]
indexes_env_matrix for this sql:  [ 1  2 13  2  3 12  3  4 11  4  5 10  5  6  9  6  7  8  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 7.4532309e-06
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 1.0101042e-02 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  228.11849912927568
Other difference exceed the threshold, need to switch module.
the difference value is:  228.11849912927568
Hash difference exceed the threshold, need to switch module.
the difference value is:  228.11849912927568
Nested loop difference exceed the threshold, need to switch module.
Planning took 499.1ms
q17b_jobchanged, predicted time: 4250.7
q17b_jobchanged,(predicted 4250.7),/*+ NestLoop(mk k mc ci t n cn)
 MergeJoin(mk k mc ci t n)
 NestLoop(ci t n)
 NestLoop(ci t)
 NestLoop(mk k mc)
 NestLoop(mk k)
 IndexScan(mk)
 IndexScan(k)
 IndexScan(mc)
 SeqScan(ci)
 IndexScan(t)
 IndexScan(n)
 IndexScan(cn)
 Leading(((((mk k) mc) ((ci t) n)) cn)) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
movie_keyword as mk,
keyword as k,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND t.id = mk.movie_id
AND mk.keyword_id = k.id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('tv movie','video movie'))
AND (t.production_year <= 2015)
AND (t.production_year >= 1925)
AND (mi1.info IN ('Italy','Japan','China','West Germany'))
AND (it1.id IN ('8'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 8.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 1000.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 10000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND rt.id = ci.role_id
AND (n.gender in ('f'))
AND (n.name_pcode_nf in ('C6235','E4213') OR n.name_pcode_nf IS NULL)
AND (ci.note IS NULL)
AND (rt.role in ('actress'))
AND (it5.id in ('25'))
GROUP BY t.production_year, kt.kind
ORDER BY t.production_year, kt.kind;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 4 3 5 4 3 4 5 3 4]
indexes_env_matrix for this sql:  [ 1  2 31  2  3 30  3  4 29  4  5  6  5  0  0  6  7 28  7  8 27  8  9 26
  9 10 25 10 11 24 11 12 23 12 13 22 13 14 21 14 15 20 15 16 19 16 17 18
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0 28  0  0 29  0  0 30  0  0 31  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.0610288e-01
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 1.0000000e+00
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.2760687e-04 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04
 0.0000000e+00 1.0000000e+00 0.0000000e+00 7.5621037e-03 0.0000000e+00
 0.0000000e+00 1.4424813e-01 8.3333336e-02 9.3211162e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  194.72682003319056
Other difference exceed the threshold, need to switch module.
the difference value is:  194.72682003319056
Hash difference exceed the threshold, need to switch module.
the difference value is:  194.72682003319056
Nested loop difference exceed the threshold, need to switch module.
Planning took 1391.0ms
q17c_baochanged, predicted time: 5.5
q17c_baochanged,(predicted 5.5),/*+ MergeJoin(n it3 pi1 mii1 mi1 mk t ci kt it1 mii2 it5 an it4 rt k)
 MergeJoin(n it3 pi1 mii1 mi1 mk t ci kt it1 mii2 it5 an it4 rt)
 MergeJoin(n it3 pi1 mii1 mi1 mk t ci kt it1 mii2 it5 an it4)
 MergeJoin(n it3 pi1 mii1 mi1 mk t ci kt it1 mii2 it5 an)
 MergeJoin(n it3 pi1 mii1 mi1 mk t ci kt it1 mii2 it5)
 MergeJoin(it3 pi1 mii1 mi1 mk t ci kt it1 mii2 it5)
 MergeJoin(it3 pi1 mii1 mi1 mk t ci kt it1 mii2)
 MergeJoin(pi1 mii1 mi1 mk t ci kt it1 mii2)
 MergeJoin(pi1 mii1 mi1 mk t ci kt it1)
 MergeJoin(mii1 mi1 mk t ci kt it1)
 MergeJoin(mi1 mk t ci kt it1)
 MergeJoin(mi1 mk t ci kt)
 MergeJoin(mi1 mk t ci)
 MergeJoin(mi1 mk t)
 MergeJoin(mk t)
 IndexScan(n)
 SeqScan(it3)
 IndexScan(pi1)
 SeqScan(mii1)
 IndexScan(mi1)
 SeqScan(mk)
 SeqScan(t)
 SeqScan(ci)
 SeqScan(kt)
 SeqScan(it1)
 IndexScan(mii2)
 IndexScan(it5)
 IndexScan(an)
 IndexScan(it4)
 IndexScan(rt)
 SeqScan(k)
 Leading((((((n ((it3 ((pi1 (mii1 ((((mi1 (mk t)) ci) kt) it1))) mii2)) it5)) an) it4) rt) k)) */
---------------------------------------
sql_str:  SELECT MIN(n.name) AS member_in_charnamed_movie,
       MIN(n.name) AS a1
FROM cast_info AS ci,
     company_name AS cn,
     keyword AS k,
     movie_companies AS mc,
     movie_keyword AS mk,
     name AS n,
     title AS t
WHERE k.keyword ='character-name-in-title'
  AND n.name LIKE 'X%'
  AND n.id = ci.person_id
  AND ci.movie_id = t.id
  AND t.id = mk.movie_id
  AND mk.keyword_id = k.id
  AND t.id = mc.movie_id
  AND mc.company_id = cn.id
  AND ci.movie_id = mc.movie_id
  AND ci.movie_id = mk.movie_id
  AND mc.movie_id = mk.movie_id
GROUP BY n.id
ORDER BY member_in_charnamed_movie;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 3 4 4 4 4 5 5]
indexes_env_matrix for this sql:  [ 1  2 13  2  3 12  3  4 11  4  5 10  5  6  9  6  7  8  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0]
query_enc_matrix for this sql:  [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 7.45323086e-06
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.00000000e+00 0.00000000e+00 1.00060206e-04 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 1.00000000e+00
 0.00000000e+00 0.00000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  228.11958050994184
Other difference exceed the threshold, need to switch module.
the difference value is:  228.11958050994184
Hash difference exceed the threshold, need to switch module.
the difference value is:  228.11958050994184
Nested loop difference exceed the threshold, need to switch module.
Planning took 501.2ms
q17c_jobchanged, predicted time: 4243.8
q17c_jobchanged,(predicted 4243.8),/*+ NestLoop(mk k mc ci t n cn)
 MergeJoin(mk k mc ci t n)
 NestLoop(ci t n)
 NestLoop(ci t)
 NestLoop(mk k mc)
 NestLoop(mk k)
 IndexScan(mk)
 IndexScan(k)
 IndexScan(mc)
 SeqScan(ci)
 IndexScan(t)
 IndexScan(n)
 IndexScan(cn)
 Leading(((((mk k) mc) ((ci t) n)) cn)) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
movie_keyword as mk,
keyword as k,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND t.id = mk.movie_id
AND mk.keyword_id = k.id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('episode','movie'))
AND (t.production_year <= 2015)
AND (t.production_year >= 1925)
AND (mi1.info IN ('Buenos Aires, Federal District, Argentina','Los Angeles, California, USA','Mexico','New York City, New York, USA','Paramount Studios - 5555 Melrose Avenue, Hollywood, Los Angeles, California, USA'))
AND (it1.id IN ('18'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 7.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 3.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 10000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND rt.id = ci.role_id
AND (n.gender in ('m') OR n.gender IS NULL)
AND (n.name_pcode_nf in ('D2313','E3261','G625','J5141','K1524','L2125','M2563','M265','M3215','P3625','S5326','S6256','T5252'))
AND (ci.note in ('(writer)') OR ci.note IS NULL)
AND (rt.role in ('actor','director','writer'))
AND (it5.id in ('31'))

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 4 4 3 5 3 4 3 3 4 5]
indexes_env_matrix for this sql:  [ 1  2 31  2  3 30  3  4 29  4  5 28  5  6 27  6  7 26  7  8 25  8  9 24
  9 10 23 10 11 22 11 12 21 12 13 20 13 14 19 14 15 18 15 16 17 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0 28  0  0 29  0  0 30  0  0 31  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.1365104e-01
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 1.0000000e+00
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.2681744e-04 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04
 0.0000000e+00 1.0000000e+00 0.0000000e+00 2.2687512e-03 0.0000000e+00
 0.0000000e+00 2.2678010e-03 2.5000000e-01 9.3211162e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  93.73855746196244
the difference value is:  93.73855746196244
the difference value is:  93.73855746196244
Planning took 2381.7ms
q18a_bao, predicted time: 6.9
q18a_bao,(predicted 6.9),/*+ MergeJoin(mii1 it1 mi1 pi1 ci it4 t mk mii2 n it5 rt k kt it3 an)
 MergeJoin(mii1 it1 mi1 pi1 ci it4 t mk mii2 n it5 rt k kt it3)
 MergeJoin(mii1 it1 mi1 pi1 ci it4 t mk mii2 n it5 rt k kt)
 MergeJoin(mii1 it1 mi1 pi1 ci it4 t mk mii2 n it5 rt k)
 MergeJoin(it1 mi1 pi1 ci it4 t mk mii2 n it5 rt k)
 MergeJoin(it1 mi1 pi1 ci it4 t mk mii2 n it5 rt)
 MergeJoin(mi1 pi1 ci it4 t mk mii2 n it5 rt)
 MergeJoin(mi1 pi1 ci it4 t mk mii2 n it5)
 MergeJoin(pi1 ci it4 t mk mii2 n it5)
 MergeJoin(pi1 ci it4 t mk mii2 n)
 MergeJoin(ci it4 t mk mii2 n)
 MergeJoin(ci it4 t mk mii2)
 MergeJoin(it4 t mk mii2)
 MergeJoin(t mk mii2)
 MergeJoin(t mk)
 SeqScan(mii1)
 IndexScan(it1)
 IndexScan(mi1)
 IndexScan(pi1)
 IndexScan(ci)
 IndexScan(it4)
 SeqScan(t)
 SeqScan(mk)
 IndexScan(mii2)
 IndexScan(n)
 IndexScan(it5)
 SeqScan(rt)
 IndexScan(k)
 IndexScan(kt)
 SeqScan(it3)
 IndexScan(an)
 Leading(((((mii1 ((it1 ((mi1 ((pi1 ((ci (it4 ((t mk) mii2))) n)) it5)) rt)) k)) kt) it3) an)) */
---------------------------------------
sql_str:  SELECT MIN(mi.info) AS movie_budget,
       MIN(mi_idx.info) AS movie_votes,
       MIN(t.title) AS movie_title
FROM cast_info AS ci,
     info_type AS it1,
     info_type AS it2,
     movie_info AS mi,
     movie_info_idx AS mi_idx,
     name AS n,
     title AS t
WHERE ci.note IN ('(writer)',
                  '(head writer)',
                  '(written by)',
                  '(story)',
                  '(story editor)')
  AND it1.info = 'genres'
  AND it2.info = 'rating'
  AND mi.info IN ('Horror',
                  'Thriller')
  AND mi.note IS NULL
  AND mi_idx.info > '8.0'
  AND n.gender IS NOT NULL
  AND n.gender = 'f'
  AND t.production_year BETWEEN 2008 AND 2014
  AND t.id = mi.movie_id
  AND t.id = mi_idx.movie_id
  AND t.id = ci.movie_id
  AND ci.movie_id = mi.movie_id
  AND ci.movie_id = mi_idx.movie_id
  AND mi.movie_id = mi_idx.movie_id
  AND n.id = ci.person_id
  AND it1.id = mi.info_type_id
  AND it2.id = mi_idx.info_type_id
GROUP BY t.id
ORDER BY movie_title;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 0 3 3 4 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 13  2  3 12  3  4 11  4  5 10  5  6  9  6  7  8  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0]
query_enc_matrix for this sql:  [0.         0.         0.         0.         0.03297477 0.
 0.         0.         0.         0.         0.         0.
 0.         0.         0.00884956 0.00884956 0.         0.
 0.         0.         0.         0.         0.         0.
 0.         0.         0.         0.00476943 0.         0.
 0.03897872 0.         0.         0.         0.         0.
 0.         0.         0.15356937 0.         0.         0.
 0.         0.31083626 0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  222.43829039275505
Other difference exceed the threshold, need to switch module.
the difference value is:  222.43829039275505
Hash difference exceed the threshold, need to switch module.
the difference value is:  222.43829039275505
Nested loop difference exceed the threshold, need to switch module.
Planning took 369.0ms
q18b_jobchanged, predicted time: 4.8
q18b_jobchanged,(predicted 4.8),/*+ MergeJoin(it2 mi_idx mi t it1 ci n)
 MergeJoin(it2 mi_idx mi t it1 ci)
 MergeJoin(it2 mi_idx mi t it1)
 MergeJoin(mi_idx mi t it1)
 MergeJoin(mi t it1)
 MergeJoin(mi t)
 IndexScan(it2)
 SeqScan(mi_idx)
 IndexScan(mi)
 SeqScan(t)
 SeqScan(it1)
 IndexScan(ci)
 IndexScan(n)
 Leading((((it2 (mi_idx ((mi t) it1))) ci) n)) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
movie_keyword as mk,
keyword as k,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND t.id = mk.movie_id
AND mk.keyword_id = k.id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('movie'))
AND (t.production_year <= 2015)
AND (t.production_year >= 1925)
AND (mi1.info IN ('Buenos Aires, Federal District, Argentina','Los Angeles, California, USA','Mexico','New York City, New York, USA','Paramount Studios - 5555 Melrose Avenue, Hollywood, Los Angeles, California, USA'))
AND (it1.id IN ('18'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 7.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 3.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 10000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND rt.id = ci.role_id
AND (n.gender in ('m') OR n.gender IS NULL)
AND (n.name_pcode_nf in ('D2313','E3261','G625','J5141','K1524','L2125','M2563','M265','M3215','P3625','S5326','S6256','T5252'))
AND (ci.note in ('(writer)') OR ci.note IS NULL)
AND (rt.role in ('actor','director','writer'))
AND (it5.id in ('31'))
GROUP BY t.production_year, kt.kind
ORDER BY t.production_year, kt.kind;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 4 3 5 4 3 4 5 3 4]
indexes_env_matrix for this sql:  [ 1  2 31  2  3 30  3  4 29  4  5  6  5  0  0  6  7 28  7  8 27  8  9 26
  9 10 25 10 11 24 11 12 23 12 13 22 13 14 21 14 15 20 15 16 19 16 17 18
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0 28  0  0 29  0  0 30  0  0 31  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.1365104e-01
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 1.0000000e+00
 1.4285715e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.2681744e-04 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04
 0.0000000e+00 1.0000000e+00 0.0000000e+00 2.2687512e-03 0.0000000e+00
 0.0000000e+00 2.2678010e-03 2.5000000e-01 9.3211162e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  194.66017464053672
Other difference exceed the threshold, need to switch module.
the difference value is:  194.66017464053672
Hash difference exceed the threshold, need to switch module.
the difference value is:  194.66017464053672
Nested loop difference exceed the threshold, need to switch module.
Planning took 1303.1ms
q18c_baochanged, predicted time: 5.8
q18c_baochanged,(predicted 5.8),/*+ MergeJoin(n it3 pi1 mii1 mi1 mk t ci kt it1 mii2 k it5 rt it4 an)
 MergeJoin(n it3 pi1 mii1 mi1 mk t ci kt it1 mii2 k it5 rt it4)
 MergeJoin(n it3 pi1 mii1 mi1 mk t ci kt it1 mii2 k it5 rt)
 MergeJoin(n it3 pi1 mii1 mi1 mk t ci kt it1 mii2 k it5)
 MergeJoin(n it3 pi1 mii1 mi1 mk t ci kt it1 mii2 k)
 MergeJoin(it3 pi1 mii1 mi1 mk t ci kt it1 mii2 k)
 MergeJoin(it3 pi1 mii1 mi1 mk t ci kt it1 mii2)
 MergeJoin(pi1 mii1 mi1 mk t ci kt it1 mii2)
 MergeJoin(pi1 mii1 mi1 mk t ci kt it1)
 MergeJoin(mii1 mi1 mk t ci kt it1)
 MergeJoin(mi1 mk t ci kt it1)
 MergeJoin(mi1 mk t ci kt)
 MergeJoin(mi1 mk t ci)
 MergeJoin(mi1 mk t)
 MergeJoin(mk t)
 IndexScan(n)
 SeqScan(it3)
 IndexScan(pi1)
 SeqScan(mii1)
 IndexScan(mi1)
 SeqScan(mk)
 SeqScan(t)
 SeqScan(ci)
 SeqScan(kt)
 SeqScan(it1)
 IndexScan(mii2)
 SeqScan(k)
 IndexScan(it5)
 IndexScan(rt)
 IndexScan(it4)
 IndexScan(an)
 Leading((((((n ((it3 ((pi1 (mii1 ((((mi1 (mk t)) ci) kt) it1))) mii2)) k)) it5) rt) it4) an)) */
---------------------------------------
sql_str:  SELECT MIN(mi.info) AS movie_budget,
       MIN(mi_idx.info) AS movie_votes,
       MIN(t.title) AS movie_title
FROM cast_info AS ci,
     info_type AS it1,
     info_type AS it2,
     movie_info AS mi,
     movie_info_idx AS mi_idx,
     name AS n,
     title AS t
WHERE ci.note IN ('(writer)',
                  '(head writer)',
                  '(written by)',
                  '(story)',
                  '(story editor)')
  AND it1.info = 'genres'
  AND it2.info = 'votes'
  AND mi.info IN ('Horror',
                  'Action',
                  'Sci-Fi',
                  'Thriller',
                  'Crime',
                  'War')
  AND n.gender = 'm'
  AND t.id = mi.movie_id
  AND t.id = mi_idx.movie_id
  AND t.id = ci.movie_id
  AND ci.movie_id = mi.movie_id
  AND ci.movie_id = mi_idx.movie_id
  AND mi.movie_id = mi_idx.movie_id
  AND n.id = ci.person_id
  AND it1.id = mi.info_type_id
  AND it2.id = mi_idx.info_type_id
GROUP BY t.id
ORDER BY movie_title;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 0 1 0 3 3 4 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 13  2  3 12  3  4 11  4  5 10  5  6  9  6  7  8  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0]
query_enc_matrix for this sql:  [0.         0.         0.         0.         0.03297477 0.
 0.         0.         0.         0.         0.         0.
 0.         0.         0.00884956 0.00884956 0.         0.
 0.         0.         0.         0.         0.         0.
 0.         0.         0.         0.01406167 0.         0.
 1.         0.         0.         0.         0.         0.
 0.         0.         0.41559657 0.         0.         0.
 0.         1.         0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  225.4444493610825
Other difference exceed the threshold, need to switch module.
the difference value is:  225.4444493610825
Hash difference exceed the threshold, need to switch module.
the difference value is:  225.4444493610825
Nested loop difference exceed the threshold, need to switch module.
Planning took 68.2ms
q18c_jobchanged, predicted time: 7.8
q18c_jobchanged,(predicted 7.8),/*+ MergeJoin(it2 ci n t mi it1 mi_idx)
 MergeJoin(ci n t mi it1 mi_idx)
 MergeJoin(ci n t mi it1)
 MergeJoin(ci n t mi)
 MergeJoin(ci n t)
 MergeJoin(ci n)
 IndexScan(it2)
 IndexScan(ci)
 SeqScan(n)
 IndexScan(t)
 SeqScan(mi)
 SeqScan(it1)
 SeqScan(mi_idx)
 Leading((it2 (((((ci n) t) mi) it1) mi_idx))) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('7'))
AND (it2.id in ('8'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('CAM:Panavision Cameras and Lenses','OFM:16 mm','OFM:35 mm','OFM:Video','PCS:Spherical','PFM:35 mm','RAT:1.33 : 1','RAT:1.37 : 1','RAT:1.66 : 1','RAT:1.78 : 1','RAT:2.35 : 1','RAT:4:3'))
AND (mi2.info in ('East Germany','Hong Kong','Italy','Taiwan','UK','USA','West Germany'))
AND (kt.kind in ('episode','movie'))
AND (rt.role in ('production designer'))
AND (n.gender in ('f'))
AND (t.production_year <= 2010)
AND (t.production_year >= 1950)
AND (k.keyword IN ('death','father-son-relationship','fight','gay','independent-film','lesbian-sex','mother-daughter-relationship','murder','number-in-title'))

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 1 1 4 4 4 3 4 4 3 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.7079076e-05
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.2499158e-03 4.3328535e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 2.3576464e-01 0.0000000e+00
 0.0000000e+00 0.0000000e+00 8.3333336e-02 7.5073051e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  110.61843246414377
Other difference exceed the threshold, need to switch module.
the difference value is:  110.61843246414377
Hash difference exceed the threshold, need to switch module.
the difference value is:  110.61843246414377
Nested loop difference exceed the threshold, need to switch module.
Planning took 355.7ms
q19a_bao, predicted time: 11.6
q19a_bao,(predicted 11.6),/*+ MergeJoin(rt ci mi2 t kt mk it2 mi1 it1 n k)
 MergeJoin(rt ci mi2 t kt mk it2 mi1 it1 n)
 MergeJoin(rt ci mi2 t kt mk it2 mi1 it1)
 MergeJoin(ci mi2 t kt mk it2 mi1 it1)
 MergeJoin(mi2 t kt mk it2 mi1 it1)
 MergeJoin(mi2 t kt mk it2 mi1)
 MergeJoin(mi2 t kt mk it2)
 MergeJoin(mi2 t kt mk)
 MergeJoin(mi2 t kt)
 MergeJoin(mi2 t)
 IndexScan(rt)
 SeqScan(ci)
 IndexScan(mi2)
 SeqScan(t)
 IndexScan(kt)
 SeqScan(mk)
 IndexScan(it2)
 IndexScan(mi1)
 SeqScan(it1)
 IndexScan(n)
 IndexScan(k)
 Leading((((rt (ci ((((((mi2 t) kt) mk) it2) mi1) it1))) n) k)) */
---------------------------------------
sql_str:  SELECT MIN(n.name) AS voicing_actress,
       MIN(t.title) AS kung_fu_panda
FROM aka_name AS an,
     char_name AS chn,
     cast_info AS ci,
     company_name AS cn,
     info_type AS it,
     movie_companies AS mc,
     movie_info AS mi,
     name AS n,
     role_type AS rt,
     title AS t
WHERE ci.note = '(voice)'
  AND cn.country_code ='[us]'
  AND it.info = 'release dates'
  AND mc.note LIKE '%(200%)%'
  AND (mc.note LIKE '%(USA)%'
       OR mc.note LIKE '%(worldwide)%')
  AND mi.info IS NOT NULL
  AND (mi.info LIKE 'Japan:%2007%'
       OR mi.info LIKE 'USA:%2008%')
  AND n.gender ='f'
  AND n.name LIKE '%Angel%'
  AND rt.role ='actress'
  AND t.production_year BETWEEN 2007 AND 2008
  AND t.title LIKE '%Kung%Fu%Panda%'
  AND t.id = mi.movie_id
  AND t.id = mc.movie_id
  AND t.id = ci.movie_id
  AND mc.movie_id = ci.movie_id
  AND mc.movie_id = mi.movie_id
  AND mi.movie_id = ci.movie_id
  AND cn.id = mc.company_id
  AND it.id = mi.info_type_id
  AND n.id = ci.person_id
  AND rt.id = ci.role_id
  AND n.id = an.person_id
  AND ci.person_id = an.person_id
  AND chn.id = ci.person_role_id
GROUP BY t.id
ORDER BY kung_fu_panda;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 1 1 3 4 4 5 5 4 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 19  2  3 18  3  4 17  4  5 16  5  6 15  6  7 14  7  8 13  8  9 12
  9 10 11 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.9052075e-02
 1.0000000e+00 0.0000000e+00 0.0000000e+00 3.6416635e-01 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 3.7327018e-02
 0.0000000e+00 0.0000000e+00 1.5559407e-02 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.3515347e-05 0.0000000e+00
 0.0000000e+00 0.0000000e+00 8.3333336e-02 8.7014578e-06 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  223.30637893266032
Other difference exceed the threshold, need to switch module.
the difference value is:  223.30637893266032
Hash difference exceed the threshold, need to switch module.
the difference value is:  223.30637893266032
Nested loop difference exceed the threshold, need to switch module.
Planning took 139.7ms
q19b_jobchanged, predicted time: 4.8
q19b_jobchanged,(predicted 4.8),/*+ MergeJoin(ci n rt t mi it an mc cn chn)
 MergeJoin(ci n rt t mi it an mc cn)
 MergeJoin(ci n rt t mi it an mc)
 MergeJoin(ci n rt t mi it an)
 MergeJoin(ci n rt t mi it)
 MergeJoin(ci n rt t mi)
 MergeJoin(ci n rt t)
 MergeJoin(ci n rt)
 MergeJoin(ci n)
 IndexScan(ci)
 SeqScan(n)
 SeqScan(rt)
 SeqScan(t)
 SeqScan(mi)
 IndexScan(it)
 IndexScan(an)
 SeqScan(mc)
 SeqScan(cn)
 SeqScan(chn)
 Leading((((((((((ci n) rt) t) mi) it) an) mc) cn) chn)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('7'))
AND (it2.id in ('8'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('CAM:Panavision Cameras and Lenses','OFM:16 mm','OFM:35 mm','OFM:Video','PCS:Spherical','PFM:35 mm','RAT:1.33 : 1','RAT:1.37 : 1','RAT:1.66 : 1','RAT:1.78 : 1','RAT:2.35 : 1','RAT:4:3'))
AND (mi2.info in ('East Germany','Hong Kong','Italy','Taiwan','UK','USA','West Germany'))
AND (kt.kind in ('episode','movie'))
AND (rt.role in ('production designer'))
AND (n.gender in ('f'))
AND (t.production_year <= 2010)
AND (t.production_year >= 1990)
AND (k.keyword IN ('death','father-son-relationship','fight','gay','independent-film','lesbian-sex','mother-daughter-relationship','murder','number-in-title'))
GROUP BY n.name, t.production_year
ORDER BY n.name, t.production_year;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 1 1 4 4 4 3 4 4 3 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.7079076e-05
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.2499158e-03 4.3328535e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 2.3576464e-01 0.0000000e+00
 0.0000000e+00 0.0000000e+00 8.3333336e-02 5.4457915e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  210.61843246414375
Other difference exceed the threshold, need to switch module.
the difference value is:  210.61843246414375
Hash difference exceed the threshold, need to switch module.
the difference value is:  210.61843246414375
Nested loop difference exceed the threshold, need to switch module.
Planning took 388.2ms
q19c_baochanged, predicted time: 12.5
q19c_baochanged,(predicted 12.5),/*+ MergeJoin(ci mi2 t kt mk mi1 it1 n k rt it2)
 MergeJoin(ci mi2 t kt mk mi1 it1 n k rt)
 MergeJoin(ci mi2 t kt mk mi1 it1 n k)
 MergeJoin(ci mi2 t kt mk mi1 it1 n)
 MergeJoin(ci mi2 t kt mk mi1 it1)
 MergeJoin(mi2 t kt mk mi1 it1)
 MergeJoin(mi2 t kt mk mi1)
 MergeJoin(mi2 t kt mk)
 MergeJoin(mi2 t kt)
 MergeJoin(mi2 t)
 SeqScan(ci)
 IndexScan(mi2)
 SeqScan(t)
 IndexScan(kt)
 SeqScan(mk)
 IndexScan(mi1)
 SeqScan(it1)
 IndexScan(n)
 IndexScan(k)
 SeqScan(rt)
 IndexScan(it2)
 Leading((((((ci (((((mi2 t) kt) mk) mi1) it1)) n) k) rt) it2)) */
---------------------------------------
sql_str:  SELECT MIN(n.name) AS voicing_actress,
       MIN(t.title) AS jap_engl_voiced_movie
FROM aka_name AS an,
     char_name AS chn,
     cast_info AS ci,
     company_name AS cn,
     info_type AS it,
     movie_companies AS mc,
     movie_info AS mi,
     name AS n,
     role_type AS rt,
     title AS t
WHERE ci.note IN ('(voice)',
                  '(voice: Japanese version)',
                  '(voice) (uncredited)',
                  '(voice: English version)')
  AND cn.country_code ='[us]'
  AND it.info = 'release dates'
  AND mi.info IS NOT NULL
  AND (mi.info LIKE 'Japan:%200%'
       OR mi.info LIKE 'USA:%200%')
  AND n.gender ='f'
  AND n.name LIKE '%An%'
  AND rt.role ='actress'
  AND t.production_year > 2000
  AND t.id = mi.movie_id
  AND t.id = mc.movie_id
  AND t.id = ci.movie_id
  AND mc.movie_id = ci.movie_id
  AND mc.movie_id = mi.movie_id
  AND mi.movie_id = ci.movie_id
  AND cn.id = mc.company_id
  AND it.id = mi.info_type_id
  AND n.id = ci.person_id
  AND rt.id = ci.role_id
  AND n.id = an.person_id
  AND ci.person_id = an.person_id
  AND chn.id = ci.person_role_id
GROUP BY t.id
ORDER BY jap_engl_voiced_movie;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 0 1 1 0 3 1 3 4 4 4 3 4 4 5 5]
indexes_env_matrix for this sql:  [ 1  2 19  2  3 18  3  4 17  4  5 16  5  6 15  6  7 14  7  8 13  8  9 10
  9  0  0 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0]
query_enc_matrix for this sql:  [1.         0.         0.         0.         0.0233155  1.
 0.         0.         0.36416635 0.         0.         0.
 0.         0.00884956 0.         0.         0.         0.
 0.         0.         0.         0.         0.         0.
 1.         0.         0.         0.03088472 0.         0.
 0.         0.         0.         0.         0.         0.
 0.         0.         0.00714435 0.         0.         0.
 0.08333334 0.5407442  0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  222.60461057083504
Other difference exceed the threshold, need to switch module.
the difference value is:  222.60461057083504
Hash difference exceed the threshold, need to switch module.
the difference value is:  222.60461057083504
Nested loop difference exceed the threshold, need to switch module.
Planning took 135.5ms
q19c_jobchanged, predicted time: 9.6
q19c_jobchanged,(predicted 9.6),/*+ MergeJoin(cn mc ci n t rt mi it an chn)
 MergeJoin(cn mc ci n t rt mi it an)
 MergeJoin(cn mc ci n t rt mi it)
 MergeJoin(mc ci n t rt mi it)
 MergeJoin(ci n t rt mi it)
 MergeJoin(ci n t rt mi)
 MergeJoin(ci n t rt)
 MergeJoin(ci n t)
 MergeJoin(ci n)
 SeqScan(cn)
 SeqScan(mc)
 IndexScan(ci)
 SeqScan(n)
 IndexScan(t)
 SeqScan(rt)
 SeqScan(mi)
 SeqScan(it)
 SeqScan(an)
 IndexScan(chn)
 Leading((((cn (mc (((((ci n) t) rt) mi) it))) an) chn)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k,
movie_companies as mc,
company_type as ct,
company_name as cn
WHERE
t.id = ci.movie_id
AND t.id = mc.movie_id
AND t.id = mi1.movie_id
AND t.id = mk.movie_id
AND mc.company_type_id = ct.id
AND mc.company_id = cn.id
AND k.id = mk.keyword_id
AND mi1.info_type_id = it1.id
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (it1.id IN ('7'))
AND (mi1.info in ('MET:','OFM:35 mm','PCS:Digital Intermediate','PFM:35 mm','PFM:Video','RAT:1.33 : 1','RAT:1.37 : 1'))
AND (kt.kind in ('episode','movie','tv movie'))
AND (rt.role in ('actor','actress'))
AND (n.gender in ('f','m') OR n.gender IS NULL)
AND (n.name_pcode_cf in ('A5362','J5252','R1632','R2632','W4525'))
AND (t.production_year <= 2015)
AND (t.production_year >= 1925)
AND (cn.name in ('Fox Network','Independent Television (ITV)','Metro-Goldwyn-Mayer (MGM)','National Broadcasting Company (NBC)','Paramount Pictures','Shout! Factory','Sony Pictures Home Entertainment','Universal Pictures','Universal TV'))
AND (ct.kind in ('distributors','production companies'))

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 0 1 1 1 0 1 0 1 3 4 3 4 3 4 3 4 3 4 5 4]
indexes_env_matrix for this sql:  [ 1  2 23  2  3 22  3  4 21  4  5 20  5  6 19  6  7 18  7  8 17  8  9 16
  9 10 15 10 11 14 11 12 13 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 4.2553736e-05 0.0000000e+00
 0.0000000e+00 5.0000000e-01 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 4.2857143e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 4.8991218e-03 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 7.4970769e-03 0.0000000e+00
 0.0000000e+00 0.0000000e+00 1.6666667e-01 9.3211162e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  113.39136816601861
Other difference exceed the threshold, need to switch module.
the difference value is:  113.39136816601861
Hash difference exceed the threshold, need to switch module.
the difference value is:  113.39136816601861
Nested loop difference exceed the threshold, need to switch module.
Planning took 594.8ms
q1a_bao, predicted time: 6.3
q1a_bao,(predicted 6.3),/*+ MergeJoin(kt mi1 cn ct mc t mk it1 ci rt k n)
 MergeJoin(mi1 cn ct mc t mk it1 ci rt k n)
 MergeJoin(mi1 cn ct mc t mk it1 ci rt k)
 MergeJoin(mi1 cn ct mc t mk it1 ci rt)
 MergeJoin(mi1 cn ct mc t mk it1 ci)
 MergeJoin(mi1 cn ct mc t mk it1)
 MergeJoin(mi1 cn ct mc t mk)
 MergeJoin(mi1 cn ct mc t)
 MergeJoin(cn ct mc t)
 MergeJoin(ct mc t)
 MergeJoin(mc t)
 SeqScan(kt)
 IndexScan(mi1)
 IndexScan(cn)
 IndexScan(ct)
 IndexScan(mc)
 SeqScan(t)
 SeqScan(mk)
 IndexScan(it1)
 SeqScan(ci)
 SeqScan(rt)
 SeqScan(k)
 SeqScan(n)
 Leading((kt (((((((mi1 (cn (ct (mc t)))) mk) it1) ci) rt) k) n))) */
---------------------------------------
sql_str:  SELECT MIN(mc.note) AS production_note,
       MIN(t.title) AS movie_title,
       MIN(t.production_year) AS movie_year
FROM company_type AS ct,
     info_type AS it,
     movie_companies AS mc,
     movie_info_idx AS mi_idx,
     title AS t
WHERE ct.kind = 'production companies'
  AND it.info = 'top 250 rank'
  AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'
  AND (mc.note LIKE '%(co-production)%'
       OR mc.note LIKE '%(presents)%')
  AND ct.id = mc.company_type_id
  AND t.id = mc.movie_id
  AND t.id = mi_idx.movie_id
  AND mc.movie_id = mi_idx.movie_id
  AND it.id = mi_idx.info_type_id;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 0 1 0 3 3 4 3 4]
indexes_env_matrix for this sql:  [1 2 9 2 3 8 3 4 7 4 5 6 5 0 0 6 0 0 7 0 0 8 0 0 9 0 0]
query_enc_matrix for this sql:  [0.         0.         0.         0.         0.         0.
 0.         0.         0.         0.         0.         0.25
 0.         0.00884956 0.         0.         0.         0.
 0.         0.         0.         0.         0.         0.
 0.00700924 0.         0.         0.         0.         0.
 1.         0.         0.         0.         0.         0.
 0.         0.         0.         0.         0.         0.
 0.         1.         0.         0.        ]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  127.31023884047922
Other difference exceed the threshold, need to switch module.
the difference value is:  127.31023884047922
Hash difference exceed the threshold, need to switch module.
the difference value is:  127.31023884047922
Nested loop difference exceed the threshold, need to switch module.
Planning took 38.9ms
q1a_job, predicted time: 4.6
q1a_job,(predicted 4.6),/*+ MergeJoin(ct mi_idx it t mc)
 MergeJoin(mi_idx it t mc)
 MergeJoin(mi_idx it t)
 MergeJoin(mi_idx it)
 SeqScan(ct)
 SeqScan(mi_idx)
 IndexScan(it)
 SeqScan(t)
 IndexScan(mc)
 Leading((ct (((mi_idx it) t) mc))) */
---------------------------------------
sql_str:  SELECT MIN(mc.note) AS production_note,
       MIN(t.title) AS movie_title,
       MIN(t.production_year) AS movie_year
FROM company_type AS ct,
     info_type AS it,
     movie_companies AS mc,
     movie_info_idx AS mi_idx,
     title AS t
WHERE ct.kind = 'production companies'
  AND it.info = 'bottom 10 rank'
  AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'
  AND t.production_year BETWEEN 2005 AND 2010
  AND ct.id = mc.company_type_id
  AND t.id = mc.movie_id
  AND t.id = mi_idx.movie_id
  AND mc.movie_id = mi_idx.movie_id
  AND it.id = mi_idx.info_type_id;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [0 1 1 0 3 3 4 4 3]
indexes_env_matrix for this sql:  [1 2 9 2 3 8 3 4 7 4 5 6 5 0 0 6 0 0 7 0 0 8 0 0 9 0 0]
query_enc_matrix for this sql:  [0.         0.         0.         0.         0.         0.
 0.         0.         0.         0.         0.         0.25
 0.         0.00884956 0.         0.         0.         0.
 0.         0.         0.         0.         0.         0.
 0.51376456 0.         0.         0.         0.         0.
 1.         0.         0.         0.         0.         0.
 0.         0.         0.         0.         0.         0.
 0.         0.28122556 0.         0.        ]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  124.98076651179623
Other difference exceed the threshold, need to switch module.
the difference value is:  124.98076651179623
Hash difference exceed the threshold, need to switch module.
the difference value is:  124.98076651179623
Nested loop difference exceed the threshold, need to switch module.
Planning took 116.1ms
q1b_job, predicted time: 3.4
q1b_job,(predicted 3.4),/*+ MergeJoin(t ct it mc mi_idx)
 MergeJoin(ct it mc mi_idx)
 MergeJoin(it mc mi_idx)
 MergeJoin(mc mi_idx)
 IndexScan(t)
 IndexScan(ct)
 SeqScan(it)
 SeqScan(mc)
 IndexScan(mi_idx)
 Leading((t (ct (it (mc mi_idx))))) */
---------------------------------------
sql_str:  SELECT MIN(chn.name) AS voiced_char_name, MIN(n.name) AS voicing_actress_name, MIN(t.title) AS kung_fu_panda FROM aka_name AS an, char_name AS chn, cast_info AS ci, company_name AS cn, info_type AS it, keyword AS k, movie_companies AS mc, movie_info AS mi, movie_keyword AS mk, name AS n, role_type AS rt, title AS t WHERE ci.note  in ('(voice)', '(voice: Japanese version)', '(voice) (uncredited)', '(voice: English version)') AND cn.country_code ='[us]' AND cn.name  = 'DreamWorks Animation' AND it.info  = 'release dates' AND k.keyword  in ('hero', 'martial-arts', 'hand-to-hand-combat', 'computer-animated-movie') AND mi.info  is not null and (mi.info like 'Japan:%201%' or mi.info like 'USA:%201%') AND n.gender ='f' and n.name like '%An%' AND rt.role ='actress' AND t.production_year  > 2010 AND t.title like 'Kung Fu Panda%' AND t.id = mi.movie_id AND t.id = mc.movie_id AND t.id = ci.movie_id AND t.id = mk.movie_id AND mc.movie_id = ci.movie_id AND mc.movie_id = mi.movie_id AND mc.movie_id = mk.movie_id AND mi.movie_id = ci.movie_id AND mi.movie_id = mk.movie_id AND ci.movie_id = mk.movie_id AND cn.id = mc.company_id AND it.id = mi.info_type_id AND n.id = ci.person_id AND rt.id = ci.role_id AND n.id = an.person_id AND ci.person_id = an.person_id AND chn.id = ci.person_role_id AND k.id = mk.keyword_id;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 1 1 1 1 3 4 4 4 4 5 4 4 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 23  2  3 22  3  4 21  4  5 20  5  6 19  6  7 18  7  8 17  8  9 16
  9 10 15 10 11 14 11 12 13 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.3315500e-02
 1.0000000e+00 0.0000000e+00 0.0000000e+00 4.2553734e-06 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.9812923e-05
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 1.0389991e-02 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 7.1443464e-03 0.0000000e+00
 0.0000000e+00 0.0000000e+00 8.3333336e-02 1.4634270e-05 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  117.67118719338451
Other difference exceed the threshold, need to switch module.
the difference value is:  117.67118719338451
Hash difference exceed the threshold, need to switch module.
the difference value is:  117.67118719338451
Nested loop difference exceed the threshold, need to switch module.
Planning took 221.7ms
q20a_bao, predicted time: 8.9
q20a_bao,(predicted 8.9),/*+ MergeJoin(ci n t rt mi it an mc cn mk k chn)
 MergeJoin(ci n t rt mi it an mc cn mk k)
 MergeJoin(ci n t rt mi it an mc cn mk)
 MergeJoin(ci n t rt mi it an mc cn)
 MergeJoin(ci n t rt mi it an mc)
 MergeJoin(ci n t rt mi it an)
 MergeJoin(ci n t rt mi it)
 MergeJoin(ci n t rt mi)
 MergeJoin(ci n t rt)
 MergeJoin(ci n t)
 MergeJoin(ci n)
 IndexScan(ci)
 SeqScan(n)
 IndexScan(t)
 SeqScan(rt)
 SeqScan(mi)
 SeqScan(it)
 IndexScan(an)
 SeqScan(mc)
 SeqScan(cn)
 IndexScan(mk)
 IndexScan(k)
 SeqScan(chn)
 Leading((((((((((((ci n) t) rt) mi) it) an) mc) cn) mk) k) chn)) */
---------------------------------------
sql_str:  SELECT MIN(t.title) AS complete_downey_ironman_movie
FROM complete_cast AS cc,
     comp_cast_type AS cct1,
     comp_cast_type AS cct2,
     char_name AS chn,
     cast_info AS ci,
     keyword AS k,
     kind_type AS kt,
     movie_keyword AS mk,
     name AS n,
     title AS t
WHERE cct1.kind = 'cast'
  AND cct2.kind LIKE '%complete%'
  AND chn.name NOT LIKE '%Sherlock%'
  AND (chn.name LIKE '%Tony%Stark%'
       OR chn.name LIKE '%Iron%Man%')
  AND k.keyword IN ('superhero',
                    'sequel',
                    'second-part',
                    'marvel-comics',
                    'based-on-comic',
                    'tv-special',
                    'fight',
                    'violence')
  AND kt.kind = 'movie'
  AND n.name LIKE '%Downey%Robert%'
  AND t.production_year > 2000
  AND kt.id = t.kind_id
  AND t.id = mk.movie_id
  AND t.id = ci.movie_id
  AND t.id = cc.movie_id
  AND mk.movie_id = ci.movie_id
  AND mk.movie_id = cc.movie_id
  AND ci.movie_id = cc.movie_id
  AND chn.id = ci.person_role_id
  AND n.id = ci.person_id
  AND k.id = mk.keyword_id
  AND cct1.id = cc.subject_id
  AND cct2.id = cc.status_id
GROUP BY t.id
ORDER BY complete_downey_ironman_movie;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 1 3 1 1 3 1 1 3 4 4 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 19  2  3 18  3  4 17  4  5  6  5  0  0  6  7  8  7  0  0  8  9 16
  9 10 11 10  0  0 11 12 15 12 13 14 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0]
query_enc_matrix for this sql:  [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.00000000e+00 1.99978414e-04 2.50000000e-01 2.50000000e-01
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 5.96258469e-05
 1.42857149e-01 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.00000000e+00 0.00000000e+00 1.00060206e-04 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 5.40744185e-01
 0.00000000e+00 0.00000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  220.00089851089226
Other difference exceed the threshold, need to switch module.
the difference value is:  220.00089851089226
Hash difference exceed the threshold, need to switch module.
the difference value is:  220.00089851089226
Nested loop difference exceed the threshold, need to switch module.
Planning took 739.5ms
q20b_jobchanged, predicted time: 10.0
q20b_jobchanged,(predicted 10.0),/*+ MergeJoin(cct1 ci cc t mk kt k n cct2 chn)
 MergeJoin(ci cc t mk kt k n cct2 chn)
 MergeJoin(ci cc t mk kt k n cct2)
 MergeJoin(ci cc t mk kt k n)
 MergeJoin(ci cc t mk kt k)
 MergeJoin(cc t mk kt k)
 MergeJoin(t mk kt k)
 MergeJoin(t mk kt)
 MergeJoin(t mk)
 IndexScan(cct1)
 SeqScan(ci)
 IndexScan(cc)
 SeqScan(t)
 SeqScan(mk)
 IndexScan(kt)
 SeqScan(k)
 IndexScan(n)
 SeqScan(cct2)
 SeqScan(chn)
 Leading((cct1 ((((ci (cc (((t mk) kt) k))) n) cct2) chn))) */
---------------------------------------
sql_str:  SELECT
    MIN(chn.name) AS voiced_char_name,
    MIN(n.name) AS voicing_actress_name,
    MIN(t.title) AS kung_fu_panda
FROM
    aka_name AS an,
    char_name AS chn,
    cast_info AS ci,
    company_name AS cn,
    info_type AS it,
    keyword AS k,
    movie_companies AS mc,
    movie_info AS mi,
    movie_keyword AS mk,
    name AS n,
    role_type AS rt,
    title AS t
WHERE
    ci.note in (
        '(voice) (uncredited)',
        '(voice: English version)'
    )
    AND cn.country_code = '[us]'
    AND cn.name = 'DreamWorks Animation'
    AND it.info = 'release dates'
    AND k.keyword in (
        'hero',
        'martial-arts',
        'hand-to-hand-combat',
        'computer-animated-movie'
    )
    AND mi.info is not null
    and (
        mi.info like 'Japan:%201%'
        or mi.info like 'USA:%201%'
    )
    AND n.gender = 'f'
    and n.name like '%An%'
    AND rt.role = 'actress'
    AND t.production_year > 2010
    AND t.title like 'Kung Fu Panda%'
    AND t.id = mi.movie_id
    AND t.id = mc.movie_id
    AND t.id = ci.movie_id
    AND t.id = mk.movie_id
    AND mc.movie_id = ci.movie_id
    AND mc.movie_id = mi.movie_id
    AND mc.movie_id = mk.movie_id
    AND mi.movie_id = ci.movie_id
    AND mi.movie_id = mk.movie_id
    AND ci.movie_id = mk.movie_id
    AND cn.id = mc.company_id
    AND it.id = mi.info_type_id
    AND n.id = ci.person_id
    AND rt.id = ci.role_id
    AND n.id = an.person_id
    AND ci.person_id = an.person_id
    AND chn.id = ci.person_role_id
    AND k.id = mk.keyword_id
GROUP BY t.production_year, t.title
ORDER BY t.production_year, t.title;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 4 5 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 23  2  3 22  3  4 21  4  5 20  5  6 19  6  7 18  7  8 17  8  9 16
  9 10 15 10 11 14 11 12 13 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 3.2641783e-03
 1.0000000e+00 0.0000000e+00 0.0000000e+00 4.2553734e-06 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.9812923e-05
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 1.0389991e-02 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 7.1443464e-03 0.0000000e+00
 0.0000000e+00 0.0000000e+00 8.3333336e-02 1.4634270e-05 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  217.67106263549243
Other difference exceed the threshold, need to switch module.
the difference value is:  217.67106263549243
Hash difference exceed the threshold, need to switch module.
the difference value is:  217.67106263549243
Nested loop difference exceed the threshold, need to switch module.
Planning took 232.3ms
q20c_baochanged, predicted time: 8.7
q20c_baochanged,(predicted 8.7),/*+ MergeJoin(ci n t rt mi it an mc cn mk k chn)
 MergeJoin(ci n t rt mi it an mc cn mk k)
 MergeJoin(ci n t rt mi it an mc cn mk)
 MergeJoin(ci n t rt mi it an mc cn)
 MergeJoin(ci n t rt mi it an mc)
 MergeJoin(ci n t rt mi it an)
 MergeJoin(ci n t rt mi it)
 MergeJoin(ci n t rt mi)
 MergeJoin(ci n t rt)
 MergeJoin(ci n t)
 MergeJoin(ci n)
 IndexScan(ci)
 SeqScan(n)
 IndexScan(t)
 SeqScan(rt)
 SeqScan(mi)
 SeqScan(it)
 IndexScan(an)
 SeqScan(mc)
 SeqScan(cn)
 IndexScan(mk)
 IndexScan(k)
 SeqScan(chn)
 Leading((((((((((((ci n) t) rt) mi) it) an) mc) cn) mk) k) chn)) */
---------------------------------------
sql_str:  SELECT MIN(t.title) AS complete_downey_ironman_movie
FROM complete_cast AS cc,
     comp_cast_type AS cct1,
     comp_cast_type AS cct2,
     char_name AS chn,
     cast_info AS ci,
     keyword AS k,
     kind_type AS kt,
     movie_keyword AS mk,
     name AS n,
     title AS t
WHERE cct1.kind = 'cast'
  AND cct2.kind LIKE '%complete%'
  AND chn.name NOT LIKE '%Sherlock%'
  AND (chn.name LIKE '%Tony%Stark%'
       OR chn.name LIKE '%Iron%Man%')
  AND k.keyword IN ('superhero',
                    'sequel',
                    'second-part',
                    'marvel-comics',
                    'based-on-comic',
                    'tv-special',
                    'fight',
                    'violence')
  AND kt.kind = 'movie'
  AND t.production_year > 1950
  AND kt.id = t.kind_id
  AND t.id = mk.movie_id
  AND t.id = ci.movie_id
  AND t.id = cc.movie_id
  AND mk.movie_id = ci.movie_id
  AND mk.movie_id = cc.movie_id
  AND ci.movie_id = cc.movie_id
  AND chn.id = ci.person_role_id
  AND n.id = ci.person_id
  AND k.id = mk.keyword_id
  AND cct1.id = cc.subject_id
  AND cct2.id = cc.status_id
GROUP BY t.id
ORDER BY complete_downey_ironman_movie;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 1 1 3 1 3 1 1 3 4 4 4 4 4 5]
indexes_env_matrix for this sql:  [ 1  2 19  2  3 18  3  4 17  4  5  6  5  0  0  6  7 16  7  8  9  8  0  0
  9 10 11 10  0  0 11 12 15 12 13 14 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 1.9997841e-04 2.5000000e-01 2.5000000e-01 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.9625847e-05
 1.4285715e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 9.0382993e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  219.00089851089226
Other difference exceed the threshold, need to switch module.
the difference value is:  219.00089851089226
Hash difference exceed the threshold, need to switch module.
the difference value is:  219.00089851089226
Nested loop difference exceed the threshold, need to switch module.
Planning took 694.3ms
q20c_jobchanged, predicted time: 11.2
q20c_jobchanged,(predicted 11.2),/*+ MergeJoin(cct2 cct1 cc n chn ci k t mk kt)
 MergeJoin(cct1 cc n chn ci k t mk kt)
 MergeJoin(cc n chn ci k t mk kt)
 MergeJoin(n chn ci k t mk kt)
 MergeJoin(chn ci k t mk kt)
 MergeJoin(ci k t mk kt)
 MergeJoin(k t mk kt)
 MergeJoin(t mk kt)
 MergeJoin(t mk)
 IndexScan(cct2)
 IndexScan(cct1)
 IndexScan(cc)
 IndexScan(n)
 IndexScan(chn)
 IndexScan(ci)
 SeqScan(k)
 SeqScan(t)
 SeqScan(mk)
 IndexScan(kt)
 Leading((cct2 (cct1 (cc (n (chn (ci (k ((t mk) kt))))))))) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('5'))
AND (it2.id in ('7'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('Argentina:Atp','Canada:G','Iceland:L','UK:X','USA:X'))
AND (mi2.info in ('OFM:35 mm','PFM:35 mm','RAT:1.33 : 1'))
AND (kt.kind in ('tv series','video movie'))
AND (rt.role in ('director','producer'))
AND (n.gender IS NULL)
AND (t.production_year <= 1975)
AND (t.production_year >= 1875)
AND (k.keyword IN ('based-on-play','dog','family-relationships','father-son-relationship','female-nudity','hardcore','husband-wife-relationship','independent-film','lesbian-sex','love','marriage','mother-daughter-relationship','nudity','one-word-title','police','sequel','sex','singer'))

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 1 1 4 4 4 3 4 4 3 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.3415815e-04
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.0751051e-05 4.5687705e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 3.4863040e-01 0.0000000e+00
 0.0000000e+00 0.0000000e+00 1.6666667e-01 1.8108603e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  120.04529492868126
Other difference exceed the threshold, need to switch module.
the difference value is:  120.04529492868126
Hash difference exceed the threshold, need to switch module.
the difference value is:  120.04529492868126
Nested loop difference exceed the threshold, need to switch module.
Planning took 1111.0ms
q21a_bao, predicted time: 391.8
q21a_bao,(predicted 391.8),/*+ MergeJoin(mk t kt it1 mi1 mi2 it2 k ci rt n)
 MergeJoin(mk t kt it1 mi1 mi2 it2 k ci rt)
 MergeJoin(mk t kt it1 mi1 mi2 it2 k ci)
 MergeJoin(mk t kt it1 mi1 mi2 it2 k)
 MergeJoin(mk t kt it1 mi1 mi2 it2)
 MergeJoin(t kt it1 mi1 mi2 it2)
 NestLoop(mi2 it2)
 MergeJoin(t kt it1 mi1)
 NestLoop(it1 mi1)
 MergeJoin(t kt)
 IndexScan(mk)
 IndexScan(t)
 IndexScan(kt)
 IndexScan(it1)
 IndexScan(mi1)
 SeqScan(mi2)
 IndexScan(it2)
 SeqScan(k)
 IndexScan(ci)
 SeqScan(rt)
 IndexScan(n)
 Leading((((((mk (((t kt) (it1 mi1)) (mi2 it2))) k) ci) rt) n)) */
---------------------------------------
sql_str:  SELECT MIN(cn.name) AS company_name,
       MIN(lt.link) AS link_type,
       MIN(t.title) AS german_follow_up
FROM company_name AS cn,
     company_type AS ct,
     keyword AS k,
     link_type AS lt,
     movie_companies AS mc,
     movie_info AS mi,
     movie_keyword AS mk,
     movie_link AS ml,
     title AS t
WHERE cn.country_code !='[pl]'
  AND (cn.name LIKE '%Film%'
       OR cn.name LIKE '%Warner%')
  AND ct.kind ='production companies'
  AND k.keyword ='sequel'
  AND lt.link LIKE '%follow%'
  AND mc.note IS NULL
  AND mi.info IN ('Germany',
                  'German')
  AND t.production_year BETWEEN 2000 AND 2010
  AND lt.id = ml.link_type_id
  AND ml.movie_id = t.id
  AND t.id = mk.movie_id
  AND mk.keyword_id = k.id
  AND t.id = mc.movie_id
  AND mc.company_type_id = ct.id
  AND mc.company_id = cn.id
  AND mi.movie_id = t.id
  AND ml.movie_id = mk.movie_id
  AND ml.movie_id = mc.movie_id
  AND mk.movie_id = mc.movie_id
  AND ml.movie_id = mi.movie_id
  AND mk.movie_id = mi.movie_id
  AND mc.movie_id = mi.movie_id
GROUP BY t.id
ORDER BY german_follow_up;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 3 1 1 3 4 4 4 4 3 4 4]
indexes_env_matrix for this sql:  [ 1  2 17  2  3 16  3  4 15  4  5 14  5  6 13  6  7  8  7  0  0  8  9 12
  9 10 11 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.5243300e-01 0.0000000e+00
 0.0000000e+00 2.5000000e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 7.4532309e-06
 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.5555556e-02 4.8620018e-01
 0.0000000e+00 0.0000000e+00 8.2165878e-03 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 4.0757865e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  219.44028406752537
Other difference exceed the threshold, need to switch module.
the difference value is:  219.44028406752537
Hash difference exceed the threshold, need to switch module.
the difference value is:  219.44028406752537
Nested loop difference exceed the threshold, need to switch module.
Planning took 457.5ms
q21b_jobchanged, predicted time: 3.7
q21b_jobchanged,(predicted 3.7),/*+ MergeJoin(ct mc k ml t mi mk cn lt)
 MergeJoin(ct mc k ml t mi mk cn)
 MergeJoin(mc k ml t mi mk cn)
 MergeJoin(mc k ml t mi mk)
 MergeJoin(k ml t mi mk)
 MergeJoin(ml t mi mk)
 MergeJoin(t mi mk)
 MergeJoin(mi mk)
 SeqScan(ct)
 SeqScan(mc)
 IndexScan(k)
 IndexScan(ml)
 IndexScan(t)
 IndexScan(mi)
 SeqScan(mk)
 SeqScan(cn)
 SeqScan(lt)
 Leading(((ct ((mc (k (ml (t (mi mk))))) cn)) lt)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('5'))
AND (it2.id in ('7'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('Argentina:Atp','Canada:G','Iceland:L','UK:X','USA:X'))
AND (mi2.info in ('OFM:35 mm','PFM:35 mm','RAT:1.33 : 1'))
AND (kt.kind in ('tv series','video movie'))
AND (rt.role in ('producer'))
AND (n.gender IS NULL)
AND (t.production_year <= 1975)
AND (t.production_year >= 1875)
AND (k.keyword IN ('based-on-play','dog','family-relationships','father-son-relationship','female-nudity','hardcore','husband-wife-relationship','independent-film','lesbian-sex','love','marriage','mother-daughter-relationship','nudity','one-word-title','police','sequel','sex','singer'))
GROUP BY t.production_year, kt.kind, n.name
ORDER BY t.production_year, kt.kind, n.name;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 1 1 4 4 4 3 4 4 3 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.3415815e-04
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.0751051e-05 4.5687705e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 3.4863040e-01 0.0000000e+00
 0.0000000e+00 0.0000000e+00 8.3333336e-02 1.8108603e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  220.04529492868127
Other difference exceed the threshold, need to switch module.
the difference value is:  220.04529492868127
Hash difference exceed the threshold, need to switch module.
the difference value is:  220.04529492868127
Nested loop difference exceed the threshold, need to switch module.
Planning took 1123.0ms
q21c_baochanged, predicted time: 376.8
q21c_baochanged,(predicted 376.8),/*+ MergeJoin(mk t kt it1 mi1 mi2 it2 k ci rt n)
 MergeJoin(mk t kt it1 mi1 mi2 it2 k ci rt)
 MergeJoin(mk t kt it1 mi1 mi2 it2 k ci)
 MergeJoin(mk t kt it1 mi1 mi2 it2 k)
 MergeJoin(mk t kt it1 mi1 mi2 it2)
 MergeJoin(t kt it1 mi1 mi2 it2)
 NestLoop(mi2 it2)
 MergeJoin(t kt it1 mi1)
 NestLoop(it1 mi1)
 MergeJoin(t kt)
 IndexScan(mk)
 IndexScan(t)
 IndexScan(kt)
 IndexScan(it1)
 IndexScan(mi1)
 SeqScan(mi2)
 IndexScan(it2)
 SeqScan(k)
 IndexScan(ci)
 SeqScan(rt)
 IndexScan(n)
 Leading((((((mk (((t kt) (it1 mi1)) (mi2 it2))) k) ci) rt) n)) */
---------------------------------------
sql_str:  SELECT MIN(cn.name) AS company_name,
       MIN(lt.link) AS link_type,
       MIN(t.title) AS western_follow_up
FROM company_name AS cn,
     company_type AS ct,
     keyword AS k,
     link_type AS lt,
     movie_companies AS mc,
     movie_info AS mi,
     movie_keyword AS mk,
     movie_link AS ml,
     title AS t
WHERE cn.country_code !='[pl]'
  AND (cn.name LIKE '%Film%'
       OR cn.name LIKE '%Warner%')
  AND ct.kind ='production companies'
  AND k.keyword ='sequel'
  AND lt.link LIKE '%follow%'
  AND mc.note IS NULL
  AND mi.info IN ('Sweden',
                  'Norway',
                  'Germany',
                  'Denmark',
                  'Swedish',
                  'Denish',
                  'Norwegian',
                  'German',
                  'English')
  AND t.production_year BETWEEN 1950 AND 2010
  AND lt.id = ml.link_type_id
  AND ml.movie_id = t.id
  AND t.id = mk.movie_id
  AND mk.keyword_id = k.id
  AND t.id = mc.movie_id
  AND mc.company_type_id = ct.id
  AND mc.company_id = cn.id
  AND mi.movie_id = t.id
  AND ml.movie_id = mk.movie_id
  AND ml.movie_id = mc.movie_id
  AND mk.movie_id = mc.movie_id
  AND ml.movie_id = mi.movie_id
  AND mk.movie_id = mi.movie_id
  AND mc.movie_id = mi.movie_id
GROUP BY t.id
ORDER BY western_follow_up;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 3 1 1 3 4 4 4 4 3 4 4]
indexes_env_matrix for this sql:  [ 1  2 17  2  3 16  3  4 15  4  5 14  5  6 13  6  7  8  7  0  0  8  9 12
  9 10 11 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.5243300e-01 0.0000000e+00
 0.0000000e+00 2.5000000e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 7.4532309e-06
 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.5555556e-02 4.8620018e-01
 0.0000000e+00 0.0000000e+00 6.1428905e-02 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 7.5073051e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  219.4061375100161
Other difference exceed the threshold, need to switch module.
the difference value is:  219.4061375100161
Hash difference exceed the threshold, need to switch module.
the difference value is:  219.4061375100161
Nested loop difference exceed the threshold, need to switch module.
Planning took 539.7ms
q21c_jobchanged, predicted time: 3.6
q21c_jobchanged,(predicted 3.6),/*+ MergeJoin(ct k mc ml t mi mk cn lt)
 MergeJoin(ct k mc ml t mi mk cn)
 MergeJoin(k mc ml t mi mk cn)
 MergeJoin(k mc ml t mi mk)
 MergeJoin(mc ml t mi mk)
 MergeJoin(ml t mi mk)
 MergeJoin(t mi mk)
 MergeJoin(mi mk)
 SeqScan(ct)
 IndexScan(k)
 SeqScan(mc)
 SeqScan(ml)
 IndexScan(t)
 IndexScan(mi)
 SeqScan(mk)
 SeqScan(cn)
 SeqScan(lt)
 Leading(((ct ((k (mc (ml (t (mi mk))))) cn)) lt)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k,
movie_companies as mc,
company_type as ct,
company_name as cn
WHERE
t.id = ci.movie_id
AND t.id = mc.movie_id
AND t.id = mi1.movie_id
AND t.id = mk.movie_id
AND mc.company_type_id = ct.id
AND mc.company_id = cn.id
AND k.id = mk.keyword_id
AND mi1.info_type_id = it1.id
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (it1.id IN ('3'))
AND (mi1.info in ('Adventure','Animation','Crime','Drama'))
AND (kt.kind in ('movie'))
AND (rt.role in ('actor','actress'))
AND (n.gender in ('f','m'))
AND (n.surname_pcode in ('C4','C62','C632','D5','F6','F63','G63','H2','L5','M245','S','S6'))
AND (t.production_year <= 1975)
AND (t.production_year >= 1875)
AND (cn.name in ('Columbia Broadcasting System (CBS)','Metro-Goldwyn-Mayer (MGM)','Paramount Pictures','Pathé Frères','Universal Pictures','Warner Home Video'))
AND (ct.kind in ('distributors','production companies'))

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 0 1 1 1 1 1 1 0 1 1 3 4 4 3 4 4 5 4 3 4 3 4]
indexes_env_matrix for this sql:  [ 1  2 23  2  3 22  3  4 21  4  5 20  5  6 19  6  7 18  7  8 17  8  9 16
  9 10 15 10 11 14 11 12 13 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.9787614e-05 0.0000000e+00
 0.0000000e+00 5.0000000e-01 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 1.4285715e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.6909378e-03 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 1.1934039e-02 0.0000000e+00
 0.0000000e+00 0.0000000e+00 1.6666667e-01 1.8108603e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  119.39815048890598
Other difference exceed the threshold, need to switch module.
the difference value is:  119.39815048890598
Hash difference exceed the threshold, need to switch module.
the difference value is:  119.39815048890598
Nested loop difference exceed the threshold, need to switch module.
Planning took 1381.7ms
q22a_bao, predicted time: 5656.1
q22a_bao,(predicted 5656.1),/*+ HashJoin(mk k ct mc cn it1 kt t mi1 ci n rt)
 HashJoin(ct mc cn it1 kt t mi1 ci n rt)
 NestLoop(it1 kt t mi1 ci n rt)
 NestLoop(it1 kt t mi1 ci n)
 NestLoop(it1 kt t mi1 ci)
 NestLoop(it1 kt t mi1)
 NestLoop(kt t mi1)
 NestLoop(kt t)
 NestLoop(ct mc cn)
 NestLoop(mc cn)
 NestLoop(mk k)
 SeqScan(mk)
 IndexScan(k)
 SeqScan(ct)
 SeqScan(mc)
 IndexScan(cn)
 SeqScan(it1)
 SeqScan(kt)
 IndexScan(t)
 IndexScan(mi1)
 IndexScan(ci)
 IndexScan(n)
 IndexScan(rt)
 Leading(((mk k) ((ct (mc cn)) ((((it1 ((kt t) mi1)) ci) n) rt)))) */
---------------------------------------
sql_str:  SELECT MIN(cn.name) AS movie_company,
       MIN(mi_idx.info) AS rating,
       MIN(t.title) AS western_violent_movie
FROM company_name AS cn,
     company_type AS ct,
     info_type AS it1,
     info_type AS it2,
     keyword AS k,
     kind_type AS kt,
     movie_companies AS mc,
     movie_info AS mi,
     movie_info_idx AS mi_idx,
     movie_keyword AS mk,
     title AS t
WHERE cn.country_code != '[us]'
  AND it1.info = 'countries'
  AND it2.info = 'rating'
  AND k.keyword IN ('murder',
                    'murder-in-title',
                    'blood',
                    'violence')
  AND kt.kind IN ('movie',
                  'episode')
  AND mc.note NOT LIKE '%(USA)%'
  AND mc.note LIKE '%(200%)%'
  AND mi.info IN ('Germany',
                  'German',
                  'USA',
                  'American')
  AND mi_idx.info < '7.0'
  AND t.production_year > 2009
  AND kt.id = t.kind_id
  AND t.id = mi.movie_id
  AND t.id = mk.movie_id
  AND t.id = mi_idx.movie_id
  AND t.id = mc.movie_id
  AND mk.movie_id = mi.movie_id
  AND mk.movie_id = mi_idx.movie_id
  AND mk.movie_id = mc.movie_id
  AND mi.movie_id = mi_idx.movie_id
  AND mi.movie_id = mc.movie_id
  AND mc.movie_id = mi_idx.movie_id
  AND k.id = mk.keyword_id
  AND it1.id = mi.info_type_id
  AND it2.id = mi_idx.info_type_id
  AND ct.id = mc.company_type_id
  AND cn.id = mc.company_id
GROUP BY t.id
ORDER BY western_violent_movie;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 3 1 1 1 1 3 4 4 3 4 4 4 3 4 3]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7  8  7  0  0  8  9 16
  9 10 15 10 11 14 11 12 13 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.3439832e-01 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.9812923e-05
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.5748872e-02
 0.0000000e+00 0.0000000e+00 4.4983592e-02 0.0000000e+00 0.0000000e+00
 8.4798867e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.1380985e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  210.5434689519699
Other difference exceed the threshold, need to switch module.
the difference value is:  210.5434689519699
Hash difference exceed the threshold, need to switch module.
the difference value is:  210.5434689519699
Nested loop difference exceed the threshold, need to switch module.
Planning took 660.1ms
q22b_jobchanged, predicted time: 3.2
q22b_jobchanged,(predicted 3.2),/*+ MergeJoin(cn it2 it1 mi_idx k ct mc kt t mi mk)
 MergeJoin(it2 it1 mi_idx k ct mc kt t mi mk)
 MergeJoin(it1 mi_idx k ct mc kt t mi mk)
 MergeJoin(mi_idx k ct mc kt t mi mk)
 MergeJoin(k ct mc kt t mi mk)
 MergeJoin(ct mc kt t mi mk)
 MergeJoin(mc kt t mi mk)
 MergeJoin(kt t mi mk)
 MergeJoin(t mi mk)
 MergeJoin(mi mk)
 IndexScan(cn)
 SeqScan(it2)
 SeqScan(it1)
 IndexScan(mi_idx)
 SeqScan(k)
 IndexScan(ct)
 SeqScan(mc)
 SeqScan(kt)
 IndexScan(t)
 IndexScan(mi)
 SeqScan(mk)
 Leading((cn (it2 (it1 (mi_idx (k (ct (mc (kt (t (mi mk))))))))))) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k,
movie_companies as mc,
company_type as ct,
company_name as cn
WHERE
t.id = ci.movie_id
AND t.id = mc.movie_id
AND t.id = mi1.movie_id
AND t.id = mk.movie_id
AND mc.company_type_id = ct.id
AND mc.company_id = cn.id
AND k.id = mk.keyword_id
AND mi1.info_type_id = it1.id
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (it1.id IN ('3'))
AND (mi1.info in ('Crime','Drama'))
AND (kt.kind in ('movie'))
AND (rt.role in ('actor','actress'))
AND (n.gender in ('f','m'))
AND (n.surname_pcode in ('C4','C62','C632','D5','F6','F63','G63','H2','L5','M245','S','S6'))
AND (t.production_year <= 1975)
AND (t.production_year >= 1875)
AND (cn.name in ('Columbia Broadcasting System (CBS)','Metro-Goldwyn-Mayer (MGM)','Paramount Pictures','Pathé Frères','Universal Pictures','Warner Home Video'))
AND (ct.kind in ('distributors','production companies'))
GROUP BY t.production_year, kt.kind, cn.name
ORDER BY t.production_year, kt.kind, cn.name;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 0 1 1 1 1 1 1 1 0 1 3 4 3 4 4 4 3 4 5 4 3 4]
indexes_env_matrix for this sql:  [ 1  2 23  2  3 22  3  4 21  4  5 20  5  6 19  6  7 18  7  8 17  8  9 16
  9 10 15 10 11 14 11 12 13 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.9787614e-05 0.0000000e+00
 0.0000000e+00 5.0000000e-01 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 1.4285715e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.1184681e-03 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 1.1934039e-02 0.0000000e+00
 0.0000000e+00 0.0000000e+00 1.6666667e-01 1.8108603e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  219.39818754242847
Other difference exceed the threshold, need to switch module.
the difference value is:  219.39818754242847
Hash difference exceed the threshold, need to switch module.
the difference value is:  219.39818754242847
Nested loop difference exceed the threshold, need to switch module.
Planning took 1516.9ms
q22c_baochanged, predicted time: 5658.6
q22c_baochanged,(predicted 5658.6),/*+ HashJoin(mk k ct mc cn it1 kt t mi1 ci n rt)
 HashJoin(ct mc cn it1 kt t mi1 ci n rt)
 NestLoop(it1 kt t mi1 ci n rt)
 NestLoop(it1 kt t mi1 ci n)
 NestLoop(it1 kt t mi1 ci)
 NestLoop(it1 kt t mi1)
 NestLoop(kt t mi1)
 NestLoop(kt t)
 NestLoop(ct mc cn)
 NestLoop(mc cn)
 NestLoop(mk k)
 SeqScan(mk)
 IndexScan(k)
 SeqScan(ct)
 SeqScan(mc)
 IndexScan(cn)
 SeqScan(it1)
 SeqScan(kt)
 IndexScan(t)
 IndexScan(mi1)
 IndexScan(ci)
 IndexScan(n)
 IndexScan(rt)
 Leading(((mk k) ((ct (mc cn)) ((((it1 ((kt t) mi1)) ci) n) rt)))) */
---------------------------------------
sql_str:  SELECT MIN(cn.name) AS movie_company,
       MIN(mi_idx.info) AS rating,
       MIN(t.title) AS western_violent_movie
FROM company_name AS cn,
     company_type AS ct,
     info_type AS it1,
     info_type AS it2,
     keyword AS k,
     kind_type AS kt,
     movie_companies AS mc,
     movie_info AS mi,
     movie_info_idx AS mi_idx,
     movie_keyword AS mk,
     title AS t
WHERE cn.country_code != '[us]'
  AND it1.info = 'countries'
  AND it2.info = 'rating'
  AND k.keyword IN ('murder',
                    'murder-in-title',
                    'blood',
                    'violence')
  AND kt.kind IN ('movie',
                  'episode')
  AND mc.note NOT LIKE '%(USA)%'
  AND mc.note LIKE '%(200%)%'
  AND mi.info IN ('Sweden',
                  'Norway',
                  'Germany',
                  'Denmark',
                  'Swedish',
                  'Danish',
                  'Norwegian',
                  'German',
                  'USA',
                  'American')
  AND mi_idx.info < '8.5'
  AND t.production_year > 2005
  AND kt.id = t.kind_id
  AND t.id = mi.movie_id
  AND t.id = mk.movie_id
  AND t.id = mi_idx.movie_id
  AND t.id = mc.movie_id
  AND mk.movie_id = mi.movie_id
  AND mk.movie_id = mi_idx.movie_id
  AND mk.movie_id = mc.movie_id
  AND mi.movie_id = mi_idx.movie_id
  AND mi.movie_id = mc.movie_id
  AND mc.movie_id = mi_idx.movie_id
  AND k.id = mk.keyword_id
  AND it1.id = mi.info_type_id
  AND it2.id = mi_idx.info_type_id
  AND ct.id = mc.company_type_id
  AND cn.id = mc.company_id
GROUP BY t.id
ORDER BY western_violent_movie;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 3 1 1 1 1 3 4 4 3 4 4 4 3 4 3]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7  8  7  0  0  8  9 16
  9 10 15 10 11 14 11 12 13 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.3439832e-01 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.9812923e-05
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.5748872e-02
 0.0000000e+00 0.0000000e+00 4.7601059e-02 0.0000000e+00 0.0000000e+00
 9.6995151e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 3.9825663e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  210.64696396180076
Other difference exceed the threshold, need to switch module.
the difference value is:  210.64696396180076
Hash difference exceed the threshold, need to switch module.
the difference value is:  210.64696396180076
Nested loop difference exceed the threshold, need to switch module.
Planning took 618.4ms
q22c_jobchanged, predicted time: 3.1
q22c_jobchanged,(predicted 3.1),/*+ MergeJoin(cn it2 it1 k mi_idx ct mc kt t mi mk)
 MergeJoin(it2 it1 k mi_idx ct mc kt t mi mk)
 MergeJoin(it1 k mi_idx ct mc kt t mi mk)
 MergeJoin(k mi_idx ct mc kt t mi mk)
 MergeJoin(mi_idx ct mc kt t mi mk)
 MergeJoin(ct mc kt t mi mk)
 MergeJoin(mc kt t mi mk)
 MergeJoin(kt t mi mk)
 MergeJoin(t mi mk)
 MergeJoin(mi mk)
 IndexScan(cn)
 SeqScan(it2)
 SeqScan(it1)
 SeqScan(k)
 IndexScan(mi_idx)
 IndexScan(ct)
 SeqScan(mc)
 SeqScan(kt)
 IndexScan(t)
 IndexScan(mi)
 SeqScan(mk)
 Leading((cn (it2 (it1 (k (mi_idx (ct (mc (kt (t (mi mk))))))))))) */
---------------------------------------
sql_str:  SELECT MIN(n.name) AS voicing_actress, MIN(t.title) AS jap_engl_voiced_movie FROM aka_name AS an, char_name AS chn, cast_info AS ci, company_name AS cn, info_type AS it, movie_companies AS mc, movie_info AS mi, name AS n, role_type AS rt, title AS t WHERE ci.note  in ('(voice)', '(voice: Japanese version)', '(voice) (uncredited)', '(voice: English version)') AND cn.country_code ='[us]' AND it.info  = 'release dates' AND n.gender ='f' AND rt.role ='actress' AND t.production_year  > 2000 AND t.id = mi.movie_id AND t.id = mc.movie_id AND t.id = ci.movie_id AND mc.movie_id = ci.movie_id AND mc.movie_id = mi.movie_id AND mi.movie_id = ci.movie_id AND cn.id = mc.company_id AND it.id = mi.info_type_id AND n.id = ci.person_id AND rt.id = ci.role_id AND n.id = an.person_id AND ci.person_id = an.person_id AND chn.id = ci.person_role_id;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 0 1 1 0 3 1 3 4 4 4 3 5 4 4 5]
indexes_env_matrix for this sql:  [ 1  2 19  2  3 18  3  4 17  4  5 16  5  6 15  6  7 14  7  8 13  8  9 10
  9  0  0 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0]
query_enc_matrix for this sql:  [1.         0.         0.         0.         0.0233155  1.
 0.         0.         0.36416635 0.         0.         0.
 0.         0.00884956 0.         0.         0.         0.
 0.         0.         0.         0.         0.         0.
 1.         0.         0.         1.         0.         0.
 0.         0.         0.         0.         0.         0.
 0.         0.         0.23576464 0.         0.         0.
 0.08333334 0.5407442  0.         0.        ]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  123.32963195443409
Other difference exceed the threshold, need to switch module.
the difference value is:  123.32963195443409
Hash difference exceed the threshold, need to switch module.
the difference value is:  123.32963195443409
Nested loop difference exceed the threshold, need to switch module.
Planning took 320.1ms
q23a_bao, predicted time: 2449.2
q23a_bao,(predicted 2449.2),/*+ NestLoop(rt ci t it mi mc cn n chn an)
 NestLoop(rt ci t it mi mc cn n chn)
 NestLoop(rt ci t it mi mc cn n)
 NestLoop(ci t it mi mc cn n)
 MergeJoin(ci t it mi mc cn)
 NestLoop(t it mi mc cn)
 NestLoop(t it mi mc)
 HashJoin(t it mi)
 NestLoop(it mi)
 SeqScan(rt)
 IndexScan(ci)
 IndexScan(t)
 IndexScan(it)
 IndexScan(mi)
 IndexScan(mc)
 IndexScan(cn)
 IndexScan(n)
 IndexScan(chn)
 IndexScan(an)
 Leading((((rt ((ci (((t (it mi)) mc) cn)) n)) chn) an)) */
---------------------------------------
sql_str:  SELECT MIN(kt.kind) AS movie_kind,
       MIN(t.title) AS complete_nerdy_internet_movie
FROM complete_cast AS cc,
     comp_cast_type AS cct1,
     company_name AS cn,
     company_type AS ct,
     info_type AS it1,
     keyword AS k,
     kind_type AS kt,
     movie_companies AS mc,
     movie_info AS mi,
     movie_keyword AS mk,
     title AS t
WHERE cct1.kind = 'complete+verified'
  AND cn.country_code = '[us]'
  AND it1.info = 'release dates'
  AND k.keyword IN ('nerd',
                    'loner',
                    'alienation',
                    'dignity')
  AND kt.kind IN ('movie')
  AND mi.note LIKE '%internet%'
  AND mi.info LIKE 'USA:% 200%'
  AND t.production_year > 2000
  AND kt.id = t.kind_id
  AND t.id = mi.movie_id
  AND t.id = mk.movie_id
  AND t.id = mc.movie_id
  AND t.id = cc.movie_id
  AND mk.movie_id = mi.movie_id
  AND mk.movie_id = mc.movie_id
  AND mk.movie_id = cc.movie_id
  AND mi.movie_id = mc.movie_id
  AND mi.movie_id = cc.movie_id
  AND mc.movie_id = cc.movie_id
  AND k.id = mk.keyword_id
  AND it1.id = mi.info_type_id
  AND cn.id = mc.company_id
  AND ct.id = mc.company_type_id
  AND cct1.id = cc.status_id
GROUP BY t.id
ORDER BY complete_nerdy_internet_movie;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 3 1 1 3 1 1 3 4 4 4 4 4 3 4 3]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7  8  7  0  0  8  9 16
  9 10 11 10  0  0 11 12 15 12 13 14 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 2.5000000e-01 0.0000000e+00 3.6416635e-01 0.0000000e+00
 0.0000000e+00 1.0000000e+00 1.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.9812923e-05
 1.4285715e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 3.1612890e-05 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.4074419e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  215.13459489101936
Other difference exceed the threshold, need to switch module.
the difference value is:  215.13459489101936
Hash difference exceed the threshold, need to switch module.
the difference value is:  215.13459489101936
Nested loop difference exceed the threshold, need to switch module.
Planning took 833.6ms
q23b_jobchanged, predicted time: 3.5
q23b_jobchanged,(predicted 3.5),/*+ MergeJoin(kt t cct1 mi cc mc k mk ct cn it1)
 MergeJoin(t cct1 mi cc mc k mk ct cn it1)
 MergeJoin(cct1 mi cc mc k mk ct cn it1)
 MergeJoin(mi cc mc k mk ct cn it1)
 MergeJoin(mi cc mc k mk ct cn)
 MergeJoin(cc mc k mk ct cn)
 MergeJoin(cc mc k mk ct)
 MergeJoin(mc k mk ct)
 MergeJoin(mc k mk)
 MergeJoin(k mk)
 IndexScan(kt)
 IndexScan(t)
 SeqScan(cct1)
 IndexScan(mi)
 IndexScan(cc)
 SeqScan(mc)
 IndexScan(k)
 SeqScan(mk)
 IndexScan(ct)
 SeqScan(cn)
 IndexScan(it1)
 Leading((kt (t (cct1 ((mi ((cc ((mc (k mk)) ct)) cn)) it1))))) */
---------------------------------------
sql_str:  SELECT
    MIN(n.name) AS voicing_actress,
    MIN(t.title) AS jap_engl_voiced_movie
FROM
    aka_name AS an,
    char_name AS chn,
    cast_info AS ci,
    company_name AS cn,
    info_type AS it,
    movie_companies AS mc,
    movie_info AS mi,
    name AS n,
    role_type AS rt,
    title AS t
WHERE
    ci.note in (
        '(voice: Japanese version)',
        '(voice) (uncredited)',
        '(voice: English version)'
    )
    AND cn.country_code = '[us]'
    AND it.info = 'release dates'
    AND n.gender = 'f'
    AND rt.role = 'actress'
    AND t.production_year > 2000
    AND t.id = mi.movie_id
    AND t.id = mc.movie_id
    AND t.id = ci.movie_id
    AND mc.movie_id = ci.movie_id
    AND mc.movie_id = mi.movie_id
    AND mi.movie_id = ci.movie_id
    AND cn.id = mc.company_id
    AND it.id = mi.info_type_id
    AND n.id = ci.person_id
    AND rt.id = ci.role_id
    AND n.id = an.person_id
    AND ci.person_id = an.person_id
    AND chn.id = ci.person_role_id
GROUP BY t.production_year, n.name, t.title
ORDER BY t.production_year, n.name, t.title;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 0 1 1 1 0 0 3 3 1 3 4 4 4 4 3 5 5]
indexes_env_matrix for this sql:  [ 1  2 19  2  3 18  3  4 17  4  5 16  5  6 15  6  7 14  7  8 11  8  9 10
  9  0  0 10  0  0 11 12 13 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0]
query_enc_matrix for this sql:  [1.         0.         0.         0.         0.0042634  1.
 0.         0.         0.36416635 0.         0.         0.
 0.         0.00884956 0.         0.         0.         0.
 0.         0.         0.         0.         0.         0.
 1.         0.         0.         1.         0.         0.
 0.         0.         0.         0.         0.         0.
 0.         0.         0.23576464 0.         0.         0.
 0.08333334 0.5407442  0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  223.3294866528619
Other difference exceed the threshold, need to switch module.
the difference value is:  223.3294866528619
Hash difference exceed the threshold, need to switch module.
the difference value is:  223.3294866528619
Nested loop difference exceed the threshold, need to switch module.
Planning took 336.6ms
q23c_baochanged, predicted time: 2434.6
q23c_baochanged,(predicted 2434.6),/*+ NestLoop(rt ci t it mi mc cn n chn an)
 NestLoop(rt ci t it mi mc cn n chn)
 NestLoop(rt ci t it mi mc cn n)
 NestLoop(ci t it mi mc cn n)
 MergeJoin(ci t it mi mc cn)
 NestLoop(t it mi mc cn)
 NestLoop(t it mi mc)
 HashJoin(t it mi)
 NestLoop(it mi)
 SeqScan(rt)
 IndexScan(ci)
 IndexScan(t)
 IndexScan(it)
 IndexScan(mi)
 IndexScan(mc)
 IndexScan(cn)
 IndexScan(n)
 IndexScan(chn)
 IndexScan(an)
 Leading((((rt ((ci (((t (it mi)) mc) cn)) n)) chn) an)) */
---------------------------------------
sql_str:  SELECT MIN(kt.kind) AS movie_kind,
       MIN(t.title) AS complete_us_internet_movie
FROM complete_cast AS cc,
     comp_cast_type AS cct1,
     company_name AS cn,
     company_type AS ct,
     info_type AS it1,
     keyword AS k,
     kind_type AS kt,
     movie_companies AS mc,
     movie_info AS mi,
     movie_keyword AS mk,
     title AS t
WHERE cct1.kind = 'complete+verified'
  AND cn.country_code = '[us]'
  AND it1.info = 'release dates'
  AND kt.kind IN ('movie',
                  'tv movie',
                  'video movie',
                  'video game')
  AND mi.note LIKE '%internet%'
  AND mi.info IS NOT NULL
  AND (mi.info LIKE 'USA:% 199%'
       OR mi.info LIKE 'USA:% 200%')
  AND t.production_year > 1990
  AND kt.id = t.kind_id
  AND t.id = mi.movie_id
  AND t.id = mk.movie_id
  AND t.id = mc.movie_id
  AND t.id = cc.movie_id
  AND mk.movie_id = mi.movie_id
  AND mk.movie_id = mc.movie_id
  AND mk.movie_id = cc.movie_id
  AND mi.movie_id = mc.movie_id
  AND mi.movie_id = cc.movie_id
  AND mc.movie_id = cc.movie_id
  AND k.id = mk.keyword_id
  AND it1.id = mi.info_type_id
  AND cn.id = mc.company_id
  AND ct.id = mc.company_type_id
  AND cct1.id = cc.status_id
GROUP BY t.id
ORDER BY complete_us_internet_movie;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 0 3 0 3 3 3 4 4 4 4 5 4 5]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 11 10  0  0 11 12 13 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 2.5000000e-01 0.0000000e+00 3.6416635e-01 0.0000000e+00
 0.0000000e+00 1.0000000e+00 1.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 5.7142860e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 3.7746737e-05 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.9064540e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  215.499042768364
Other difference exceed the threshold, need to switch module.
the difference value is:  215.499042768364
Hash difference exceed the threshold, need to switch module.
the difference value is:  215.499042768364
Nested loop difference exceed the threshold, need to switch module.
Planning took 962.8ms
q23c_jobchanged, predicted time: 3.0
q23c_jobchanged,(predicted 3.0),/*+ MergeJoin(cn mc ct mk mi it1 cc cct1 t k kt)
 MergeJoin(cn mc ct mk mi it1 cc cct1 t k)
 MergeJoin(cn mc ct mk mi it1 cc cct1 t)
 MergeJoin(mc ct mk mi it1 cc cct1 t)
 MergeJoin(mc ct mk mi it1 cc cct1)
 MergeJoin(mc ct mk mi it1 cc)
 MergeJoin(mc ct mk mi it1)
 MergeJoin(mc ct mk mi)
 MergeJoin(mk mi)
 MergeJoin(mc ct)
 SeqScan(cn)
 SeqScan(mc)
 IndexScan(ct)
 SeqScan(mk)
 IndexScan(mi)
 IndexScan(it1)
 IndexScan(cc)
 IndexScan(cct1)
 SeqScan(t)
 IndexScan(k)
 SeqScan(kt)
 Leading((((cn ((((((mc ct) (mk mi)) it1) cc) cct1) t)) k) kt)) */
---------------------------------------
sql_str:  SELECT MIN(lt.link) AS link_type, MIN(t1.title) AS first_movie, MIN(t2.title) AS second_movie FROM keyword AS k, link_type AS lt, movie_keyword AS mk, movie_link AS ml, title AS t1, title AS t2 WHERE k.keyword ='10,000-mile-club' AND mk.keyword_id = k.id AND t1.id = mk.movie_id AND ml.movie_id = t1.id AND ml.linked_movie_id = t2.id AND lt.id = ml.link_type_id AND mk.movie_id = t1.id;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 3 4 4 3 4 4]
indexes_env_matrix for this sql:  [ 1  2 11  2  3 10  3  4  9  4  5  8  5  6  7  6  0  0  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0]
query_enc_matrix for this sql:  [0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 7.453231e-06
 0.000000e+00 0.000000e+00 0.000000e+00 1.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 1.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 1.000000e+00
 1.000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  123.61241705292687
Other difference exceed the threshold, need to switch module.
the difference value is:  123.61241705292687
Hash difference exceed the threshold, need to switch module.
the difference value is:  123.61241705292687
Nested loop difference exceed the threshold, need to switch module.
Planning took 65.9ms
q24a_bao, predicted time: 13.2
q24a_bao,(predicted 13.2),/*+ MergeJoin(t2 ml lt t1 mk k)
 MergeJoin(t2 ml lt t1 mk)
 MergeJoin(t2 ml lt t1)
 MergeJoin(t2 ml lt)
 MergeJoin(t2 ml)
 IndexScan(t2)
 SeqScan(ml)
 SeqScan(lt)
 IndexScan(t1)
 IndexScan(mk)
 IndexScan(k)
 Leading((((((t2 ml) lt) t1) mk) k)) */
---------------------------------------
sql_str:  SELECT MIN(chn.name) AS voiced_char_name,
       MIN(n.name) AS voicing_actress_name,
       MIN(t.title) AS kung_fu_panda
FROM aka_name AS an,
     char_name AS chn,
     cast_info AS ci,
     company_name AS cn,
     info_type AS it,
     keyword AS k,
     movie_companies AS mc,
     movie_info AS mi,
     movie_keyword AS mk,
     name AS n,
     role_type AS rt,
     title AS t
WHERE ci.note IN ('(voice)',
                  '(voice: Japanese version)',
                  '(voice) (uncredited)',
                  '(voice: English version)')
  AND cn.country_code ='[us]'
  AND cn.name = 'DreamWorks Animation'
  AND it.info = 'release dates'
  AND k.keyword IN ('hero',
                    'martial-arts',
                    'hand-to-hand-combat',
                    'computer-animated-movie')
  AND mi.info IS NOT NULL
  AND (mi.info LIKE 'Japan:%201%'
       OR mi.info LIKE 'USA:%201%')
  AND n.gender ='f'
  AND n.name LIKE '%An%'
  AND rt.role ='actress'
  AND t.production_year > 2010
  AND t.title LIKE 'Kung Fu Panda%'
  AND t.id = mi.movie_id
  AND t.id = mc.movie_id
  AND t.id = ci.movie_id
  AND t.id = mk.movie_id
  AND mc.movie_id = ci.movie_id
  AND mc.movie_id = mi.movie_id
  AND mc.movie_id = mk.movie_id
  AND mi.movie_id = ci.movie_id
  AND mi.movie_id = mk.movie_id
  AND ci.movie_id = mk.movie_id
  AND cn.id = mc.company_id
  AND it.id = mi.info_type_id
  AND n.id = ci.person_id
  AND rt.id = ci.role_id
  AND n.id = an.person_id
  AND ci.person_id = an.person_id
  AND chn.id = ci.person_role_id
  AND k.id = mk.keyword_id
GROUP BY t.id
ORDER BY kung_fu_panda;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 1 1 1 1 3 4 4 4 4 5 4 4 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 23  2  3 22  3  4 21  4  5 20  5  6 19  6  7 18  7  8 17  8  9 16
  9 10 15 10 11 14 11 12 13 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.3315500e-02
 1.0000000e+00 0.0000000e+00 0.0000000e+00 4.2553734e-06 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.9812923e-05
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 1.0389991e-02 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 7.1443464e-03 0.0000000e+00
 0.0000000e+00 0.0000000e+00 8.3333336e-02 1.4634270e-05 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  210.2143511369471
Other difference exceed the threshold, need to switch module.
the difference value is:  210.2143511369471
Hash difference exceed the threshold, need to switch module.
the difference value is:  210.2143511369471
Nested loop difference exceed the threshold, need to switch module.
Planning took 1481.9ms
q24a_jobchanged, predicted time: 3.4
q24a_jobchanged,(predicted 3.4),/*+ MergeJoin(rt chn cn mc ci t mi mk n an it k)
 MergeJoin(chn cn mc ci t mi mk n an it k)
 MergeJoin(chn cn mc ci t mi mk n an it)
 MergeJoin(cn mc ci t mi mk n an it)
 MergeJoin(cn mc ci t mi mk n an)
 MergeJoin(mc ci t mi mk n an)
 MergeJoin(mc ci t mi mk n)
 MergeJoin(ci t mi mk n)
 MergeJoin(ci t mi mk)
 MergeJoin(t mi mk)
 MergeJoin(mi mk)
 SeqScan(rt)
 SeqScan(chn)
 SeqScan(cn)
 SeqScan(mc)
 IndexScan(ci)
 IndexScan(t)
 IndexScan(mi)
 SeqScan(mk)
 IndexScan(n)
 IndexScan(an)
 IndexScan(it)
 SeqScan(k)
 Leading((rt ((chn ((cn ((mc ((ci (t (mi mk))) n)) an)) it)) k))) */
---------------------------------------
sql_str:  SELECT MIN(chn.name) AS voiced_char_name,
       MIN(n.name) AS voicing_actress_name,
       MIN(t.title) AS voiced_action_movie_jap_eng
FROM aka_name AS an,
     char_name AS chn,
     cast_info AS ci,
     company_name AS cn,
     info_type AS it,
     keyword AS k,
     movie_companies AS mc,
     movie_info AS mi,
     movie_keyword AS mk,
     name AS n,
     role_type AS rt,
     title AS t
WHERE ci.note IN ('(voice)',
                  '(voice: Japanese version)',
                  '(voice) (uncredited)',
                  '(voice: English version)')
  AND cn.country_code ='[us]'
  AND it.info = 'release dates'
  AND k.keyword IN ('hero',
                    'martial-arts',
                    'hand-to-hand-combat')
  AND mi.info IS NOT NULL
  AND (mi.info LIKE 'Japan:%201%'
       OR mi.info LIKE 'USA:%201%')
  AND n.gender ='f'
  AND n.name LIKE '%An%'
  AND rt.role ='actress'
  AND t.production_year > 2010
  AND t.id = mi.movie_id
  AND t.id = mc.movie_id
  AND t.id = ci.movie_id
  AND t.id = mk.movie_id
  AND mc.movie_id = ci.movie_id
  AND mc.movie_id = mi.movie_id
  AND mc.movie_id = mk.movie_id
  AND mi.movie_id = ci.movie_id
  AND mi.movie_id = mk.movie_id
  AND ci.movie_id = mk.movie_id
  AND cn.id = mc.company_id
  AND it.id = mi.info_type_id
  AND n.id = ci.person_id
  AND rt.id = ci.role_id
  AND n.id = an.person_id
  AND ci.person_id = an.person_id
  AND chn.id = ci.person_role_id
  AND k.id = mk.keyword_id
GROUP BY t.id
ORDER BY voiced_action_movie_jap_eng;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 3 1 1 1 1 1 3 4 4 4 4 4 4 4 5 4 3]
indexes_env_matrix for this sql:  [ 1  2 23  2  3 22  3  4 21  4  5 20  5  6 19  6  7  8  7  0  0  8  9 18
  9 10 17 10 11 16 11 12 15 12 13 14 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.3315500e-02
 1.0000000e+00 0.0000000e+00 0.0000000e+00 3.6416635e-01 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.2359693e-05
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 1.0389991e-02 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 7.1443464e-03 0.0000000e+00
 0.0000000e+00 0.0000000e+00 8.3333336e-02 1.5569755e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  216.78283774403536
Other difference exceed the threshold, need to switch module.
the difference value is:  216.78283774403536
Hash difference exceed the threshold, need to switch module.
the difference value is:  216.78283774403536
Nested loop difference exceed the threshold, need to switch module.
Planning took 236.3ms
q24b_jobchanged, predicted time: 9.5
q24b_jobchanged,(predicted 9.5),/*+ MergeJoin(cn mc ci n t rt mi it an mk k chn)
 MergeJoin(cn mc ci n t rt mi it an mk k)
 MergeJoin(cn mc ci n t rt mi it an mk)
 MergeJoin(cn mc ci n t rt mi it an)
 MergeJoin(cn mc ci n t rt mi it)
 MergeJoin(mc ci n t rt mi it)
 MergeJoin(ci n t rt mi it)
 MergeJoin(ci n t rt mi)
 MergeJoin(ci n t rt)
 MergeJoin(ci n t)
 MergeJoin(ci n)
 SeqScan(cn)
 SeqScan(mc)
 IndexScan(ci)
 SeqScan(n)
 IndexScan(t)
 SeqScan(rt)
 SeqScan(mi)
 SeqScan(it)
 SeqScan(an)
 IndexScan(mk)
 IndexScan(k)
 SeqScan(chn)
 Leading((((((cn (mc (((((ci n) t) rt) mi) it))) an) mk) k) chn)) */
---------------------------------------
sql_str:  SELECT
    MIN(lt.link) AS link_type,
    MAX(t1.title) AS first_movie,
    MAX(t2.title) AS second_movie
FROM
    keyword AS k,
    link_type AS lt,
    movie_keyword AS mk,
    movie_link AS ml,
    title AS t1,
    title AS t2
WHERE
    k.keyword = '10,000-mile-club'
    AND mk.keyword_id = k.id
    AND t1.id = mk.movie_id
    AND ml.movie_id = t1.id
    AND ml.linked_movie_id = t2.id
    AND lt.id = ml.link_type_id
    AND mk.movie_id = t1.id
GROUP BY lt.id, t1.id, t2.id
ORDER BY lt.id, t1.id, t2.id;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 3 4 4 3 4 4]
indexes_env_matrix for this sql:  [ 1  2 11  2  3 10  3  4  9  4  5  8  5  6  7  6  0  0  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0]
query_enc_matrix for this sql:  [0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 7.453231e-06
 0.000000e+00 0.000000e+00 0.000000e+00 1.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 1.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 1.000000e+00
 1.000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  223.53193495510882
Other difference exceed the threshold, need to switch module.
the difference value is:  223.53193495510882
Hash difference exceed the threshold, need to switch module.
the difference value is:  223.53193495510882
Nested loop difference exceed the threshold, need to switch module.
Planning took 101.5ms
q24c_baochanged, predicted time: 4.8
q24c_baochanged,(predicted 4.8),/*+ MergeJoin(ml t1 mk lt k t2)
 MergeJoin(ml t1 mk lt k)
 MergeJoin(ml t1 mk lt)
 MergeJoin(ml t1 mk)
 MergeJoin(t1 mk)
 IndexScan(ml)
 SeqScan(t1)
 SeqScan(mk)
 SeqScan(lt)
 IndexScan(k)
 IndexScan(t2)
 Leading(((((ml (t1 mk)) lt) k) t2)) */
---------------------------------------
sql_str:  SELECT MIN(cn.name) AS producing_company, MIN(miidx.info) AS rating, MIN(t.title) AS movie FROM company_name AS cn, company_type AS ct, info_type AS it, info_type AS it2, kind_type AS kt, movie_companies AS mc, movie_info AS mi, movie_info_idx AS miidx, title AS t WHERE cn.country_code ='[us]' AND ct.kind ='production companies' AND it.info ='rating' AND it2.info ='release dates' AND kt.kind ='movie' AND mi.movie_id = t.id AND it2.id = mi.info_type_id AND kt.id = t.kind_id AND mc.movie_id = t.id AND cn.id = mc.company_id AND ct.id = mc.company_type_id AND miidx.movie_id = t.id AND it.id = miidx.info_type_id AND mi.movie_id = miidx.movie_id AND mi.movie_id = mc.movie_id AND miidx.movie_id = mc.movie_id;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [0 1 1 0 1 0 1 0 3 3 4 3 4 3 4 4 3]
indexes_env_matrix for this sql:  [ 1  2 17  2  3 16  3  4 15  4  5 14  5  6 13  6  7 12  7  8 11  8  9 10
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0]
query_enc_matrix for this sql:  [0.         0.         0.         0.         0.         0.
 0.         0.         0.36416635 0.         0.         0.25
 0.         0.00884956 0.         0.00884956 0.         0.
 0.         0.         0.14285715 0.         0.         0.
 1.         0.         0.         1.         0.         0.
 0.         0.         0.         0.         0.         1.
 0.         0.         0.         0.         0.         0.
 0.         1.         0.         0.        ]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  127.67314137925501
Other difference exceed the threshold, need to switch module.
the difference value is:  127.67314137925501
Hash difference exceed the threshold, need to switch module.
the difference value is:  127.67314137925501
Nested loop difference exceed the threshold, need to switch module.
Planning took 157.1ms
q25a_bao, predicted time: 2300.8
q25a_bao,(predicted 2300.8),/*+ MergeJoin(ct mc miidx kt mi it2 t it cn)
 MergeJoin(mc miidx kt mi it2 t it cn)
 MergeJoin(mc miidx kt mi it2 t it)
 MergeJoin(miidx kt mi it2 t it)
 MergeJoin(miidx kt mi it2 t)
 NestLoop(kt mi it2 t)
 NestLoop(mi it2 t)
 HashJoin(mi it2)
 SeqScan(ct)
 IndexScan(mc)
 SeqScan(miidx)
 SeqScan(kt)
 IndexScan(mi)
 IndexScan(it2)
 IndexScan(t)
 SeqScan(it)
 SeqScan(cn)
 Leading((ct ((mc ((miidx (kt ((mi it2) t))) it)) cn))) */
---------------------------------------
sql_str:  SELECT MIN(mi.info) AS movie_budget,
       MIN(mi_idx.info) AS movie_votes,
       MIN(n.name) AS male_writer,
       MIN(t.title) AS violent_movie_title
FROM cast_info AS ci,
     info_type AS it1,
     info_type AS it2,
     keyword AS k,
     movie_info AS mi,
     movie_info_idx AS mi_idx,
     movie_keyword AS mk,
     name AS n,
     title AS t
WHERE ci.note IN ('(writer)',
                  '(head writer)',
                  '(written by)',
                  '(story)',
                  '(story editor)')
  AND it1.info = 'genres'
  AND it2.info = 'votes'
  AND k.keyword IN ('murder',
                    'blood',
                    'gore',
                    'death',
                    'female-nudity')
  AND mi.info = 'Horror'
  AND n.gender = 'm'
  AND t.production_year > 2010
  AND t.title LIKE 'Vampire%'
  AND t.id = mi.movie_id
  AND t.id = mi_idx.movie_id
  AND t.id = ci.movie_id
  AND t.id = mk.movie_id
  AND ci.movie_id = mi.movie_id
  AND ci.movie_id = mi_idx.movie_id
  AND ci.movie_id = mk.movie_id
  AND mi.movie_id = mi_idx.movie_id
  AND mi.movie_id = mk.movie_id
  AND mi_idx.movie_id = mk.movie_id
  AND n.id = ci.person_id
  AND it1.id = mi.info_type_id
  AND it2.id = mi_idx.info_type_id
  AND k.id = mk.keyword_id
GROUP BY t.id
ORDER BY violent_movie_title;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 1 4 4 4 4 4 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 17  2  3 16  3  4 15  4  5 14  5  6 13  6  7 12  7  8 11  8  9 10
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 3.2974772e-02
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 3.7266156e-05
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 2.3380732e-03 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 4.1559657e-01 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.4634270e-05 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  216.46960760204297
Other difference exceed the threshold, need to switch module.
the difference value is:  216.46960760204297
Hash difference exceed the threshold, need to switch module.
the difference value is:  216.46960760204297
Nested loop difference exceed the threshold, need to switch module.
Planning took 322.8ms
q25b_jobchanged, predicted time: 3.9
q25b_jobchanged,(predicted 3.9),/*+ MergeJoin(k it2 n ci t mi mk mi_idx it1)
 MergeJoin(it2 n ci t mi mk mi_idx it1)
 MergeJoin(n ci t mi mk mi_idx it1)
 MergeJoin(n ci t mi mk mi_idx)
 MergeJoin(ci t mi mk mi_idx)
 MergeJoin(ci t mi mk)
 MergeJoin(t mi mk)
 MergeJoin(mi mk)
 IndexScan(k)
 IndexScan(it2)
 IndexScan(n)
 SeqScan(ci)
 IndexScan(t)
 IndexScan(mi)
 SeqScan(mk)
 SeqScan(mi_idx)
 SeqScan(it1)
 Leading((k (it2 ((n ((ci (t (mi mk))) mi_idx)) it1)))) */
---------------------------------------
sql_str:  SELECT
    MIN(cn.name) AS producing_company,
    MIN(miidx.info) AS rating,
    MIN(t.title) AS movie
FROM
    company_name AS cn,
    company_type AS ct,
    info_type AS it,
    info_type AS it2,
    kind_type AS kt,
    movie_companies AS mc,
    movie_info AS mi,
    movie_info_idx AS miidx,
    title AS t
WHERE
    cn.country_code = '[uk]'
    AND ct.kind = 'production companies'
    AND it.info = 'rating'
    AND it2.info = 'release dates'
    AND kt.kind = 'movie'
    AND mi.movie_id = t.id
    AND it2.id = mi.info_type_id
    AND kt.id = t.kind_id
    AND mc.movie_id = t.id
    AND cn.id = mc.company_id
    AND ct.id = mc.company_type_id
    AND miidx.movie_id = t.id
    AND it.id = miidx.info_type_id
    AND mi.movie_id = miidx.movie_id
    AND mi.movie_id = mc.movie_id
    AND miidx.movie_id = mc.movie_id
GROUP BY t.production_year, cn.name, t.title
ORDER BY t.production_year, cn.name, t.title;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 0 1 0 1 3 4 3 4 3 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 17  2  3 16  3  4 15  4  5 14  5  6 13  6  7 12  7  8 11  8  9 10
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 9.3618219e-05 0.0000000e+00
 0.0000000e+00 2.5000000e-01 0.0000000e+00 8.8495575e-03 0.0000000e+00
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.4285715e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  225.54851301136492
Other difference exceed the threshold, need to switch module.
the difference value is:  225.54851301136492
Hash difference exceed the threshold, need to switch module.
the difference value is:  225.54851301136492
Nested loop difference exceed the threshold, need to switch module.
Planning took 137.2ms
q25c_baochanged, predicted time: 2116.3
q25c_baochanged,(predicted 2116.3),/*+ MergeJoin(ct miidx kt mi it2 t it mc cn)
 MergeJoin(miidx kt mi it2 t it mc cn)
 MergeJoin(miidx kt mi it2 t it mc)
 MergeJoin(miidx kt mi it2 t it)
 MergeJoin(miidx kt mi it2 t)
 NestLoop(kt mi it2 t)
 NestLoop(mi it2 t)
 HashJoin(mi it2)
 SeqScan(ct)
 SeqScan(miidx)
 SeqScan(kt)
 IndexScan(mi)
 IndexScan(it2)
 IndexScan(t)
 SeqScan(it)
 IndexScan(mc)
 SeqScan(cn)
 Leading((ct ((((miidx (kt ((mi it2) t))) it) mc) cn))) */
---------------------------------------
sql_str:  SELECT MIN(mi.info) AS movie_budget,
       MIN(mi_idx.info) AS movie_votes,
       MIN(n.name) AS male_writer,
       MIN(t.title) AS violent_movie_title
FROM cast_info AS ci,
     info_type AS it1,
     info_type AS it2,
     keyword AS k,
     movie_info AS mi,
     movie_info_idx AS mi_idx,
     movie_keyword AS mk,
     name AS n,
     title AS t
WHERE ci.note IN ('(writer)',
                  '(head writer)',
                  '(written by)',
                  '(story)',
                  '(story editor)')
  AND it1.info = 'genres'
  AND it2.info = 'votes'
  AND k.keyword IN ('murder',
                    'violence',
                    'blood',
                    'gore',
                    'death',
                    'female-nudity',
                    'hospital')
  AND mi.info IN ('Horror',
                  'Action',
                  'Sci-Fi',
                  'Thriller',
                  'Crime',
                  'War')
  AND n.gender = 'm'
  AND t.id = mi.movie_id
  AND t.id = mi_idx.movie_id
  AND t.id = ci.movie_id
  AND t.id = mk.movie_id
  AND ci.movie_id = mi.movie_id
  AND ci.movie_id = mi_idx.movie_id
  AND ci.movie_id = mk.movie_id
  AND mi.movie_id = mi_idx.movie_id
  AND mi.movie_id = mk.movie_id
  AND mi_idx.movie_id = mk.movie_id
  AND n.id = ci.person_id
  AND it1.id = mi.info_type_id
  AND it2.id = mi_idx.info_type_id
  AND k.id = mk.keyword_id
GROUP BY t.id
ORDER BY violent_movie_title;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 0 1 1 4 4 4 3 4 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 17  2  3 16  3  4 15  4  5 14  5  6 13  6  7 12  7  8 11  8  9 10
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 3.2974772e-02
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.2172618e-05
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 1.4061670e-02 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 4.1559657e-01 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  216.45976163331278
Other difference exceed the threshold, need to switch module.
the difference value is:  216.45976163331278
Hash difference exceed the threshold, need to switch module.
the difference value is:  216.45976163331278
Nested loop difference exceed the threshold, need to switch module.
Planning took 180.4ms
q25c_jobchanged, predicted time: 3.8
q25c_jobchanged,(predicted 3.8),/*+ MergeJoin(n k it2 ci t mi mk mi_idx it1)
 MergeJoin(k it2 ci t mi mk mi_idx it1)
 MergeJoin(it2 ci t mi mk mi_idx it1)
 MergeJoin(it2 ci t mi mk mi_idx)
 MergeJoin(ci t mi mk mi_idx)
 MergeJoin(ci t mi mk)
 MergeJoin(t mi mk)
 MergeJoin(mi mk)
 SeqScan(n)
 IndexScan(k)
 SeqScan(it2)
 SeqScan(ci)
 IndexScan(t)
 IndexScan(mi)
 SeqScan(mk)
 IndexScan(mi_idx)
 SeqScan(it1)
 Leading((n (k ((it2 ((ci (t (mi mk))) mi_idx)) it1)))) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('8'))
AND (it2.id in ('2'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('Austria','Belgium','Brazil','Denmark','France','Mexico','Spain','UK','USA','Yugoslavia'))
AND (mi2.info in ('Black and White','Color'))
AND (kt.kind in ('episode','movie','tv movie'))
AND (rt.role in ('editor','writer'))
AND (n.gender in ('f','m'))
AND (t.production_year <= 1975)
AND (t.production_year >= 1875)

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 3 1 3 1 1 1 0 1 1 0 3 0 3 3 4 4 3 4 4 5]
indexes_env_matrix for this sql:  [ 1  2  3  2  0  0  3  4  5  4  0  0  5  6 21  6  7 20  7  8 19  8  9 18
  9 10 17 10 11 16 11 12 13 12  0  0 13 14 15 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.         0.         0.         0.         1.         0.
 0.         0.         0.         0.         0.         0.
 0.         0.         0.00884956 0.00884956 0.         0.
 0.         1.         0.42857143 0.         0.         0.
 0.         0.         0.         0.         0.00522624 0.00829464
 0.         0.         0.         0.         0.         0.
 1.         0.         0.65136147 0.         0.         0.
 0.16666667 0.18108603 0.         0.        ]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  124.67480280934055
Other difference exceed the threshold, need to switch module.
the difference value is:  124.67480280934055
Hash difference exceed the threshold, need to switch module.
the difference value is:  124.67480280934055
Nested loop difference exceed the threshold, need to switch module.
Planning took 1334.5ms
q26a_bao, predicted time: 31.6
q26a_bao,(predicted 31.6),/*+ MergeJoin(mi2 t kt mk k it2 mi1 it1 ci rt n)
 MergeJoin(mi2 t kt mk k it2 mi1 it1 ci rt)
 MergeJoin(mi2 t kt mk k it2 mi1 it1 ci)
 MergeJoin(mi2 t kt mk k it2 mi1 it1)
 MergeJoin(mi2 t kt mk k it2 mi1)
 MergeJoin(mi2 t kt mk k it2)
 MergeJoin(mi2 t kt mk k)
 MergeJoin(mi2 t kt mk)
 MergeJoin(t kt mk)
 MergeJoin(t kt)
 SeqScan(mi2)
 IndexScan(t)
 IndexScan(kt)
 IndexScan(mk)
 SeqScan(k)
 SeqScan(it2)
 IndexScan(mi1)
 IndexScan(it1)
 SeqScan(ci)
 SeqScan(rt)
 IndexScan(n)
 Leading(((((((((mi2 ((t kt) mk)) k) it2) mi1) it1) ci) rt) n)) */
---------------------------------------
sql_str:  SELECT MIN(chn.name) AS character_name,
       MIN(mi_idx.info) AS rating,
       MIN(t.title) AS complete_hero_movie
FROM complete_cast AS cc,
     comp_cast_type AS cct1,
     comp_cast_type AS cct2,
     char_name AS chn,
     cast_info AS ci,
     info_type AS it2,
     keyword AS k,
     kind_type AS kt,
     movie_info_idx AS mi_idx,
     movie_keyword AS mk,
     name AS n,
     title AS t
WHERE cct1.kind = 'cast'
  AND cct2.kind LIKE '%complete%'
  AND chn.name IS NOT NULL
  AND (chn.name LIKE '%man%'
       OR chn.name LIKE '%Man%')
  AND it2.info = 'rating'
  AND k.keyword IN ('superhero',
                    'marvel-comics',
                    'based-on-comic',
                    'tv-special',
                    'fight',
                    'violence',
                    'magnet',
                    'web',
                    'claw',
                    'laser')
  AND kt.kind = 'movie'
  AND t.production_year > 2000
  AND kt.id = t.kind_id
  AND t.id = mk.movie_id
  AND t.id = ci.movie_id
  AND t.id = cc.movie_id
  AND t.id = mi_idx.movie_id
  AND mk.movie_id = ci.movie_id
  AND mk.movie_id = cc.movie_id
  AND mk.movie_id = mi_idx.movie_id
  AND ci.movie_id = cc.movie_id
  AND ci.movie_id = mi_idx.movie_id
  AND cc.movie_id = mi_idx.movie_id
  AND chn.id = ci.person_role_id
  AND n.id = ci.person_id
  AND k.id = mk.keyword_id
  AND cct1.id = cc.subject_id
  AND cct2.id = cc.status_id
  AND it2.id = mi_idx.info_type_id
GROUP BY t.id
ORDER BY complete_hero_movie;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 3 1 1 3 1 1 3 1 1 3 4 4 4 4 4 4 5 3]
indexes_env_matrix for this sql:  [ 1  2 23  2  3 22  3  4 21  4  5 20  5  6  7  6  0  0  7  8 19  8  9 10
  9  0  0 10 11 18 11 12 13 12  0  0 13 14 17 14 15 16 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 4.0098857e-02 2.5000000e-01 2.5000000e-01 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 7.4532312e-05
 1.4285715e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.4074419e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  207.7066378612161
Other difference exceed the threshold, need to switch module.
the difference value is:  207.7066378612161
Hash difference exceed the threshold, need to switch module.
the difference value is:  207.7066378612161
Nested loop difference exceed the threshold, need to switch module.
Planning took 1022.5ms
q26b_jobchanged, predicted time: 7.2
q26b_jobchanged,(predicted 7.2),/*+ MergeJoin(cct1 n cct2 chn cc ci k it2 mi_idx t mk kt)
 MergeJoin(n cct2 chn cc ci k it2 mi_idx t mk kt)
 MergeJoin(cct2 chn cc ci k it2 mi_idx t mk kt)
 MergeJoin(chn cc ci k it2 mi_idx t mk kt)
 MergeJoin(cc ci k it2 mi_idx t mk kt)
 MergeJoin(ci k it2 mi_idx t mk kt)
 MergeJoin(k it2 mi_idx t mk kt)
 MergeJoin(it2 mi_idx t mk kt)
 MergeJoin(mi_idx t mk kt)
 MergeJoin(mi_idx t mk)
 MergeJoin(t mk)
 IndexScan(cct1)
 IndexScan(n)
 IndexScan(cct2)
 SeqScan(chn)
 SeqScan(cc)
 SeqScan(ci)
 SeqScan(k)
 IndexScan(it2)
 IndexScan(mi_idx)
 SeqScan(t)
 SeqScan(mk)
 IndexScan(kt)
 Leading((cct1 (n (cct2 (chn (cc (ci (k (it2 ((mi_idx (t mk)) kt)))))))))) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('8'))
AND (it2.id in ('2'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('Brazil','Denmark','France','Mexico','Spain','UK','USA','Yugoslavia'))
AND (mi2.info in ('Black and White','Color'))
AND (kt.kind in ('episode','movie','tv movie'))
AND (rt.role in ('editor','writer'))
AND (n.gender in ('f','m'))
AND (t.production_year <= 1975)
AND (t.production_year >= 1875)
GROUP BY t.production_year, kt.kind, n.name
ORDER BY t.production_year, kt.kind, n.name;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 3 1 3 1 1 1 0 1 1 0 3 0 3 3 4 4 3 4 4 5]
indexes_env_matrix for this sql:  [ 1  2  3  2  0  0  3  4  5  4  0  0  5  6 21  6  7 20  7  8 19  8  9 18
  9 10 17 10 11 16 11 12 13 12  0  0 13 14 15 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.         0.         0.         0.         1.         0.
 0.         0.         0.         0.         0.         0.
 0.         0.         0.00884956 0.00884956 0.         0.
 0.         1.         0.42857143 0.         0.         0.
 0.         0.         0.         0.         0.00514872 0.00829464
 0.         0.         0.         0.         0.         0.
 1.         0.         0.65136147 0.         0.         0.
 0.16666667 0.18108603 0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  224.67480766138573
Other difference exceed the threshold, need to switch module.
the difference value is:  224.67480766138573
Hash difference exceed the threshold, need to switch module.
the difference value is:  224.67480766138573
Nested loop difference exceed the threshold, need to switch module.
Planning took 1309.2ms
q26c_baochanged, predicted time: 31.6
q26c_baochanged,(predicted 31.6),/*+ MergeJoin(mi2 t kt mk k it2 mi1 it1 ci rt n)
 MergeJoin(mi2 t kt mk k it2 mi1 it1 ci rt)
 MergeJoin(mi2 t kt mk k it2 mi1 it1 ci)
 MergeJoin(mi2 t kt mk k it2 mi1 it1)
 MergeJoin(mi2 t kt mk k it2 mi1)
 MergeJoin(mi2 t kt mk k it2)
 MergeJoin(mi2 t kt mk k)
 MergeJoin(mi2 t kt mk)
 MergeJoin(t kt mk)
 MergeJoin(t kt)
 SeqScan(mi2)
 IndexScan(t)
 IndexScan(kt)
 IndexScan(mk)
 SeqScan(k)
 SeqScan(it2)
 IndexScan(mi1)
 IndexScan(it1)
 SeqScan(ci)
 SeqScan(rt)
 IndexScan(n)
 Leading(((((((((mi2 ((t kt) mk)) k) it2) mi1) it1) ci) rt) n)) */
---------------------------------------
sql_str:  SELECT MIN(chn.name) AS character_name,
       MIN(mi_idx.info) AS rating,
       MIN(t.title) AS complete_hero_movie
FROM complete_cast AS cc,
     comp_cast_type AS cct1,
     comp_cast_type AS cct2,
     char_name AS chn,
     cast_info AS ci,
     info_type AS it2,
     keyword AS k,
     kind_type AS kt,
     movie_info_idx AS mi_idx,
     movie_keyword AS mk,
     name AS n,
     title AS t
WHERE cct1.kind = 'cast'
  AND cct2.kind LIKE '%complete%'
  AND chn.name IS NOT NULL
  AND (chn.name LIKE '%man%'
       OR chn.name LIKE '%Man%')
  AND it2.info = 'rating'
  AND k.keyword IN ('superhero',
                    'marvel-comics',
                    'based-on-comic',
                    'fight')
  AND kt.kind = 'movie'
  AND mi_idx.info > '8.0'
  AND t.production_year > 2005
  AND kt.id = t.kind_id
  AND t.id = mk.movie_id
  AND t.id = ci.movie_id
  AND t.id = cc.movie_id
  AND t.id = mi_idx.movie_id
  AND mk.movie_id = ci.movie_id
  AND mk.movie_id = cc.movie_id
  AND mk.movie_id = mi_idx.movie_id
  AND ci.movie_id = cc.movie_id
  AND ci.movie_id = mi_idx.movie_id
  AND cc.movie_id = mi_idx.movie_id
  AND chn.id = ci.person_role_id
  AND n.id = ci.person_id
  AND k.id = mk.keyword_id
  AND cct1.id = cc.subject_id
  AND cct2.id = cc.status_id
  AND it2.id = mi_idx.info_type_id
GROUP BY t.id
ORDER BY complete_hero_movie;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 3 1 3 1 1 1 1 1 1 1 3 1 1 3 4 4 4 3 4 4 5 4]
indexes_env_matrix for this sql:  [ 1  2  3  2  0  0  3  4  5  4  0  0  5  6 23  6  7 22  7  8 21  8  9 20
  9 10 19 10 11 18 11 12 13 12  0  0 13 14 17 14 15 16 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 4.0098857e-02 2.5000000e-01 2.5000000e-01 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.9812923e-05
 1.4285715e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 3.8978722e-02 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 3.9825663e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  210.93631259474913
Other difference exceed the threshold, need to switch module.
the difference value is:  210.93631259474913
Hash difference exceed the threshold, need to switch module.
the difference value is:  210.93631259474913
Nested loop difference exceed the threshold, need to switch module.
Planning took 831.7ms
q26c_jobchanged, predicted time: 8.6
q26c_jobchanged,(predicted 8.6),/*+ MergeJoin(cct2 it2 cct1 k n cc ci kt mi_idx mk t chn)
 MergeJoin(it2 cct1 k n cc ci kt mi_idx mk t chn)
 MergeJoin(cct1 k n cc ci kt mi_idx mk t chn)
 MergeJoin(k n cc ci kt mi_idx mk t chn)
 MergeJoin(n cc ci kt mi_idx mk t chn)
 MergeJoin(cc ci kt mi_idx mk t chn)
 MergeJoin(ci kt mi_idx mk t chn)
 MergeJoin(ci kt mi_idx mk t)
 MergeJoin(kt mi_idx mk t)
 MergeJoin(mi_idx mk t)
 MergeJoin(mk t)
 IndexScan(cct2)
 IndexScan(it2)
 IndexScan(cct1)
 SeqScan(k)
 IndexScan(n)
 SeqScan(cc)
 SeqScan(ci)
 SeqScan(kt)
 IndexScan(mi_idx)
 SeqScan(mk)
 SeqScan(t)
 SeqScan(chn)
 Leading((cct2 (it2 (cct1 (k (n (cc ((ci (kt (mi_idx (mk t)))) chn)))))))) */
---------------------------------------
sql_str:  SELECT MIN(t.title) AS movie_title FROM keyword AS k, movie_info AS mi, movie_keyword AS mk, title AS t WHERE k.keyword  like '%sequel%' AND mi.info  IN ('Sweden', 'Norway', 'Germany', 'Denmark', 'Swedish', 'Denish', 'Norwegian', 'German', 'USA', 'American') AND t.production_year > 1990 AND t.id = mi.movie_id AND t.id = mk.movie_id AND mk.movie_id = mi.movie_id AND k.id = mk.keyword_id;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 3 4 4 4]
indexes_env_matrix for this sql:  [1 2 7 2 3 6 3 4 5 4 0 0 5 0 0 6 0 0 7 0 0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 9.6891999e-05
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 4.6758972e-02 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.9064540e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  129.26695722789052
Other difference exceed the threshold, need to switch module.
the difference value is:  129.26695722789052
Hash difference exceed the threshold, need to switch module.
the difference value is:  129.26695722789052
Nested loop difference exceed the threshold, need to switch module.
Planning took 80.2ms
q27a_bao, predicted time: 18.1
q27a_bao,(predicted 18.1),/*+ MergeJoin(mi t mk k)
 MergeJoin(mi t mk)
 MergeJoin(mi t)
 SeqScan(mi)
 IndexScan(t)
 IndexScan(mk)
 IndexScan(k)
 Leading((((mi t) mk) k)) */
---------------------------------------
sql_str:  SELECT MIN(cn.name) AS producing_company,
       MIN(lt.link) AS link_type,
       MIN(t.title) AS complete_western_sequel
FROM complete_cast AS cc,
     comp_cast_type AS cct1,
     comp_cast_type AS cct2,
     company_name AS cn,
     company_type AS ct,
     keyword AS k,
     link_type AS lt,
     movie_companies AS mc,
     movie_info AS mi,
     movie_keyword AS mk,
     movie_link AS ml,
     title AS t
WHERE cct1.kind IN ('cast',
                    'crew')
  AND cct2.kind = 'complete'
  AND cn.country_code !='[pl]'
  AND (cn.name LIKE '%Film%'
       OR cn.name LIKE '%Warner%')
  AND ct.kind ='production companies'
  AND k.keyword ='sequel'
  AND lt.link LIKE '%follow%'
  AND mc.note IS NULL
  AND mi.info IN ('Sweden',
                  'Germany',
                  'Swedish',
                  'German')
  AND t.production_year = 1998
  AND lt.id = ml.link_type_id
  AND ml.movie_id = t.id
  AND t.id = mk.movie_id
  AND mk.keyword_id = k.id
  AND t.id = mc.movie_id
  AND mc.company_type_id = ct.id
  AND mc.company_id = cn.id
  AND mi.movie_id = t.id
  AND t.id = cc.movie_id
  AND cct1.id = cc.subject_id
  AND cct2.id = cc.status_id
  AND ml.movie_id = mk.movie_id
  AND ml.movie_id = mc.movie_id
  AND mk.movie_id = mc.movie_id
  AND ml.movie_id = mi.movie_id
  AND mk.movie_id = mi.movie_id
  AND mc.movie_id = mi.movie_id
  AND ml.movie_id = cc.movie_id
  AND mk.movie_id = cc.movie_id
  AND mc.movie_id = cc.movie_id
  AND mi.movie_id = cc.movie_id
GROUP BY t.id
ORDER BY complete_western_sequel;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 1 0 2 1 4 3 4 3 3 4 4 4 4 4 4 3]
indexes_env_matrix for this sql:  [ 1  2 23  2  3 22  3  4 21  4  5 20  5  6 19  6  7 18  7  8 17  8  9 16
  9 10 15 10 11 14 11 12 13 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 5.0000000e-01 2.5000000e-01 2.5243300e-01 0.0000000e+00
 0.0000000e+00 2.5000000e-01 1.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 7.4532309e-06
 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.5555556e-02 4.8620018e-01
 0.0000000e+00 0.0000000e+00 9.0445224e-03 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.9534377e-02 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  208.28380363116855
Other difference exceed the threshold, need to switch module.
the difference value is:  208.28380363116855
Hash difference exceed the threshold, need to switch module.
the difference value is:  208.28380363116855
Nested loop difference exceed the threshold, need to switch module.
Planning took 726.9ms
q27b_jobchanged, predicted time: 3.4
q27b_jobchanged,(predicted 3.4),/*+ MergeJoin(cct2 ct lt mc ml t mi mk cn k cc cct1)
 MergeJoin(ct lt mc ml t mi mk cn k cc cct1)
 MergeJoin(ct lt mc ml t mi mk cn k cc)
 MergeJoin(lt mc ml t mi mk cn k cc)
 MergeJoin(lt mc ml t mi mk cn k)
 MergeJoin(mc ml t mi mk cn k)
 MergeJoin(mc ml t mi mk cn)
 MergeJoin(mc ml t mi mk)
 MergeJoin(ml t mi mk)
 MergeJoin(t mi mk)
 MergeJoin(mi mk)
 IndexScan(cct2)
 IndexScan(ct)
 IndexScan(lt)
 SeqScan(mc)
 IndexScan(ml)
 IndexScan(t)
 IndexScan(mi)
 SeqScan(mk)
 SeqScan(cn)
 SeqScan(k)
 SeqScan(cc)
 IndexScan(cct1)
 Leading((cct2 ((ct ((lt (((mc (ml (t (mi mk)))) cn) k)) cc)) cct1))) */
---------------------------------------
sql_str:  SELECT
    MIN(t.title) AS movie_title
FROM
    keyword AS k,
    movie_info AS mi,
    movie_keyword AS mk,
    title AS t
WHERE
    k.keyword like '%sequel%'
    AND mi.info IN ('German', 'USA', 'American')
    AND t.production_year > 1970
    AND t.id = mi.movie_id
    AND t.id = mk.movie_id
    AND mk.movie_id = mi.movie_id
    AND k.id = mk.keyword_id
GROUP BY t.production_year, mi.info
ORDER BY t.production_year, mi.info;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 3 4 4 4]
indexes_env_matrix for this sql:  [1 2 7 2 3 6 3 4 5 4 0 0 5 0 0 6 0 0 7 0 0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 9.6891999e-05
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 4.1476518e-02 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.1870550e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  229.27039401678832
Other difference exceed the threshold, need to switch module.
the difference value is:  229.27039401678832
Hash difference exceed the threshold, need to switch module.
the difference value is:  229.27039401678832
Nested loop difference exceed the threshold, need to switch module.
Planning took 81.6ms
q27c_baochanged, predicted time: 19.3
q27c_baochanged,(predicted 19.3),/*+ MergeJoin(mi t mk k)
 MergeJoin(mi t mk)
 MergeJoin(mi t)
 SeqScan(mi)
 IndexScan(t)
 IndexScan(mk)
 IndexScan(k)
 Leading((((mi t) mk) k)) */
---------------------------------------
sql_str:  SELECT MIN(cn.name) AS producing_company,
       MIN(lt.link) AS link_type,
       MIN(t.title) AS complete_western_sequel
FROM complete_cast AS cc,
     comp_cast_type AS cct1,
     comp_cast_type AS cct2,
     company_name AS cn,
     company_type AS ct,
     keyword AS k,
     link_type AS lt,
     movie_companies AS mc,
     movie_info AS mi,
     movie_keyword AS mk,
     movie_link AS ml,
     title AS t
WHERE cct1.kind = 'cast'
  AND cct2.kind LIKE 'complete%'
  AND cn.country_code !='[pl]'
  AND (cn.name LIKE '%Film%'
       OR cn.name LIKE '%Warner%')
  AND ct.kind ='production companies'
  AND k.keyword ='sequel'
  AND lt.link LIKE '%follow%'
  AND mc.note IS NULL
  AND mi.info IN ('Sweden',
                  'Norway',
                  'Germany',
                  'Denmark',
                  'Swedish',
                  'Denish',
                  'Norwegian',
                  'German',
                  'English')
  AND t.production_year BETWEEN 1950 AND 2010
  AND lt.id = ml.link_type_id
  AND ml.movie_id = t.id
  AND t.id = mk.movie_id
  AND mk.keyword_id = k.id
  AND t.id = mc.movie_id
  AND mc.company_type_id = ct.id
  AND mc.company_id = cn.id
  AND mi.movie_id = t.id
  AND t.id = cc.movie_id
  AND cct1.id = cc.subject_id
  AND cct2.id = cc.status_id
  AND ml.movie_id = mk.movie_id
  AND ml.movie_id = mc.movie_id
  AND mk.movie_id = mc.movie_id
  AND ml.movie_id = mi.movie_id
  AND mk.movie_id = mi.movie_id
  AND mc.movie_id = mi.movie_id
  AND ml.movie_id = cc.movie_id
  AND mk.movie_id = cc.movie_id
  AND mc.movie_id = cc.movie_id
  AND mi.movie_id = cc.movie_id
GROUP BY t.id
ORDER BY complete_western_sequel;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 3 1 0 0 0 2 4 4 3 3 3 4 4 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 23  2  3 22  3  4 21  4  5 20  5  6 19  6  7  8  7  0  0  8  9 18
  9 10 17 10 11 16 11 12 15 12 13 14 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 2.5000000e-01 2.5000000e-01 2.5243300e-01 0.0000000e+00
 0.0000000e+00 2.5000000e-01 1.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 7.4532309e-06
 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.5555556e-02 4.8620018e-01
 0.0000000e+00 0.0000000e+00 6.1428905e-02 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 7.5073051e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  209.0452212623444
Other difference exceed the threshold, need to switch module.
the difference value is:  209.0452212623444
Hash difference exceed the threshold, need to switch module.
the difference value is:  209.0452212623444
Nested loop difference exceed the threshold, need to switch module.
Planning took 1479.6ms
q27c_jobchanged, predicted time: 4.0
q27c_jobchanged,(predicted 4.0),/*+ MergeJoin(cct2 lt cc mc k ml t mi mk ct cn cct1)
 MergeJoin(lt cc mc k ml t mi mk ct cn cct1)
 MergeJoin(lt cc mc k ml t mi mk ct cn)
 MergeJoin(cc mc k ml t mi mk ct cn)
 MergeJoin(cc mc k ml t mi mk ct)
 MergeJoin(mc k ml t mi mk ct)
 MergeJoin(mc k ml t mi mk)
 MergeJoin(k ml t mi mk)
 MergeJoin(ml t mi mk)
 MergeJoin(t mi mk)
 MergeJoin(mi mk)
 IndexScan(cct2)
 SeqScan(lt)
 IndexScan(cc)
 SeqScan(mc)
 IndexScan(k)
 SeqScan(ml)
 IndexScan(t)
 IndexScan(mi)
 SeqScan(mk)
 IndexScan(ct)
 SeqScan(cn)
 IndexScan(cct1)
 Leading((cct2 ((lt ((cc ((mc (k (ml (t (mi mk))))) ct)) cn)) cct1))) */
---------------------------------------
sql_str:  SELECT MIN(mi.info) AS release_date, MIN(miidx.info) AS rating, MIN(t.title) AS german_movie FROM company_name AS cn, company_type AS ct, info_type AS it, info_type AS it2, kind_type AS kt, movie_companies AS mc, movie_info AS mi, movie_info_idx AS miidx, title AS t WHERE cn.country_code ='[de]' AND ct.kind ='production companies' AND it.info ='rating' AND it2.info ='release dates' AND kt.kind ='movie' AND mi.movie_id = t.id AND it2.id = mi.info_type_id AND kt.id = t.kind_id AND mc.movie_id = t.id AND cn.id = mc.company_id AND ct.id = mc.company_type_id AND miidx.movie_id = t.id AND it.id = miidx.info_type_id AND mi.movie_id = miidx.movie_id AND mi.movie_id = mc.movie_id AND miidx.movie_id = mc.movie_id;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [0 1 1 0 1 0 1 0 3 3 4 3 4 3 4 4 3]
indexes_env_matrix for this sql:  [ 1  2 17  2  3 16  3  4 15  4  5 14  5  6 13  6  7 12  7  8 11  8  9 10
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0]
query_enc_matrix for this sql:  [0.         0.         0.         0.         0.         0.
 0.         0.         0.04353247 0.         0.         0.25
 0.         0.00884956 0.         0.00884956 0.         0.
 0.         0.         0.14285715 0.         0.         0.
 1.         0.         0.         1.         0.         0.
 0.         0.         0.         0.         0.         1.
 0.         0.         0.         0.         0.         0.
 0.         1.         0.         0.        ]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  127.54524619844362
Other difference exceed the threshold, need to switch module.
the difference value is:  127.54524619844362
Hash difference exceed the threshold, need to switch module.
the difference value is:  127.54524619844362
Nested loop difference exceed the threshold, need to switch module.
Planning took 138.3ms
q28a_bao, predicted time: 2158.4
q28a_bao,(predicted 2158.4),/*+ MergeJoin(ct miidx kt mi it2 t it mc cn)
 MergeJoin(miidx kt mi it2 t it mc cn)
 MergeJoin(miidx kt mi it2 t it mc)
 MergeJoin(miidx kt mi it2 t it)
 MergeJoin(miidx kt mi it2 t)
 NestLoop(kt mi it2 t)
 NestLoop(mi it2 t)
 HashJoin(mi it2)
 SeqScan(ct)
 SeqScan(miidx)
 SeqScan(kt)
 IndexScan(mi)
 IndexScan(it2)
 IndexScan(t)
 SeqScan(it)
 IndexScan(mc)
 SeqScan(cn)
 Leading((ct ((((miidx (kt ((mi it2) t))) it) mc) cn))) */
---------------------------------------
sql_str:  SELECT
    MIN(mi.info) AS release_date,
    MIN(miidx.info) AS rating,
    MIN(t.title) AS german_movie
FROM
    company_name AS cn,
    company_type AS ct,
    info_type AS it,
    info_type AS it2,
    kind_type AS kt,
    movie_companies AS mc,
    movie_info AS mi,
    movie_info_idx AS miidx,
    title AS t
WHERE
    cn.country_code = '[us]'
    AND ct.kind = 'production companies'
    AND it.info = 'rating'
    AND it2.info = 'release dates'
    AND kt.kind = 'movie'
    AND mi.movie_id = t.id
    AND it2.id = mi.info_type_id
    AND kt.id = t.kind_id
    AND mc.movie_id = t.id
    AND cn.id = mc.company_id
    AND ct.id = mc.company_type_id
    AND miidx.movie_id = t.id
    AND it.id = miidx.info_type_id
    AND mi.movie_id = miidx.movie_id
    AND mi.movie_id = mc.movie_id
    AND miidx.movie_id = mc.movie_id
GROUP BY
    cn.id,
    ct.id,
    kt.id
ORDER BY
    cn.name,
    kt.kind,
    ct.kind;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [0 1 1 0 1 0 1 0 3 3 4 3 4 3 4 4 3]
indexes_env_matrix for this sql:  [ 1  2 17  2  3 16  3  4 15  4  5 14  5  6 13  6  7 12  7  8 11  8  9 10
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0]
query_enc_matrix for this sql:  [0.         0.         0.         0.         0.         0.
 0.         0.         0.36416635 0.         0.         0.25
 0.         0.00884956 0.         0.00884956 0.         0.
 0.         0.         0.14285715 0.         0.         0.
 1.         0.         0.         1.         0.         0.
 0.         0.         0.         0.         0.         1.
 0.         0.         0.         0.         0.         0.
 0.         1.         0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  221.4220228648615
Other difference exceed the threshold, need to switch module.
the difference value is:  221.4220228648615
Hash difference exceed the threshold, need to switch module.
the difference value is:  221.4220228648615
Nested loop difference exceed the threshold, need to switch module.
Planning took 489.8ms
q28c_baochanged, predicted time: 3.6
q28c_baochanged,(predicted 3.6),/*+ MergeJoin(cn it miidx kt t mi it2 mc ct)
 MergeJoin(it miidx kt t mi it2 mc ct)
 MergeJoin(miidx kt t mi it2 mc ct)
 MergeJoin(kt t mi it2 mc ct)
 MergeJoin(t mi it2 mc ct)
 MergeJoin(mi it2 mc ct)
 MergeJoin(mc ct)
 MergeJoin(mi it2)
 IndexScan(cn)
 IndexScan(it)
 SeqScan(miidx)
 SeqScan(kt)
 IndexScan(t)
 IndexScan(mi)
 IndexScan(it2)
 IndexScan(mc)
 IndexScan(ct)
 Leading((cn (it (miidx (kt (t ((mi it2) (mc ct)))))))) */
---------------------------------------
sql_str:  SELECT MIN(cn.name) AS movie_company,
       MIN(mi_idx.info) AS rating,
       MIN(t.title) AS complete_euro_dark_movie
FROM complete_cast AS cc,
     comp_cast_type AS cct1,
     comp_cast_type AS cct2,
     company_name AS cn,
     company_type AS ct,
     info_type AS it1,
     info_type AS it2,
     keyword AS k,
     kind_type AS kt,
     movie_companies AS mc,
     movie_info AS mi,
     movie_info_idx AS mi_idx,
     movie_keyword AS mk,
     title AS t
WHERE cct1.kind = 'cast'
  AND cct2.kind = 'complete'
  AND cn.country_code != '[us]'
  AND it1.info = 'countries'
  AND it2.info = 'rating'
  AND k.keyword IN ('murder',
                    'murder-in-title',
                    'blood',
                    'violence')
  AND kt.kind IN ('movie',
                  'episode')
  AND mc.note NOT LIKE '%(USA)%'
  AND mc.note LIKE '%(200%)%'
  AND mi.info IN ('Sweden',
                  'Norway',
                  'Germany',
                  'Denmark',
                  'Swedish',
                  'Danish',
                  'Norwegian',
                  'German',
                  'USA',
                  'American')
  AND mi_idx.info < '8.5'
  AND t.production_year > 2005
  AND kt.id = t.kind_id
  AND t.id = mi.movie_id
  AND t.id = mk.movie_id
  AND t.id = mi_idx.movie_id
  AND t.id = mc.movie_id
  AND t.id = cc.movie_id
  AND mk.movie_id = mi.movie_id
  AND mk.movie_id = mi_idx.movie_id
  AND mk.movie_id = mc.movie_id
  AND mk.movie_id = cc.movie_id
  AND mi.movie_id = mi_idx.movie_id
  AND mi.movie_id = mc.movie_id
  AND mi.movie_id = cc.movie_id
  AND mc.movie_id = mi_idx.movie_id
  AND mc.movie_id = cc.movie_id
  AND mi_idx.movie_id = cc.movie_id
  AND k.id = mk.keyword_id
  AND it1.id = mi.info_type_id
  AND it2.id = mi_idx.info_type_id
  AND ct.id = mc.company_type_id
  AND cn.id = mc.company_id
  AND cct1.id = cc.subject_id
  AND cct2.id = cc.status_id
GROUP BY mi.info
ORDER BY complete_euro_dark_movie;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 1 1 3 1 1 1 3 1 1 1 1 3 4 4 3 4 3 4 4 4 4 3]
indexes_env_matrix for this sql:  [ 1  2 27  2  3 26  3  4 25  4  5  6  5  0  0  6  7 24  7  8  9  8  0  0
  9 10 23 10 11 22 11 12 13 12  0  0 13 14 21 14 15 20 15 16 19 16 17 18
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 2.5000000e-01 2.5000000e-01 5.3439832e-01 0.0000000e+00
 0.0000000e+00 1.0000000e+00 1.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.9812923e-05
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.5748872e-02
 0.0000000e+00 0.0000000e+00 4.7601059e-02 0.0000000e+00 0.0000000e+00
 9.6995151e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 3.9825663e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  214.0628540682794
Other difference exceed the threshold, need to switch module.
the difference value is:  214.0628540682794
Hash difference exceed the threshold, need to switch module.
the difference value is:  214.0628540682794
Nested loop difference exceed the threshold, need to switch module.
Planning took 251.6ms
q28c_jobchanged, predicted time: 6.1
q28c_jobchanged,(predicted 6.1),/*+ MergeJoin(ct it2 mi_idx cct1 cct2 mi t it1 cc kt mc cn mk k)
 MergeJoin(ct it2 mi_idx cct1 cct2 mi t it1 cc kt mc cn mk)
 MergeJoin(ct it2 mi_idx cct1 cct2 mi t it1 cc kt mc cn)
 MergeJoin(it2 mi_idx cct1 cct2 mi t it1 cc kt mc cn)
 MergeJoin(it2 mi_idx cct1 cct2 mi t it1 cc kt mc)
 MergeJoin(it2 mi_idx cct1 cct2 mi t it1 cc kt)
 MergeJoin(mi_idx cct1 cct2 mi t it1 cc kt)
 MergeJoin(cct1 cct2 mi t it1 cc kt)
 MergeJoin(cct1 cct2 mi t it1 cc)
 MergeJoin(cct2 mi t it1 cc)
 MergeJoin(mi t it1 cc)
 MergeJoin(mi t it1)
 MergeJoin(mi t)
 IndexScan(ct)
 IndexScan(it2)
 IndexScan(mi_idx)
 SeqScan(cct1)
 SeqScan(cct2)
 IndexScan(mi)
 IndexScan(t)
 SeqScan(it1)
 SeqScan(cc)
 SeqScan(kt)
 SeqScan(mc)
 SeqScan(cn)
 IndexScan(mk)
 SeqScan(k)
 Leading((((ct (((it2 (mi_idx ((cct1 (cct2 (((mi t) it1) cc))) kt))) mc) cn)) mk) k)) */
---------------------------------------
sql_str:  SELECT MIN(k.keyword) AS movie_keyword, MIN(n.name) AS actor_name, MIN(t.title) AS marvel_movie FROM cast_info AS ci, keyword AS k, movie_keyword AS mk, name AS n, title AS t WHERE k.keyword = 'marvel-cinematic-universe' AND n.name LIKE '%Downey%Robert%' AND t.production_year > 2000 AND k.id = mk.keyword_id AND t.id = mk.movie_id AND t.id = ci.movie_id AND ci.movie_id = mk.movie_id AND n.id = ci.person_id;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 4 4 4 4]
indexes_env_matrix for this sql:  [1 2 9 2 3 8 3 4 7 4 5 6 5 0 0 6 0 0 7 0 0 8 0 0 9 0 0]
query_enc_matrix for this sql:  [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 7.45323086e-06
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.00000000e+00 0.00000000e+00 1.00060206e-04 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 5.40744185e-01
 0.00000000e+00 0.00000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  124.51781007553572
Other difference exceed the threshold, need to switch module.
the difference value is:  124.51781007553572
Hash difference exceed the threshold, need to switch module.
the difference value is:  124.51781007553572
Nested loop difference exceed the threshold, need to switch module.
Planning took 55.5ms
q29a_bao, predicted time: 11.1
q29a_bao,(predicted 11.1),/*+ MergeJoin(k n ci mk t)
 MergeJoin(n ci mk t)
 MergeJoin(mk t)
 MergeJoin(n ci)
 SeqScan(k)
 IndexScan(n)
 SeqScan(ci)
 SeqScan(mk)
 SeqScan(t)
 Leading((k ((n ci) (mk t)))) */
---------------------------------------
sql_str:  SELECT
    MIN(k.keyword) AS movie_keyword,
    MIN(n.name) AS actor_name,
    MIN(t.title) AS marvel_movie
FROM
    cast_info AS ci,
    keyword AS k,
    movie_keyword AS mk,
    name AS n,
    title AS t
WHERE
    k.keyword = 'marvel-cinematic-universe'
    AND n.name LIKE '%Downey%Robert%'
    AND t.production_year > 2000
    AND k.id = mk.keyword_id
    AND t.id = mk.movie_id
    AND t.id = ci.movie_id
    AND ci.movie_id = mk.movie_id
    AND n.id = ci.person_id
GROUP BY
    n.id,  
    t.id,
    k.id   
ORDER BY
    actor_name,
    movie_keyword,
    marvel_movie;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 4 4 4 4]
indexes_env_matrix for this sql:  [1 2 9 2 3 8 3 4 7 4 5 6 5 0 0 6 0 0 7 0 0 8 0 0 9 0 0]
query_enc_matrix for this sql:  [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 7.45323086e-06
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.00000000e+00 0.00000000e+00 1.00060206e-04 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 5.40744185e-01
 0.00000000e+00 0.00000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  226.81858328432693
Other difference exceed the threshold, need to switch module.
the difference value is:  226.81858328432693
Hash difference exceed the threshold, need to switch module.
the difference value is:  226.81858328432693
Nested loop difference exceed the threshold, need to switch module.
Planning took 312.8ms
q29c_baochanged, predicted time: 5462.4
q29c_baochanged,(predicted 5462.4),/*+ NestLoop(n ci t mk k)
 NestLoop(n ci t mk)
 NestLoop(n ci t)
 NestLoop(n ci)
 SeqScan(n)
 IndexScan(ci)
 IndexScan(t)
 IndexScan(mk)
 IndexScan(k)
 Leading(((((n ci) t) mk) k)) */
---------------------------------------
sql_str:  SELECT MIN(chn.name) AS voiced_char,
       MIN(n.name) AS voicing_actress,
       MIN(t.title) AS voiced_animation
FROM aka_name AS an,
     complete_cast AS cc,
     comp_cast_type AS cct1,
     comp_cast_type AS cct2,
     char_name AS chn,
     cast_info AS ci,
     company_name AS cn,
     info_type AS it,
     info_type AS it3,
     keyword AS k,
     movie_companies AS mc,
     movie_info AS mi,
     movie_keyword AS mk,
     name AS n,
     person_info AS pi,
     role_type AS rt,
     title AS t
WHERE cct1.kind ='cast'
  AND cct2.kind ='complete+verified'
  AND ci.note IN ('(voice)',
                  '(voice: Japanese version)',
                  '(voice) (uncredited)',
                  '(voice: English version)')
  AND cn.country_code ='[us]'
  AND it.info = 'release dates'
  AND it3.info = 'trivia'
  AND k.keyword = 'computer-animation'
  AND mi.info IS NOT NULL
  AND (mi.info LIKE 'Japan:%200%'
       OR mi.info LIKE 'USA:%200%')
  AND n.gender ='f'
  AND n.name LIKE '%An%'
  AND rt.role ='actress'
  AND t.production_year BETWEEN 2000 AND 2010
  AND t.id = mi.movie_id
  AND t.id = mc.movie_id
  AND t.id = ci.movie_id
  AND t.id = mk.movie_id
  AND t.id = cc.movie_id
  AND mc.movie_id = ci.movie_id
  AND mc.movie_id = mi.movie_id
  AND mc.movie_id = mk.movie_id
  AND mc.movie_id = cc.movie_id
  AND mi.movie_id = ci.movie_id
  AND mi.movie_id = mk.movie_id
  AND mi.movie_id = cc.movie_id
  AND ci.movie_id = mk.movie_id
  AND ci.movie_id = cc.movie_id
  AND mk.movie_id = cc.movie_id
  AND cn.id = mc.company_id
  AND it.id = mi.info_type_id
  AND n.id = ci.person_id
  AND rt.id = ci.role_id
  AND n.id = an.person_id
  AND ci.person_id = an.person_id
  AND chn.id = ci.person_role_id
  AND n.id = pi.person_id
  AND ci.person_id = pi.person_id
  AND it3.id = pi.info_type_id
  AND k.id = mk.keyword_id
  AND cct1.id = cc.subject_id
  AND cct2.id = cc.status_id
GROUP BY ci.note
ORDER BY voiced_animation;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 3 1 3 1 1 3 1 1 1 3 1 1 1 1 1 1 1 3 1 1 3 4 4 4 4 4 4 5 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2  3  2  0  0  3  4  5  4  0  0  5  6 33  6  7  8  7  0  0  8  9 32
  9 10 31 10 11 12 11  0  0 12 13 30 13 14 29 14 15 28 15 16 27 16 17 26
 17 18 25 18 19 20 19  0  0 20 21 24 21 22 23 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0 28  0  0 29  0  0 30  0  0 31  0  0 32  0  0
 33  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.3315500e-02
 1.0000000e+00 2.5000000e-01 2.5000000e-01 3.6416635e-01 0.0000000e+00
 0.0000000e+00 0.0000000e+00 1.0000000e+00 8.8495575e-03 0.0000000e+00
 0.0000000e+00 8.8495575e-03 0.0000000e+00 0.0000000e+00 7.4532309e-06
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 3.0884717e-02 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 7.1443464e-03 0.0000000e+00
 1.0000000e+00 0.0000000e+00 8.3333336e-02 4.0757865e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  202.5919419608754
Other difference exceed the threshold, need to switch module.
the difference value is:  202.5919419608754
Hash difference exceed the threshold, need to switch module.
the difference value is:  202.5919419608754
Nested loop difference exceed the threshold, need to switch module.
Planning took 1681.3ms
q29c_jobchanged, predicted time: 2.9
q29c_jobchanged,(predicted 2.9),/*+ MergeJoin(cct2 chn it mk cn t ci it3 pi n an mc cc mi cct1 k rt)
 MergeJoin(chn it mk cn t ci it3 pi n an mc cc mi cct1 k rt)
 MergeJoin(it mk cn t ci it3 pi n an mc cc mi cct1 k rt)
 MergeJoin(mk cn t ci it3 pi n an mc cc mi cct1 k rt)
 MergeJoin(mk cn t ci it3 pi n an mc cc mi cct1 k)
 MergeJoin(mk cn t ci it3 pi n an mc cc mi cct1)
 MergeJoin(cn t ci it3 pi n an mc cc mi cct1)
 MergeJoin(cn t ci it3 pi n an mc cc mi)
 MergeJoin(t ci it3 pi n an mc cc mi)
 MergeJoin(t ci it3 pi n an mc cc)
 MergeJoin(ci it3 pi n an mc cc)
 MergeJoin(ci it3 pi n an mc)
 MergeJoin(ci it3 pi n an)
 MergeJoin(it3 pi n an)
 MergeJoin(it3 pi n)
 MergeJoin(pi n)
 SeqScan(cct2)
 SeqScan(chn)
 SeqScan(it)
 SeqScan(mk)
 IndexScan(cn)
 SeqScan(t)
 IndexScan(ci)
 SeqScan(it3)
 IndexScan(pi)
 IndexScan(n)
 IndexScan(an)
 IndexScan(mc)
 SeqScan(cc)
 IndexScan(mi)
 SeqScan(cct1)
 SeqScan(k)
 IndexScan(rt)
 Leading((cct2 (chn (it (((mk ((cn ((t (((ci ((it3 (pi n)) an)) mc) cc)) mi)) cct1)) k) rt))))) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k,
movie_companies as mc,
company_type as ct,
company_name as cn
WHERE
t.id = ci.movie_id
AND t.id = mc.movie_id
AND t.id = mi1.movie_id
AND t.id = mk.movie_id
AND mc.company_type_id = ct.id
AND mc.company_id = cn.id
AND k.id = mk.keyword_id
AND mi1.info_type_id = it1.id
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (it1.id IN ('2'))
AND (mi1.info in ('Color'))
AND (kt.kind in ('movie','tv movie','tv series'))
AND (rt.role in ('actor','writer'))
AND (n.gender in ('m'))
AND (n.surname_pcode in ('B4','B6','C462','D12','D25','G65','H65','J525','K5','P6','P62','R3','S5') OR n.surname_pcode IS NULL)
AND (t.production_year <= 2015)
AND (t.production_year >= 1925)
AND (cn.name in ('Columbia Broadcasting System (CBS)','Fox Network','Independent Television (ITV)','Metro-Goldwyn-Mayer (MGM)','National Broadcasting Company (NBC)','Shout! Factory','Universal Pictures','Universal TV','Warner Bros'))
AND (ct.kind in ('distributors','production companies'))

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 0 1 1 3 4 4 3 3 4 4 4 3 4 5 4]
indexes_env_matrix for this sql:  [ 1  2 23  2  3 22  3  4 21  4  5 20  5  6 19  6  7 18  7  8 17  8  9 16
  9 10 15 10 11 14 11 12 13 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 4.2553736e-05 0.0000000e+00
 0.0000000e+00 5.0000000e-01 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 4.2857143e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.4823278e-03 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 1.0392488e-01 0.0000000e+00
 0.0000000e+00 0.0000000e+00 1.6666667e-01 9.3211162e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  118.57277856291967
Other difference exceed the threshold, need to switch module.
the difference value is:  118.57277856291967
Hash difference exceed the threshold, need to switch module.
the difference value is:  118.57277856291967
Nested loop difference exceed the threshold, need to switch module.
Planning took 1516.5ms
q2a_bao, predicted time: 5233.1
q2a_bao,(predicted 5233.1),/*+ HashJoin(mk k ct mc cn it1 kt t mi1 ci n rt)
 HashJoin(ct mc cn it1 kt t mi1 ci n rt)
 NestLoop(it1 kt t mi1 ci n rt)
 NestLoop(it1 kt t mi1 ci n)
 NestLoop(it1 kt t mi1 ci)
 NestLoop(it1 kt t mi1)
 NestLoop(kt t mi1)
 NestLoop(kt t)
 NestLoop(ct mc cn)
 NestLoop(mc cn)
 NestLoop(mk k)
 SeqScan(mk)
 IndexScan(k)
 SeqScan(ct)
 SeqScan(mc)
 IndexScan(cn)
 SeqScan(it1)
 SeqScan(kt)
 IndexScan(t)
 IndexScan(mi1)
 IndexScan(ci)
 IndexScan(n)
 IndexScan(rt)
 Leading(((mk k) ((ct (mc cn)) ((((it1 ((kt t) mi1)) ci) n) rt)))) */
---------------------------------------
sql_str:  SELECT MIN(t.title) AS movie_title
FROM company_name AS cn,
     keyword AS k,
     movie_companies AS mc,
     movie_keyword AS mk,
     title AS t
WHERE cn.country_code ='[de]'
  AND k.keyword ='character-name-in-title'
  AND cn.id = mc.company_id
  AND mc.movie_id = t.id
  AND t.id = mk.movie_id
  AND mk.keyword_id = k.id
  AND mc.movie_id = mk.movie_id;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 4 4 4 4]
indexes_env_matrix for this sql:  [1 2 9 2 3 8 3 4 7 4 5 6 5 0 0 6 0 0 7 0 0 8 0 0 9 0 0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 4.3532472e-02 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 7.4532309e-06
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  124.35752080027082
Other difference exceed the threshold, need to switch module.
the difference value is:  124.35752080027082
Hash difference exceed the threshold, need to switch module.
the difference value is:  124.35752080027082
Nested loop difference exceed the threshold, need to switch module.
Planning took 74.3ms
q2a_job, predicted time: 5.7
q2a_job,(predicted 5.7),/*+ MergeJoin(cn t mc mk k)
 MergeJoin(cn t mc mk)
 MergeJoin(t mc mk)
 MergeJoin(mc mk)
 SeqScan(cn)
 IndexScan(t)
 SeqScan(mc)
 SeqScan(mk)
 IndexScan(k)
 Leading(((cn (t (mc mk))) k)) */
---------------------------------------
sql_str:  SELECT MIN(t.title) AS movie_title
FROM company_name AS cn,
     keyword AS k,
     movie_companies AS mc,
     movie_keyword AS mk,
     title AS t
WHERE cn.country_code ='[nl]'
  AND k.keyword ='character-name-in-title'
  AND cn.id = mc.company_id
  AND mc.movie_id = t.id
  AND t.id = mk.movie_id
  AND mk.keyword_id = k.id
  AND mc.movie_id = mk.movie_id;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 4 4 4 4]
indexes_env_matrix for this sql:  [1 2 9 2 3 8 3 4 7 4 5 6 5 0 0 6 0 0 7 0 0 8 0 0 9 0 0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0932054e-02 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 7.4532309e-06
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  126.75666683652575
Other difference exceed the threshold, need to switch module.
the difference value is:  126.75666683652575
Hash difference exceed the threshold, need to switch module.
the difference value is:  126.75666683652575
Nested loop difference exceed the threshold, need to switch module.
Planning took 359.6ms
q2b_job, predicted time: 37.7
q2b_job,(predicted 37.7),/*+ NestLoop(k mk cn mc t)
 MergeJoin(k mk cn mc)
 NestLoop(cn mc)
 NestLoop(k mk)
 IndexScan(k)
 IndexScan(mk)
 IndexScan(cn)
 IndexScan(mc)
 IndexScan(t)
 Leading((((k mk) (cn mc)) t)) */
---------------------------------------
sql_str:  SELECT MIN(mi.info) AS movie_budget, MIN(mi_idx.info) AS movie_votes, MIN(t.title) AS movie_title FROM cast_info AS ci, info_type AS it1, info_type AS it2, movie_info AS mi, movie_info_idx AS mi_idx, name AS n, title AS t WHERE ci.note  in ('(writer)', '(head writer)', '(written by)', '(story)', '(story editor)') AND it1.info  = 'genres' AND it2.info  = 'votes' AND mi.info  in ('Horror', 'Action', 'Sci-Fi', 'Thriller', 'Crime', 'War') AND n.gender  = 'm' AND t.id = mi.movie_id AND t.id = mi_idx.movie_id AND t.id = ci.movie_id AND ci.movie_id = mi.movie_id AND ci.movie_id = mi_idx.movie_id AND mi.movie_id = mi_idx.movie_id AND n.id = ci.person_id AND it1.id = mi.info_type_id AND it2.id = mi_idx.info_type_id;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 0 1 0 3 3 4 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 13  2  3 12  3  4 11  4  5 10  5  6  9  6  7  8  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0]
query_enc_matrix for this sql:  [0.         0.         0.         0.         0.03297477 0.
 0.         0.         0.         0.         0.         0.
 0.         0.         0.00884956 0.00884956 0.         0.
 0.         0.         0.         0.         0.         0.
 0.         0.         0.         0.01406167 0.         0.
 1.         0.         0.         0.         0.         0.
 0.         0.         0.41559657 0.         0.         0.
 0.         1.         0.         0.        ]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  122.45976314596186
Other difference exceed the threshold, need to switch module.
the difference value is:  122.45976314596186
Hash difference exceed the threshold, need to switch module.
the difference value is:  122.45976314596186
Nested loop difference exceed the threshold, need to switch module.
Planning took 288.7ms
q30a_bao, predicted time: 4.4
q30a_bao,(predicted 4.4),/*+ MergeJoin(n ci it1 it2 t mi mi_idx)
 MergeJoin(ci it1 it2 t mi mi_idx)
 MergeJoin(it1 it2 t mi mi_idx)
 MergeJoin(it2 t mi mi_idx)
 MergeJoin(t mi mi_idx)
 MergeJoin(mi mi_idx)
 IndexScan(n)
 SeqScan(ci)
 IndexScan(it1)
 IndexScan(it2)
 IndexScan(t)
 IndexScan(mi)
 SeqScan(mi_idx)
 Leading((n (ci (it1 (it2 (t (mi mi_idx))))))) */
---------------------------------------
sql_str:  SELECT
    MIN(mi.info) AS movie_budget,
    MIN(mi_idx.info) AS movie_votes,
    MIN(t.title) AS movie_title
FROM
    cast_info AS ci,
    info_type AS it1,
    info_type AS it2,
    movie_info AS mi,
    movie_info_idx AS mi_idx,
    name AS n,
    title AS t
WHERE
    ci.note in ('(writer)', '(head writer)', '(story editor)')
    AND it1.info = 'genres'
    AND it2.info = 'votes'
    AND mi.info in (
        'Horror',
        'Action',
        'Sci-Fi',
        'Thriller',
        'Crime',
        'War'
    )
    AND n.gender = 'm'
    AND t.id = mi.movie_id
    AND t.id = mi_idx.movie_id
    AND t.id = ci.movie_id
    AND ci.movie_id = mi.movie_id
    AND ci.movie_id = mi_idx.movie_id
    AND mi.movie_id = mi_idx.movie_id
    AND n.id = ci.person_id
    AND it1.id = mi.info_type_id
    AND it2.id = mi_idx.info_type_id
GROUP BY
    t.title,
    it1.info,
    n.gender
ORDER BY
    movie_budget,
    movie_votes,
    movie_title;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 0 1 0 3 3 4 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 13  2  3 12  3  4 11  4  5 10  5  6  9  6  7  8  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0]
query_enc_matrix for this sql:  [0.         0.         0.         0.         0.02268266 0.
 0.         0.         0.         0.         0.         0.
 0.         0.         0.00884956 0.00884956 0.         0.
 0.         0.         0.         0.         0.         0.
 0.         0.         0.         0.01406167 0.         0.
 1.         0.         0.         0.         0.         0.
 0.         0.         0.41559657 0.         0.         0.
 0.         1.         0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  225.44385518407398
Other difference exceed the threshold, need to switch module.
the difference value is:  225.44385518407398
Hash difference exceed the threshold, need to switch module.
the difference value is:  225.44385518407398
Nested loop difference exceed the threshold, need to switch module.
Planning took 68.6ms
q30c_baochanged, predicted time: 7.4
q30c_baochanged,(predicted 7.4),/*+ MergeJoin(it2 ci n t mi it1 mi_idx)
 MergeJoin(ci n t mi it1 mi_idx)
 MergeJoin(ci n t mi it1)
 MergeJoin(ci n t mi)
 MergeJoin(ci n t)
 MergeJoin(ci n)
 SeqScan(it2)
 IndexScan(ci)
 SeqScan(n)
 IndexScan(t)
 SeqScan(mi)
 SeqScan(it1)
 SeqScan(mi_idx)
 Leading((it2 (((((ci n) t) mi) it1) mi_idx))) */
---------------------------------------
sql_str:  SELECT MIN(mi.info) AS movie_budget,
       MIN(mi_idx.info) AS movie_votes,
       MIN(n.name) AS writer,
       MIN(t.title) AS complete_violent_movie
FROM complete_cast AS cc,
     comp_cast_type AS cct1,
     comp_cast_type AS cct2,
     cast_info AS ci,
     info_type AS it1,
     info_type AS it2,
     keyword AS k,
     movie_info AS mi,
     movie_info_idx AS mi_idx,
     movie_keyword AS mk,
     name AS n,
     title AS t
WHERE cct1.kind = 'cast'
  AND cct2.kind ='complete+verified'
  AND ci.note IN ('(writer)',
                  '(head writer)',
                  '(written by)',
                  '(story)',
                  '(story editor)')
  AND it1.info = 'genres'
  AND it2.info = 'votes'
  AND k.keyword IN ('murder',
                    'violence',
                    'blood',
                    'gore',
                    'death',
                    'female-nudity',
                    'hospital')
  AND mi.info IN ('Horror',
                  'Action',
                  'Sci-Fi',
                  'Thriller',
                  'Crime',
                  'War')
  AND n.gender = 'm'
  AND t.id = mi.movie_id
  AND t.id = mi_idx.movie_id
  AND t.id = ci.movie_id
  AND t.id = mk.movie_id
  AND t.id = cc.movie_id
  AND ci.movie_id = mi.movie_id
  AND ci.movie_id = mi_idx.movie_id
  AND ci.movie_id = mk.movie_id
  AND ci.movie_id = cc.movie_id
  AND mi.movie_id = mi_idx.movie_id
  AND mi.movie_id = mk.movie_id
  AND mi.movie_id = cc.movie_id
  AND mi_idx.movie_id = mk.movie_id
  AND mi_idx.movie_id = cc.movie_id
  AND mk.movie_id = cc.movie_id
  AND n.id = ci.person_id
  AND it1.id = mi.info_type_id
  AND it2.id = mi_idx.info_type_id
  AND k.id = mk.keyword_id
  AND cct1.id = cc.subject_id
  AND cct2.id = cc.status_id
GROUP BY t.production_year
ORDER BY complete_violent_movie;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 1 0 1 1 4 4 4 3 4 4 4 4 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 23  2  3 22  3  4 21  4  5 20  5  6 19  6  7 18  7  8 17  8  9 16
  9 10 15 10 11 14 11 12 13 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 3.2974772e-02
 0.0000000e+00 2.5000000e-01 2.5000000e-01 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.2172618e-05
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 1.4061670e-02 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 4.1559657e-01 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  208.28816476831392
Other difference exceed the threshold, need to switch module.
the difference value is:  208.28816476831392
Hash difference exceed the threshold, need to switch module.
the difference value is:  208.28816476831392
Nested loop difference exceed the threshold, need to switch module.
Planning took 634.9ms
q30c_jobchanged, predicted time: 3.0
q30c_jobchanged,(predicted 3.0),/*+ MergeJoin(k it2 n ci mk cc t mi mi_idx cct1 it1 cct2)
 MergeJoin(it2 n ci mk cc t mi mi_idx cct1 it1 cct2)
 MergeJoin(it2 n ci mk cc t mi mi_idx cct1 it1)
 MergeJoin(n ci mk cc t mi mi_idx cct1 it1)
 MergeJoin(n ci mk cc t mi mi_idx cct1)
 MergeJoin(ci mk cc t mi mi_idx cct1)
 MergeJoin(mk cc t mi mi_idx cct1)
 MergeJoin(mk cc t mi mi_idx)
 MergeJoin(cc t mi mi_idx)
 MergeJoin(t mi mi_idx)
 MergeJoin(mi mi_idx)
 SeqScan(k)
 IndexScan(it2)
 IndexScan(n)
 SeqScan(ci)
 SeqScan(mk)
 IndexScan(cc)
 IndexScan(t)
 IndexScan(mi)
 SeqScan(mi_idx)
 IndexScan(cct1)
 IndexScan(it1)
 SeqScan(cct2)
 Leading((k ((it2 ((n (ci ((mk (cc (t (mi mi_idx)))) cct1))) it1)) cct2))) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('7'))
AND (it2.id in ('8'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('MET:600 m','OFM:35 mm','PCS:Spherical','PFM:35 mm','RAT:1.37 : 1'))
AND (mi2.info in ('Japan','Mexico','Portugal','Spain','UK','USA'))
AND (kt.kind in ('tv series','video game','video movie'))
AND (rt.role in ('producer'))
AND (n.gender in ('m') OR n.gender IS NULL)
AND (t.production_year <= 1975)
AND (t.production_year >= 1925)
GROUP BY
    t.id,
    kt.id,
    it1.id
ORDER BY
    t.id,
    kt.id,
    it1.id;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 3 1 3 1 1 1 0 1 1 0 3 0 3 3 4 4 3 4 4 5]
indexes_env_matrix for this sql:  [ 1  2  3  2  0  0  3  4  5  4  0  0  5  6 21  6  7 20  7  8 19  8  9 18
  9 10 17 10 11 16 11 12 13 12  0  0 13 14 15 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.         0.         0.         0.         1.         0.
 0.         0.         0.         0.         0.         0.
 0.         0.         0.00884956 0.00884956 0.         0.
 0.         1.         0.42857143 0.         0.         0.
 0.         0.         0.         0.         0.00423404 0.00492696
 0.         0.         0.         0.         0.         0.
 1.         0.         0.6193362  0.         0.         0.
 0.08333334 0.13999696 0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  224.63118530533194
Other difference exceed the threshold, need to switch module.
the difference value is:  224.63118530533194
Hash difference exceed the threshold, need to switch module.
the difference value is:  224.63118530533194
Nested loop difference exceed the threshold, need to switch module.
Planning took 1322.6ms
q31c_baochanged, predicted time: 25.4
q31c_baochanged,(predicted 25.4),/*+ MergeJoin(mi2 t kt mk k it2 mi1 it1 ci rt n)
 MergeJoin(mi2 t kt mk k it2 mi1 it1 ci rt)
 MergeJoin(mi2 t kt mk k it2 mi1 it1 ci)
 MergeJoin(mi2 t kt mk k it2 mi1 it1)
 MergeJoin(mi2 t kt mk k it2 mi1)
 MergeJoin(mi2 t kt mk k it2)
 MergeJoin(mi2 t kt mk k)
 MergeJoin(mi2 t kt mk)
 MergeJoin(t kt mk)
 MergeJoin(t kt)
 SeqScan(mi2)
 IndexScan(t)
 IndexScan(kt)
 IndexScan(mk)
 SeqScan(k)
 SeqScan(it2)
 IndexScan(mi1)
 IndexScan(it1)
 SeqScan(ci)
 SeqScan(rt)
 IndexScan(n)
 Leading(((((((((mi2 ((t kt) mk)) k) it2) mi1) it1) ci) rt) n)) */
---------------------------------------
sql_str:  SELECT MIN(mi.info) AS movie_budget,
       MIN(mi_idx.info) AS movie_votes,
       MIN(n.name) AS writer,
       MIN(t.title) AS violent_liongate_movie
FROM cast_info AS ci,
     company_name AS cn,
     info_type AS it1,
     info_type AS it2,
     keyword AS k,
     movie_companies AS mc,
     movie_info AS mi,
     movie_info_idx AS mi_idx,
     movie_keyword AS mk,
     name AS n,
     title AS t
WHERE ci.note IN ('(writer)',
                  '(head writer)',
                  '(written by)',
                  '(story)',
                  '(story editor)')
  AND cn.name LIKE 'Lionsgate%'
  AND it1.info = 'genres'
  AND it2.info = 'votes'
  AND k.keyword IN ('murder',
                    'violence',
                    'blood',
                    'gore',
                    'death',
                    'female-nudity',
                    'hospital')
  AND mi.info IN ('Horror',
                  'Action',
                  'Sci-Fi',
                  'Thriller',
                  'Crime',
                  'War')
  AND t.id = mi.movie_id
  AND t.id = mi_idx.movie_id
  AND t.id = ci.movie_id
  AND t.id = mk.movie_id
  AND t.id = mc.movie_id
  AND ci.movie_id = mi.movie_id
  AND ci.movie_id = mi_idx.movie_id
  AND ci.movie_id = mk.movie_id
  AND ci.movie_id = mc.movie_id
  AND mi.movie_id = mi_idx.movie_id
  AND mi.movie_id = mk.movie_id
  AND mi.movie_id = mc.movie_id
  AND mi_idx.movie_id = mk.movie_id
  AND mi_idx.movie_id = mc.movie_id
  AND mk.movie_id = mc.movie_id
  AND n.id = ci.person_id
  AND it1.id = mi.info_type_id
  AND it2.id = mi_idx.info_type_id
  AND k.id = mk.keyword_id
  AND cn.id = mc.company_id
GROUP BY k.keyword
ORDER BY violent_liongate_movie;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 1 1 4 4 4 3 4 4 4 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 3.2974772e-02
 0.0000000e+00 0.0000000e+00 0.0000000e+00 9.7873592e-05 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.2172618e-05
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 1.4061670e-02 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  210.98301418023743
Other difference exceed the threshold, need to switch module.
the difference value is:  210.98301418023743
Hash difference exceed the threshold, need to switch module.
the difference value is:  210.98301418023743
Nested loop difference exceed the threshold, need to switch module.
Planning took 699.0ms
q31c_jobchanged, predicted time: 4.6
q31c_jobchanged,(predicted 4.6),/*+ MergeJoin(k it2 cn mc n ci it1 t mi mk mi_idx)
 MergeJoin(it2 cn mc n ci it1 t mi mk mi_idx)
 MergeJoin(cn mc n ci it1 t mi mk mi_idx)
 MergeJoin(mc n ci it1 t mi mk mi_idx)
 MergeJoin(n ci it1 t mi mk mi_idx)
 MergeJoin(ci it1 t mi mk mi_idx)
 MergeJoin(it1 t mi mk mi_idx)
 MergeJoin(t mi mk mi_idx)
 MergeJoin(t mi mk)
 MergeJoin(mi mk)
 IndexScan(k)
 IndexScan(it2)
 IndexScan(cn)
 SeqScan(mc)
 IndexScan(n)
 IndexScan(ci)
 SeqScan(it1)
 SeqScan(t)
 IndexScan(mi)
 SeqScan(mk)
 IndexScan(mi_idx)
 Leading((k (it2 (cn (mc (n (ci (it1 ((t (mi mk)) mi_idx))))))))) */
---------------------------------------
sql_str:  SELECT MIN(lt.link) AS link_type,
       MIN(t1.title) AS first_movie,
       MIN(t2.title) AS second_movie
FROM keyword AS k,
     link_type AS lt,
     movie_keyword AS mk,
     movie_link AS ml,
     title AS t1,
     title AS t2
WHERE k.keyword ='character-name-in-title'
  AND mk.keyword_id = k.id
  AND t1.id = mk.movie_id
  AND ml.movie_id = t1.id
  AND ml.linked_movie_id = t2.id
  AND lt.id = ml.link_type_id
  AND mk.movie_id = t1.id
ORDER BY first_movie, second_movie;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 3 4 4 3 4 4]
indexes_env_matrix for this sql:  [ 1  2 11  2  3 10  3  4  9  4  5  8  5  6  7  6  0  0  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0]
query_enc_matrix for this sql:  [0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 7.453231e-06
 0.000000e+00 0.000000e+00 0.000000e+00 1.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 1.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 1.000000e+00
 1.000000e+00]
sql_feature_encode_matrix for this sql:  [0 1 1 0]
the difference value is:  173.61241705292687
Other difference exceed the threshold, need to switch module.
the difference value is:  173.61241705292687
Hash difference exceed the threshold, need to switch module.
the difference value is:  173.61241705292687
Nested loop difference exceed the threshold, need to switch module.
Planning took 60.4ms
q32b_jobchanged, predicted time: 13.2
q32b_jobchanged,(predicted 13.2),/*+ MergeJoin(t2 ml lt t1 mk k)
 MergeJoin(t2 ml lt t1 mk)
 MergeJoin(t2 ml lt t1)
 MergeJoin(t2 ml lt)
 MergeJoin(t2 ml)
 IndexScan(t2)
 SeqScan(ml)
 SeqScan(lt)
 IndexScan(t1)
 IndexScan(mk)
 IndexScan(k)
 Leading((((((t2 ml) lt) t1) mk) k)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('7'))
AND (it2.id in ('18'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('OFM:35 mm','OFM:Live','PFM:35 mm','RAT:1.33 : 1'))
AND (mi2.info in ('20th Century Fox Studios - 10201 Pico Blvd., Century City, Los Angeles, California, USA','Desilu Studios - 9336 W. Washington Blvd., Culver City, California, USA','Hal Roach Studios - 8822 Washington Blvd., Culver City, California, USA','New York City, New York, USA','Revue Studios, Hollywood, Los Angeles, California, USA','Universal Studios - 100 Universal City Plaza, Universal City, California, USA','Warner Brothers Burbank Studios - 4000 Warner Boulevard, Burbank, California, USA'))
AND (kt.kind in ('tv series','video game','video movie'))
AND (rt.role in ('actress','writer'))
AND (n.gender in ('f'))
AND (t.production_year <= 1975)
AND (t.production_year >= 1925)
GROUP BY
    k.id,
    n.id,
    t.id
ORDER BY
    k.id,
    n.id,
    t.id;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 1 0 1 3 4 3 4 3 3 4 4 4 4 5]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 4.2857143e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 4.5711971e-03 5.4193526e-05
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 2.3576464e-01 0.0000000e+00
 0.0000000e+00 0.0000000e+00 1.6666667e-01 1.3999696e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  209.0730190000625
Other difference exceed the threshold, need to switch module.
the difference value is:  209.0730190000625
Hash difference exceed the threshold, need to switch module.
the difference value is:  209.0730190000625
Nested loop difference exceed the threshold, need to switch module.
Planning took 378.1ms
q32c_baochanged, predicted time: 11.2
q32c_baochanged,(predicted 11.2),/*+ MergeJoin(ci mi2 it1 mi1 t mk k kt n it2 rt)
 MergeJoin(ci mi2 it1 mi1 t mk k kt n it2)
 MergeJoin(ci mi2 it1 mi1 t mk k kt n)
 MergeJoin(ci mi2 it1 mi1 t mk k kt)
 MergeJoin(mi2 it1 mi1 t mk k kt)
 MergeJoin(it1 mi1 t mk k kt)
 MergeJoin(mi1 t mk k kt)
 MergeJoin(t mk k kt)
 MergeJoin(t mk k)
 MergeJoin(mk k)
 SeqScan(ci)
 IndexScan(mi2)
 SeqScan(it1)
 IndexScan(mi1)
 SeqScan(t)
 SeqScan(mk)
 SeqScan(k)
 IndexScan(kt)
 IndexScan(n)
 IndexScan(it2)
 IndexScan(rt)
 Leading(((((ci (mi2 (it1 (mi1 ((t (mk k)) kt))))) n) it2) rt)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('7'))
AND (it2.id in ('3'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('PFM:35 mm','RAT:1.33 : 1','RAT:1.66 : 1','RAT:1.85 : 1'))
AND (mi2.info in ('Adult','Comedy','Documentary','Drama','Mystery','Romance','Short','Thriller','Western'))
AND (kt.kind in ('tv series','video game','video movie'))
AND (rt.role in ('miscellaneous crew','producer'))
AND (n.gender in ('f','m'))
AND (t.production_year <= 1990)
AND (t.production_year >= 1950)
GROUP BY
    k.id,
    n.id,
    t.id
ORDER BY
    k.id,
    n.id,
    t.id;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 3 1 3 1 1 1 0 1 1 0 1 3 4 3 4 4 3 4 4 5]
indexes_env_matrix for this sql:  [ 1  2  3  2  0  0  3  4  5  4  0  0  5  6 21  6  7 20  7  8 19  8  9 18
  9 10 17 10 11 16 11 12 15 12 13 14 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.         0.         0.         0.         1.         0.
 0.         0.         0.         0.         0.         0.
 0.         0.         0.00884956 0.00884956 0.         0.
 0.         1.         0.42857143 0.         0.         0.
 0.         0.         0.         0.         0.003226   0.00881218
 0.         0.         0.         0.         0.         0.
 1.         0.         0.65136147 0.         0.         0.
 0.16666667 0.2157827  0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  223.67492389484713
Other difference exceed the threshold, need to switch module.
the difference value is:  223.67492389484713
Hash difference exceed the threshold, need to switch module.
the difference value is:  223.67492389484713
Nested loop difference exceed the threshold, need to switch module.
Planning took 1326.8ms
q33c_baochanged, predicted time: 37.7
q33c_baochanged,(predicted 37.7),/*+ MergeJoin(t kt mk mi2 k it2 mi1 it1 ci rt n)
 MergeJoin(t kt mk mi2 k it2 mi1 it1 ci rt)
 MergeJoin(t kt mk mi2 k it2 mi1 it1 ci)
 MergeJoin(t kt mk mi2 k it2 mi1 it1)
 MergeJoin(t kt mk mi2 k it2 mi1)
 MergeJoin(t kt mk mi2 k it2)
 MergeJoin(t kt mk mi2 k)
 MergeJoin(t kt mk mi2)
 MergeJoin(t kt mk)
 MergeJoin(t kt)
 IndexScan(t)
 IndexScan(kt)
 IndexScan(mk)
 SeqScan(mi2)
 SeqScan(k)
 SeqScan(it2)
 IndexScan(mi1)
 IndexScan(it1)
 IndexScan(ci)
 SeqScan(rt)
 IndexScan(n)
 Leading(((((((((((t kt) mk) mi2) k) it2) mi1) it1) ci) rt) n)) */
---------------------------------------
sql_str:  SELECT MIN(cn1.name) AS first_company,
       MIN(cn2.name) AS second_company,
       MIN(mi_idx1.info) AS first_rating,
       MIN(mi_idx2.info) AS second_rating,
       MIN(t1.title) AS first_movie,
       MIN(t2.title) AS second_movie
FROM company_name AS cn1,
     company_name AS cn2,
     info_type AS it1,
     info_type AS it2,
     kind_type AS kt1,
     kind_type AS kt2,
     link_type AS lt,
     movie_companies AS mc1,
     movie_companies AS mc2,
     movie_info_idx AS mi_idx1,
     movie_info_idx AS mi_idx2,
     movie_link AS ml,
     title AS t1,
     title AS t2
WHERE cn1.country_code != '[us]'
  AND it1.info = 'rating'
  AND it2.info = 'rating'
  AND kt1.kind IN ('tv series',
                   'episode')
  AND kt2.kind IN ('tv series',
                   'episode')
  AND lt.link IN ('sequel',
                  'follows',
                  'followed by')
  AND mi_idx2.info < '3.5'
  AND t2.production_year BETWEEN 2000 AND 2010
  AND lt.id = ml.link_type_id
  AND t1.id = ml.movie_id
  AND t2.id = ml.linked_movie_id
  AND it1.id = mi_idx1.info_type_id
  AND t1.id = mi_idx1.movie_id
  AND kt1.id = t1.kind_id
  AND cn1.id = mc1.company_id
  AND t1.id = mc1.movie_id
  AND ml.movie_id = mi_idx1.movie_id
  AND ml.movie_id = mc1.movie_id
  AND mi_idx1.movie_id = mc1.movie_id
  AND it2.id = mi_idx2.info_type_id
  AND t2.id = mi_idx2.movie_id
  AND kt2.id = t2.kind_id
  AND cn2.id = mc2.company_id
  AND t2.id = mc2.movie_id
  AND ml.linked_movie_id = mi_idx2.movie_id
  AND ml.linked_movie_id = mc2.movie_id
  AND mi_idx2.movie_id = mc2.movie_id
GROUP BY kt1.kind, lt.link
ORDER BY first_movie, second_movie;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 1 0 1 0 2 4 0 3 3 3 4 3 4 4 4 4 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 27  2  3 26  3  4 25  4  5 24  5  6 23  6  7 22  7  8 21  8  9 20
  9 10 19 10 11 18 11 12 17 12 13 14 13  0  0 14 15 16 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0]
query_enc_matrix for this sql:  [0.         0.         0.         0.         0.         0.
 0.         0.         0.         0.5343983  1.         0.
 0.         0.         0.00884956 0.00884956 0.         0.
 0.         0.         0.         0.2857143  0.2857143  0.16666667
 0.         1.         1.         0.         0.         0.
 0.         1.         0.4962193  0.         0.         0.
 0.         1.         0.         0.         0.         0.
 0.         0.         1.         0.40757865]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  199.89863470167634
Other difference exceed the threshold, need to switch module.
the difference value is:  199.89863470167634
Hash difference exceed the threshold, need to switch module.
the difference value is:  199.89863470167634
Nested loop difference exceed the threshold, need to switch module.
Planning took 1976.8ms
q33c_jobchanged, predicted time: 3.9
q33c_jobchanged,(predicted 3.9),/*+ MergeJoin(it1 kt2 cn1 t2 kt1 mi_idx1 it2 mi_idx2 lt mc1 t1 ml mc2 cn2)
 MergeJoin(kt2 cn1 t2 kt1 mi_idx1 it2 mi_idx2 lt mc1 t1 ml mc2 cn2)
 MergeJoin(cn1 t2 kt1 mi_idx1 it2 mi_idx2 lt mc1 t1 ml mc2 cn2)
 MergeJoin(t2 kt1 mi_idx1 it2 mi_idx2 lt mc1 t1 ml mc2 cn2)
 MergeJoin(kt1 mi_idx1 it2 mi_idx2 lt mc1 t1 ml mc2 cn2)
 MergeJoin(mi_idx1 it2 mi_idx2 lt mc1 t1 ml mc2 cn2)
 MergeJoin(it2 mi_idx2 lt mc1 t1 ml mc2 cn2)
 MergeJoin(mi_idx2 lt mc1 t1 ml mc2 cn2)
 MergeJoin(lt mc1 t1 ml mc2 cn2)
 MergeJoin(mc1 t1 ml mc2 cn2)
 MergeJoin(t1 ml mc2 cn2)
 MergeJoin(ml mc2 cn2)
 MergeJoin(mc2 cn2)
 IndexScan(it1)
 SeqScan(kt2)
 IndexScan(cn1)
 IndexScan(t2)
 SeqScan(kt1)
 SeqScan(mi_idx1)
 IndexScan(it2)
 SeqScan(mi_idx2)
 IndexScan(lt)
 IndexScan(mc1)
 SeqScan(t1)
 IndexScan(ml)
 SeqScan(mc2)
 SeqScan(cn2)
 Leading((it1 (kt2 (cn1 (t2 (kt1 (mi_idx1 (it2 (mi_idx2 (lt (mc1 (t1 (ml (mc2 cn2)))))))))))))) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
movie_info as mi1,
info_type as it1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND it1.id = '8'
AND it2.id = '4'
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND mi1.info IN ('Brazil','India','Ireland','Italy','Netherlands','Philippines','Poland','USA')
AND mi2.info IN ('English','French','Italian','Malayalam','Polish','Portuguese','Tagalog')
AND kt.kind IN ('tv movie','tv series','video game')
AND rt.role IN ('cinematographer','composer')
AND n.gender IN ('m')
AND t.production_year <= 2015
AND 2000 < t.production_year
GROUP BY
    t.id,
    kt.id,
    it1.id
ORDER BY
    t.id,
    kt.id,
    it1.id;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 3 1 3 1 0 1 1 0 1 3 4 3 4 4 3 4]
indexes_env_matrix for this sql:  [ 1  2  3  2  0  0  3  4  5  4  0  0  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0]
query_enc_matrix for this sql:  [0.         0.         0.         0.         1.         0.
 0.         0.         0.         0.         0.         0.
 0.         0.         0.00884956 0.00884956 0.         0.
 0.         0.         0.42857143 0.         0.         0.
 0.         0.         0.         0.         0.00396671 0.00488409
 0.         0.         0.         0.         0.         0.
 0.         0.         0.41559657 0.         0.         0.
 0.16666667 0.5407347  0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  228.84967545320208
Other difference exceed the threshold, need to switch module.
the difference value is:  228.84967545320208
Hash difference exceed the threshold, need to switch module.
the difference value is:  228.84967545320208
Nested loop difference exceed the threshold, need to switch module.
Planning took 718.2ms
q34c_baochanged, predicted time: 2729.2
q34c_baochanged,(predicted 2729.2),/*+ NestLoop(rt it2 kt t mi2 it1 mi1 ci n)
 NestLoop(it2 kt t mi2 it1 mi1 ci n)
 NestLoop(it2 kt t mi2 it1 mi1 ci)
 NestLoop(kt t mi2 it1 mi1 ci)
 MergeJoin(kt t mi2 it1 mi1)
 MergeJoin(mi2 it1 mi1)
 NestLoop(it1 mi1)
 NestLoop(kt t)
 SeqScan(rt)
 SeqScan(it2)
 IndexScan(kt)
 IndexScan(t)
 IndexScan(mi2)
 IndexScan(it1)
 IndexScan(mi1)
 IndexScan(ci)
 IndexScan(n)
 Leading((rt ((it2 (((kt t) (mi2 (it1 mi1))) ci)) n))) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
movie_info as mi1,
info_type as it1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND it1.id = '3'
AND it2.id = '7'
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND mi1.info IN ('Fantasy','Mystery','Short')
AND mi2.info IN ('LAB:FotoKem Laboratory, Burbank (CA), USA','MET:','MET:300 m','PCS:Spherical','RAT:1.33 : 1','RAT:1.66 : 1')
AND kt.kind IN ('episode','movie','video movie')
AND rt.role IN ('miscellaneous crew')
AND n.gender IN ('f')
AND t.production_year <= 2015
AND 1925 < t.production_year
GROUP BY t.id, kt.id, rt.role
ORDER BY t.id, kt.id, rt.role;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 3 1 3 1 0 1 1 0 1 3 4 3 4 4 3 4]
indexes_env_matrix for this sql:  [ 1  2  3  2  0  0  3  4  5  4  0  0  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0]
query_enc_matrix for this sql:  [0.         0.         0.         0.         1.         0.
 0.         0.         0.         0.         0.         0.
 0.         0.         0.00884956 0.00884956 0.         0.
 0.         0.         0.42857143 0.         0.         0.
 0.         0.         0.         0.         0.00326705 0.00235371
 0.         0.         0.         0.         0.         0.
 0.         0.         0.23576464 0.         0.         0.
 0.08333334 0.9303472  0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  220.76524761654744
Other difference exceed the threshold, need to switch module.
the difference value is:  220.76524761654744
Hash difference exceed the threshold, need to switch module.
the difference value is:  220.76524761654744
Nested loop difference exceed the threshold, need to switch module.
Planning took 654.4ms
q35c_baochanged, predicted time: 11.6
q35c_baochanged,(predicted 11.6),/*+ MergeJoin(it2 rt it1 mi1 n ci t mi2 kt)
 MergeJoin(rt it1 mi1 n ci t mi2 kt)
 MergeJoin(it1 mi1 n ci t mi2 kt)
 MergeJoin(mi1 n ci t mi2 kt)
 MergeJoin(n ci t mi2 kt)
 MergeJoin(n ci t mi2)
 MergeJoin(n ci t)
 MergeJoin(n ci)
 IndexScan(it2)
 SeqScan(rt)
 IndexScan(it1)
 SeqScan(mi1)
 IndexScan(n)
 SeqScan(ci)
 SeqScan(t)
 IndexScan(mi2)
 IndexScan(kt)
 Leading((it2 (rt (it1 (mi1 ((((n ci) t) mi2) kt)))))) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
movie_keyword as mk,
keyword as k,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND t.id = mk.movie_id
AND mk.keyword_id = k.id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('episode','movie'))
AND (t.production_year <= 2015)
AND (t.production_year >= 1925)
AND (mi1.info IN ('Hong Kong','Poland','Portugal','South Korea','Soviet Union','Sweden','Switzerland','Turkey','Yugoslavia'))
AND (it1.id IN ('15','8','97'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 8.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 1000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND rt.id = ci.role_id
AND (n.gender IS NULL)
AND (n.name_pcode_nf in ('A4163','A4253','A5362','A6532','C5321','C6231','C6235','R516','R5316','S3152','S3521') OR n.name_pcode_nf IS NULL)
AND (ci.note in ('(deviser)','(producer)','(production assistant)','(senior producer)','(supervising producer)','(writer)') OR ci.note IS NULL)
AND (rt.role in ('cinematographer','composer','director','editor','miscellaneous crew','producer','production designer','writer'))
AND (it5.id in ('19'))
GROUP BY t.production_year,  kt.kind, n.gender
ORDER BY t.production_year,  kt.kind, n.gender;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 4 3 5 4 5 4 5 3 4]
indexes_env_matrix for this sql:  [ 1  2 31  2  3 30  3  4 29  4  5  6  5  0  0  6  7 28  7  8 27  8  9 26
  9 10 25 10 11 24 11 12 23 12 13 22 13 14 21 14 15 20 15 16 19 16 17 18
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0 28  0  0 29  0  0 30  0  0 31  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.3671482e-01
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 1.0000000e+00
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.6873465e-03 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04
 0.0000000e+00 1.0000000e+00 0.0000000e+00 1.6735010e-02 0.0000000e+00
 0.0000000e+00 2.8182682e-02 6.6666669e-01 9.3211162e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  210.6466408662852
Other difference exceed the threshold, need to switch module.
the difference value is:  210.6466408662852
Hash difference exceed the threshold, need to switch module.
the difference value is:  210.6466408662852
Nested loop difference exceed the threshold, need to switch module.
Planning took 434.2ms
q36c_baochanged, predicted time: 9.2
q36c_baochanged,(predicted 9.2),/*+ MergeJoin(it4 it3 an mii1 ci n rt t mi1 mii2 pi1 it5 mk k kt it1)
 MergeJoin(it4 it3 an mii1 ci n rt t mi1 mii2 pi1 it5 mk k kt)
 MergeJoin(it4 it3 an mii1 ci n rt t mi1 mii2 pi1 it5 mk k)
 MergeJoin(it4 it3 an mii1 ci n rt t mi1 mii2 pi1 it5 mk)
 MergeJoin(it4 it3 an mii1 ci n rt t mi1 mii2 pi1 it5)
 MergeJoin(it3 an mii1 ci n rt t mi1 mii2 pi1 it5)
 MergeJoin(an mii1 ci n rt t mi1 mii2 pi1 it5)
 MergeJoin(an mii1 ci n rt t mi1 mii2 pi1)
 MergeJoin(an mii1 ci n rt t mi1 mii2)
 MergeJoin(mii1 ci n rt t mi1 mii2)
 MergeJoin(mii1 ci n rt t mi1)
 MergeJoin(ci n rt t mi1)
 MergeJoin(ci n rt t)
 MergeJoin(ci n rt)
 MergeJoin(ci n)
 SeqScan(it4)
 SeqScan(it3)
 SeqScan(an)
 IndexScan(mii1)
 IndexScan(ci)
 SeqScan(n)
 SeqScan(rt)
 SeqScan(t)
 SeqScan(mi1)
 SeqScan(mii2)
 IndexScan(pi1)
 IndexScan(it5)
 SeqScan(mk)
 IndexScan(k)
 SeqScan(kt)
 SeqScan(it1)
 Leading((((((it4 (it3 (((an ((mii1 ((((ci n) rt) t) mi1)) mii2)) pi1) it5))) mk) k) kt) it1)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('7'))
AND (it2.id in ('8'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('CAM:Panavision Cameras and Lenses','OFM:16 mm','OFM:35 mm','OFM:Video','PCS:Spherical','PFM:35 mm','RAT:1.33 : 1','RAT:1.37 : 1','RAT:1.66 : 1','RAT:1.78 : 1','RAT:2.35 : 1','RAT:4:3'))
AND (mi2.info in ('East Germany','Hong Kong','Italy','Taiwan','UK','USA','West Germany'))
AND (kt.kind in ('episode','movie'))
AND (rt.role in ('production designer'))
AND (n.gender in ('f'))
AND (t.production_year <= 2010)
AND (t.production_year >= 1952)
AND (k.keyword IN ('fight','gay','independent-film','lesbian-sex','mother-daughter-relationship','murder','number-in-title'))
GROUP BY mi1.info, k.keyword, t.production_year
ORDER BY mi1.info, k.keyword, t.production_year;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 1 1 4 4 4 3 4 4 3 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.2172618e-05
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.2499158e-03 4.3328535e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 2.3576464e-01 0.0000000e+00
 0.0000000e+00 0.0000000e+00 8.3333336e-02 7.4681133e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  210.6184327866288
Other difference exceed the threshold, need to switch module.
the difference value is:  210.6184327866288
Hash difference exceed the threshold, need to switch module.
the difference value is:  210.6184327866288
Nested loop difference exceed the threshold, need to switch module.
Planning took 299.0ms
q37c_baochanged, predicted time: 11.6
q37c_baochanged,(predicted 11.6),/*+ MergeJoin(rt ci mi2 t kt mk it2 mi1 it1 n k)
 MergeJoin(rt ci mi2 t kt mk it2 mi1 it1 n)
 MergeJoin(rt ci mi2 t kt mk it2 mi1 it1)
 MergeJoin(ci mi2 t kt mk it2 mi1 it1)
 MergeJoin(mi2 t kt mk it2 mi1 it1)
 MergeJoin(mi2 t kt mk it2 mi1)
 MergeJoin(mi2 t kt mk it2)
 MergeJoin(mi2 t kt mk)
 MergeJoin(mi2 t kt)
 MergeJoin(mi2 t)
 IndexScan(rt)
 SeqScan(ci)
 IndexScan(mi2)
 SeqScan(t)
 IndexScan(kt)
 SeqScan(mk)
 IndexScan(it2)
 IndexScan(mi1)
 SeqScan(it1)
 IndexScan(n)
 IndexScan(k)
 Leading((((rt (ci ((((((mi2 t) kt) mk) it2) mi1) it1))) n) k)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('7'))
AND (it2.id in ('8'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('CAM:Panavision Cameras and Lenses','OFM:16 mm','OFM:35 mm','OFM:Video','PCS:Spherical','PFM:35 mm','RAT:1.33 : 1','RAT:1.37 : 1','RAT:1.66 : 1','RAT:1.78 : 1','RAT:2.35 : 1','RAT:4:3'))
AND (mi2.info in ('East Germany','Hong Kong','Italy','Taiwan','UK','USA','West Germany'))
AND (kt.kind in ('episode','movie'))
AND (rt.role in ('actress'))
AND (n.gender in ('f'))
AND (t.production_year <= 2011)
AND (t.production_year >= 1949)
AND (k.keyword IN ('death','father-son-relationship','bruce','gay','independent-film','lesbian-sex','mother-daughter-relationship','murder','number-in-title'))
GROUP BY kt.kind, k.keyword, t.production_year
ORDER BY kt.kind, k.keyword, t.production_year;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 1 1 4 4 4 3 4 4 3 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.7079076e-05
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.2499158e-03 4.3328535e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 2.3576464e-01 0.0000000e+00
 0.0000000e+00 0.0000000e+00 8.3333336e-02 8.1741929e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  219.96994911511317
Other difference exceed the threshold, need to switch module.
the difference value is:  219.96994911511317
Hash difference exceed the threshold, need to switch module.
the difference value is:  219.96994911511317
Nested loop difference exceed the threshold, need to switch module.
Planning took 1006.4ms
q38c_baochanged, predicted time: 2812.4
q38c_baochanged,(predicted 2812.4),/*+ NestLoop(kt rt it1 it2 t mi2 mi1 ci n mk k)
 NestLoop(rt it1 it2 t mi2 mi1 ci n mk k)
 NestLoop(rt it1 it2 t mi2 mi1 ci n mk)
 NestLoop(rt it1 it2 t mi2 mi1 ci n)
 NestLoop(it1 it2 t mi2 mi1 ci n)
 NestLoop(it1 it2 t mi2 mi1 ci)
 NestLoop(it1 it2 t mi2 mi1)
 NestLoop(it2 t mi2 mi1)
 NestLoop(it2 t mi2)
 NestLoop(t mi2)
 SeqScan(kt)
 SeqScan(rt)
 SeqScan(it1)
 SeqScan(it2)
 IndexScan(t)
 IndexScan(mi2)
 IndexScan(mi1)
 IndexScan(ci)
 IndexScan(n)
 IndexScan(mk)
 IndexScan(k)
 Leading((kt (((rt (((it1 ((it2 (t mi2)) mi1)) ci) n)) mk) k))) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('7'))
AND (it2.id in ('8'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('CAM:Panavision Cameras and Lenses','OFM:16 mm','OFM:35 mm','OFM:Video','PCS:Spherical','PFM:35 mm','RAT:1.33 : 1','RAT:1.37 : 1','RAT:1.66 : 1','RAT:1.78 : 1','RAT:2.35 : 1','RAT:4:3'))
AND (mi2.info in ('East Germany','Hong Kong','Italy','Taiwan','UK','USA','West Germany'))
AND (kt.kind in ('episode','movie'))
AND (rt.role in ('production designer'))
AND (n.gender in ('m'))
AND (t.production_year <= 2010)
AND (t.production_year >= 1950)
AND (k.keyword IN ('father-son-relationship','combat','gay','independent-film','lesbian-sex','mother-daughter-relationship','murder','number-in-title'))
GROUP BY t.id, k.keyword, t.production_year
ORDER BY t.id, k.keyword, t.production_year;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 1 1 4 4 4 3 4 4 3 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.9625847e-05
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.2499158e-03 4.3328535e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 4.1559657e-01 0.0000000e+00
 0.0000000e+00 0.0000000e+00 8.3333336e-02 7.5073051e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  210.61843262530573
Other difference exceed the threshold, need to switch module.
the difference value is:  210.61843262530573
Hash difference exceed the threshold, need to switch module.
the difference value is:  210.61843262530573
Nested loop difference exceed the threshold, need to switch module.
Planning took 264.6ms
q39c_baochanged, predicted time: 11.4
q39c_baochanged,(predicted 11.4),/*+ MergeJoin(rt ci mi2 t kt mk it2 mi1 it1 n k)
 MergeJoin(rt ci mi2 t kt mk it2 mi1 it1 n)
 MergeJoin(rt ci mi2 t kt mk it2 mi1 it1)
 MergeJoin(ci mi2 t kt mk it2 mi1 it1)
 MergeJoin(mi2 t kt mk it2 mi1 it1)
 MergeJoin(mi2 t kt mk it2 mi1)
 MergeJoin(mi2 t kt mk it2)
 MergeJoin(mi2 t kt mk)
 MergeJoin(mi2 t kt)
 MergeJoin(mi2 t)
 IndexScan(rt)
 SeqScan(ci)
 IndexScan(mi2)
 SeqScan(t)
 IndexScan(kt)
 SeqScan(mk)
 IndexScan(it2)
 IndexScan(mi1)
 SeqScan(it1)
 IndexScan(n)
 IndexScan(k)
 Leading((((rt (ci ((((((mi2 t) kt) mk) it2) mi1) it1))) n) k)) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
movie_keyword as mk,
keyword as k,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND t.id = mk.movie_id
AND mk.keyword_id = k.id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('episode'))
AND (t.production_year <= 1975)
AND (t.production_year >= 1875)
AND (mi1.info IN ('Color','OFM:Live','OFM:Video','PFM:Video'))
AND (it1.id IN ('103','2','7'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 11.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 7.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 10000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND rt.id = ci.role_id
AND (n.gender in ('m'))
AND (n.name_pcode_nf in ('C6231','F6362','F6525','J513','R1631','R1632','R1636','R2631','S2153'))
AND (ci.note IS NULL)
AND (rt.role in ('actor'))
AND (it5.id in ('25'))

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 4 3 5 4 5 4 5 3 4]
indexes_env_matrix for this sql:  [ 1  2 31  2  3 30  3  4 29  4  5  6  5  0  0  6  7 28  7  8 27  8  9 26
  9 10 25 10 11 24 11 12 23 12 13 22 13 14 21 14 15 20 15 16 19 16 17 18
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0 28  0  0 29  0  0 30  0  0 31  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.0610288e-01
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 1.0000000e+00
 1.4285715e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 7.4442968e-02 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04
 0.0000000e+00 1.0000000e+00 0.0000000e+00 5.4956325e-03 0.0000000e+00
 0.0000000e+00 1.4424813e-01 8.3333336e-02 1.8108603e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  110.54418590392329
Other difference exceed the threshold, need to switch module.
the difference value is:  110.54418590392329
Hash difference exceed the threshold, need to switch module.
the difference value is:  110.54418590392329
Nested loop difference exceed the threshold, need to switch module.
Planning took 407.6ms
q3a_bao, predicted time: 280.9
q3a_bao,(predicted 280.9),/*+ NestLoop(it1 it4 rt an mii1 ci k mk t n mi1 pi1 it3 it5 kt mii2)
 NestLoop(it4 rt an mii1 ci k mk t n mi1 pi1 it3 it5 kt mii2)
 NestLoop(rt an mii1 ci k mk t n mi1 pi1 it3 it5 kt mii2)
 NestLoop(rt an mii1 ci k mk t n mi1 pi1 it3 it5 kt)
 NestLoop(rt an mii1 ci k mk t n mi1 pi1 it3 it5)
 NestLoop(an mii1 ci k mk t n mi1 pi1 it3 it5)
 HashJoin(an mii1 ci k mk t n mi1 pi1 it3)
 HashJoin(mii1 ci k mk t n mi1 pi1 it3)
 NestLoop(mii1 ci k mk t n mi1 pi1)
 HashJoin(mii1 ci k mk t n mi1)
 NestLoop(ci k mk t n mi1)
 NestLoop(ci k mk t n)
 MergeJoin(ci k mk t)
 HashJoin(k mk t)
 HashJoin(k mk)
 SeqScan(it1)
 SeqScan(it4)
 SeqScan(rt)
 SeqScan(an)
 IndexScan(mii1)
 IndexScan(ci)
 IndexScan(k)
 IndexScan(mk)
 IndexScan(t)
 IndexScan(n)
 IndexScan(mi1)
 IndexScan(pi1)
 IndexScan(it3)
 IndexScan(it5)
 SeqScan(kt)
 IndexScan(mii2)
 Leading((it1 (it4 (((rt ((an (((mii1 (((ci ((k mk) t)) n) mi1)) pi1) it3)) it5)) kt) mii2)))) */
---------------------------------------
sql_str:  SELECT MIN(t.title) AS movie_title
FROM keyword AS k,
     movie_info AS mi,
     movie_keyword AS mk,
     title AS t
WHERE k.keyword LIKE '%sequel%'
  AND mi.info IN ('Sweden',
                  'Norway',
                  'Germany',
                  'Denmark',
                  'Swedish',
                  'Denish',
                  'Norwegian',
                  'German')
  AND t.production_year > 2005
  AND t.id = mi.movie_id
  AND t.id = mk.movie_id
  AND mk.movie_id = mi.movie_id
  AND k.id = mk.keyword_id;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 3 4 4 4]
indexes_env_matrix for this sql:  [1 2 7 2 3 6 3 4 5 4 0 0 5 0 0 6 0 0 7 0 0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 9.6891999e-05
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 9.9918982e-03 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 3.9825663e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  126.90600904167376
Other difference exceed the threshold, need to switch module.
the difference value is:  126.90600904167376
Hash difference exceed the threshold, need to switch module.
the difference value is:  126.90600904167376
Nested loop difference exceed the threshold, need to switch module.
Planning took 38.3ms
q3a_job, predicted time: 7.7
q3a_job,(predicted 7.7),/*+ MergeJoin(k t mi mk)
 MergeJoin(t mi mk)
 MergeJoin(mi mk)
 SeqScan(k)
 IndexScan(t)
 IndexScan(mi)
 SeqScan(mk)
 Leading((k (t (mi mk)))) */
---------------------------------------
sql_str:  SELECT MIN(t.title) AS movie_title
FROM keyword AS k,
     movie_info AS mi,
     movie_keyword AS mk,
     title AS t
WHERE k.keyword LIKE '%sequel%'
  AND mi.info IN ('Bulgaria')
  AND t.production_year > 2010
  AND t.id = mi.movie_id
  AND t.id = mk.movie_id
  AND mk.movie_id = mi.movie_id
  AND k.id = mk.keyword_id;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 3 4 4 4]
indexes_env_matrix for this sql:  [1 2 7 2 3 6 3 4 5 4 0 0 5 0 0 6 0 0 7 0 0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 9.6891999e-05
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 2.6355310e-05 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.5569755e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  129.3006228810815
Other difference exceed the threshold, need to switch module.
the difference value is:  129.3006228810815
Hash difference exceed the threshold, need to switch module.
the difference value is:  129.3006228810815
Nested loop difference exceed the threshold, need to switch module.
Planning took 66.8ms
q3b_job, predicted time: 7.6
q3b_job,(predicted 7.6),/*+ MergeJoin(mi t mk k)
 MergeJoin(mi t mk)
 MergeJoin(mi t)
 SeqScan(mi)
 IndexScan(t)
 IndexScan(mk)
 IndexScan(k)
 Leading((((mi t) mk) k)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('7'))
AND (it2.id in ('8'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('CAM:Panavision Cameras and Lenses','OFM:16 mm','OFM:35 mm','OFM:Video','PCS:Spherical','PFM:35 mm','RAT:1.33 : 1','RAT:1.37 : 1','RAT:1.66 : 1','RAT:1.78 : 1','RAT:2.35 : 1','RAT:4:3'))
AND (mi2.info in ('East Germany','Hong Kong','Italy','Taiwan','UK','USA','West Germany'))
AND (kt.kind in ('episode','movie'))
AND (rt.role in ('actor'))
AND (n.gender in ('m'))
AND (t.production_year <= 2008)
AND (t.production_year >= 1952)
AND (k.keyword IN ('death','father-son-relationship','fight','gay','independent-film','lesbian-sex','mother-daughter-relationship','murder','number-in-title'))
GROUP BY mi1.info, k.keyword, mi2.info
ORDER BY mi1.info, k.keyword, mi2.info;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 1 1 4 4 4 3 4 4 3 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.7079076e-05
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.2499158e-03 4.3328535e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 4.1559657e-01 0.0000000e+00
 0.0000000e+00 0.0000000e+00 8.3333336e-02 6.3965404e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  210.61843246414375
Other difference exceed the threshold, need to switch module.
the difference value is:  210.61843246414375
Hash difference exceed the threshold, need to switch module.
the difference value is:  210.61843246414375
Nested loop difference exceed the threshold, need to switch module.
Planning took 282.0ms
q40c_baochanged, predicted time: 9.7
q40c_baochanged,(predicted 9.7),/*+ MergeJoin(n ci mi2 t kt mk it2 mi1 it1 k rt)
 MergeJoin(n ci mi2 t kt mk it2 mi1 it1 k)
 MergeJoin(n ci mi2 t kt mk it2 mi1 it1)
 MergeJoin(ci mi2 t kt mk it2 mi1 it1)
 MergeJoin(mi2 t kt mk it2 mi1 it1)
 MergeJoin(mi2 t kt mk it2 mi1)
 MergeJoin(mi2 t kt mk it2)
 MergeJoin(mi2 t kt mk)
 MergeJoin(mi2 t kt)
 MergeJoin(mi2 t)
 SeqScan(n)
 IndexScan(ci)
 IndexScan(mi2)
 SeqScan(t)
 IndexScan(kt)
 SeqScan(mk)
 IndexScan(it2)
 IndexScan(mi1)
 SeqScan(it1)
 IndexScan(k)
 SeqScan(rt)
 Leading((((n (ci ((((((mi2 t) kt) mk) it2) mi1) it1))) k) rt)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k,
movie_companies as mc,
company_type as ct,
company_name as cn
WHERE
t.id = ci.movie_id
AND t.id = mc.movie_id
AND t.id = mi1.movie_id
AND t.id = mk.movie_id
AND mc.company_type_id = ct.id
AND mc.company_id = cn.id
AND k.id = mk.keyword_id
AND mi1.info_type_id = it1.id
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (it1.id IN ('2'))
AND (mi1.info in ('Black and White','Color'))
AND (kt.kind in ('movie','tv movie','tv series'))
AND (rt.role in ('actor','composer','miscellaneous crew','producer','production designer'))
AND (n.gender in ('m') OR n.gender IS NULL)
AND (n.name_pcode_cf in ('A2365','A6252','C52','D1614','E1524','E2163','L1214','L2','P5215','Q5325','R2425','S1452','T5212','V4524','V4626'))
AND (t.production_year <= 2015)
AND (t.production_year >= 1990)
AND (cn.name in ('ABS-CBN','American Broadcasting Company (ABC)','British Broadcasting Corporation (BBC)'))
AND (ct.kind in ('distributors','production companies'))

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 3 1 1 1 1 0 1 1 1 0 1 3 4 3 4 4 4 3 4 4 5 4]
indexes_env_matrix for this sql:  [ 1  2  3  2  0  0  3  4 23  4  5 22  5  6 21  6  7 20  7  8 19  8  9 18
  9 10 17 10 11 16 11 12 15 12 13 14 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.2766121e-05 0.0000000e+00
 0.0000000e+00 5.0000000e-01 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 4.2857143e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.2946429e-03 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 1.5421748e-03 0.0000000e+00
 0.0000000e+00 0.0000000e+00 4.1666666e-01 7.0026720e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  119.5727870792566
Other difference exceed the threshold, need to switch module.
the difference value is:  119.5727870792566
Hash difference exceed the threshold, need to switch module.
the difference value is:  119.5727870792566
Nested loop difference exceed the threshold, need to switch module.
Planning took 1763.2ms
q4a_bao, predicted time: 5110.0
q4a_bao,(predicted 5110.0),/*+ HashJoin(mk k ct mc cn it1 kt t mi1 ci n rt)
 HashJoin(ct mc cn it1 kt t mi1 ci n rt)
 NestLoop(it1 kt t mi1 ci n rt)
 NestLoop(it1 kt t mi1 ci n)
 NestLoop(it1 kt t mi1 ci)
 NestLoop(it1 kt t mi1)
 NestLoop(kt t mi1)
 NestLoop(kt t)
 NestLoop(ct mc cn)
 NestLoop(mc cn)
 NestLoop(mk k)
 SeqScan(mk)
 IndexScan(k)
 SeqScan(ct)
 SeqScan(mc)
 IndexScan(cn)
 SeqScan(it1)
 SeqScan(kt)
 IndexScan(t)
 IndexScan(mi1)
 IndexScan(ci)
 IndexScan(n)
 IndexScan(rt)
 Leading(((mk k) ((ct (mc cn)) ((((it1 ((kt t) mi1)) ci) n) rt)))) */
---------------------------------------
sql_str:  SELECT MIN(mi_idx.info) AS rating,
       MIN(t.title) AS movie_title
FROM info_type AS it,
     keyword AS k,
     movie_info_idx AS mi_idx,
     movie_keyword AS mk,
     title AS t
WHERE it.info ='rating'
  AND k.keyword LIKE '%sequel%'
  AND mi_idx.info > '5.0'
  AND t.production_year > 2005
  AND t.id = mi_idx.movie_id
  AND t.id = mk.movie_id
  AND mk.movie_id = mi_idx.movie_id
  AND k.id = mk.keyword_id
  AND it.id = mi_idx.info_type_id;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 3 1 1 3 4 4 4]
indexes_env_matrix for this sql:  [1 2 9 2 3 4 3 0 0 4 5 8 5 6 7 6 0 0 7 0 0 8 0 0 9 0 0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 9.6891999e-05
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 3.7598395e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 3.9825663e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  123.30930612301324
Other difference exceed the threshold, need to switch module.
the difference value is:  123.30930612301324
Hash difference exceed the threshold, need to switch module.
the difference value is:  123.30930612301324
Nested loop difference exceed the threshold, need to switch module.
Planning took 78.7ms
q4a_job, predicted time: 5.8
q4a_job,(predicted 5.8),/*+ MergeJoin(t k mk it mi_idx)
 MergeJoin(k mk it mi_idx)
 MergeJoin(mk it mi_idx)
 MergeJoin(it mi_idx)
 IndexScan(t)
 IndexScan(k)
 SeqScan(mk)
 SeqScan(it)
 IndexScan(mi_idx)
 Leading((t (k (mk (it mi_idx))))) */
---------------------------------------
sql_str:  SELECT MIN(mi_idx.info) AS rating,
       MIN(t.title) AS movie_title
FROM info_type AS it,
     keyword AS k,
     movie_info_idx AS mi_idx,
     movie_keyword AS mk,
     title AS t
WHERE it.info ='rating'
  AND k.keyword LIKE '%sequel%'
  AND mi_idx.info > '9.0'
  AND t.production_year > 2010
  AND t.id = mi_idx.movie_id
  AND t.id = mk.movie_id
  AND mk.movie_id = mi_idx.movie_id
  AND k.id = mk.keyword_id
  AND it.id = mi_idx.info_type_id;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 0 3 3 4 4 4]
indexes_env_matrix for this sql:  [1 2 9 2 3 8 3 4 7 4 5 6 5 0 0 6 0 0 7 0 0 8 0 0 9 0 0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 9.6891999e-05
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 6.8172184e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.5569755e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  126.29405833841443
Other difference exceed the threshold, need to switch module.
the difference value is:  126.29405833841443
Hash difference exceed the threshold, need to switch module.
the difference value is:  126.29405833841443
Nested loop difference exceed the threshold, need to switch module.
Planning took 53.4ms
q4b_job, predicted time: 5.5
q4b_job,(predicted 5.5),/*+ MergeJoin(mi_idx t it mk k)
 MergeJoin(mi_idx t it mk)
 MergeJoin(mi_idx t it)
 MergeJoin(mi_idx t)
 SeqScan(mi_idx)
 SeqScan(t)
 IndexScan(it)
 IndexScan(mk)
 IndexScan(k)
 Leading(((((mi_idx t) it) mk) k)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k,
movie_companies as mc,
company_type as ct,
company_name as cn
WHERE
t.id = ci.movie_id
AND t.id = mc.movie_id
AND t.id = mi1.movie_id
AND t.id = mk.movie_id
AND mc.company_type_id = ct.id
AND mc.company_id = cn.id
AND k.id = mk.keyword_id
AND mi1.info_type_id = it1.id
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (it1.id IN ('2'))
AND (mi1.info in ('Color'))
AND (kt.kind in ('movie','tv series'))
AND (rt.role in ('actor','producer'))
AND (n.gender in ('m'))
AND (n.name_pcode_cf in ('B6261','B6526','J5252','M6352','R363','S3152','S5362'))
AND (t.production_year <= 1990)
AND (t.production_year >= 1950)
AND (cn.name in ('American Broadcasting Company (ABC)','Columbia Broadcasting System (CBS)','National Broadcasting Company (NBC)'))
AND (ct.kind in ('distributors'))

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 0 1 1 1 1 1 1 1 0 1 3 4 3 4 4 4 3 4 5 4 3 4]
indexes_env_matrix for this sql:  [ 1  2 23  2  3 22  3  4 21  4  5 20  5  6 19  6  7 18  7  8 17  8  9 16
  9 10 15 10 11 14 11 12 13 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.2766121e-05 0.0000000e+00
 0.0000000e+00 2.5000000e-01 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.4823278e-03 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 3.9539379e-03 0.0000000e+00
 0.0000000e+00 0.0000000e+00 1.6666667e-01 2.1578270e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  113.07062979918223
Other difference exceed the threshold, need to switch module.
the difference value is:  113.07062979918223
Hash difference exceed the threshold, need to switch module.
the difference value is:  113.07062979918223
Nested loop difference exceed the threshold, need to switch module.
Planning took 522.4ms
q5a_bao, predicted time: 5.5
q5a_bao,(predicted 5.5),/*+ MergeJoin(k n ci cn mc t kt mk ct rt mi1 it1)
 MergeJoin(n ci cn mc t kt mk ct rt mi1 it1)
 MergeJoin(n ci cn mc t kt mk ct rt mi1)
 MergeJoin(n ci cn mc t kt mk ct rt)
 MergeJoin(n ci cn mc t kt mk ct)
 MergeJoin(ci cn mc t kt mk ct)
 MergeJoin(cn mc t kt mk ct)
 MergeJoin(cn mc t kt mk)
 MergeJoin(cn mc t kt)
 MergeJoin(cn mc t)
 MergeJoin(mc t)
 SeqScan(k)
 IndexScan(n)
 IndexScan(ci)
 IndexScan(cn)
 IndexScan(mc)
 SeqScan(t)
 IndexScan(kt)
 IndexScan(mk)
 IndexScan(ct)
 IndexScan(rt)
 SeqScan(mi1)
 SeqScan(it1)
 Leading((k ((((n (ci ((((cn (mc t)) kt) mk) ct))) rt) mi1) it1))) */
---------------------------------------
sql_str:  SELECT MIN(t.title) AS typical_european_movie
FROM company_type AS ct,
     info_type AS it,
     movie_companies AS mc,
     movie_info AS mi,
     title AS t
WHERE ct.kind = 'production companies'
  AND mc.note LIKE '%(theatrical)%'
  AND mc.note LIKE '%(France)%'
  AND mi.info IN ('Sweden',
                  'Norway',
                  'Germany',
                  'Denmark',
                  'Swedish',
                  'Denish',
                  'Norwegian',
                  'German')
  AND t.production_year > 2005
  AND t.id = mi.movie_id
  AND t.id = mc.movie_id
  AND mc.movie_id = mi.movie_id
  AND ct.id = mc.company_type_id
  AND it.id = mi.info_type_id;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [0 1 1 0 3 3 4 4 3]
indexes_env_matrix for this sql:  [1 2 9 2 3 8 3 4 7 4 5 6 5 0 0 6 0 0 7 0 0 8 0 0 9 0 0]
query_enc_matrix for this sql:  [0.         0.         0.         0.         0.         0.
 0.         0.         0.         0.         0.         0.25
 0.         1.         0.         0.         0.         0.
 0.         0.         0.         0.         0.         0.
 0.00300368 0.         0.         0.0099919  0.         0.
 0.         0.         0.         0.         0.         0.
 0.         0.         0.         0.         0.         0.
 0.         0.39825663 0.         0.        ]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  125.77988903986929
Other difference exceed the threshold, need to switch module.
the difference value is:  125.77988903986929
Hash difference exceed the threshold, need to switch module.
the difference value is:  125.77988903986929
Nested loop difference exceed the threshold, need to switch module.
Planning took 43.2ms
q5a_job, predicted time: 1.0
q5a_job,(predicted 1.0),/*+ MergeJoin(t mc mi it ct)
 MergeJoin(t mc mi it)
 MergeJoin(t mc mi)
 MergeJoin(t mc)
 IndexScan(t)
 IndexScan(mc)
 SeqScan(mi)
 SeqScan(it)
 IndexScan(ct)
 Leading(((((t mc) mi) it) ct)) */
---------------------------------------
sql_str:  SELECT MIN(t.title) AS american_vhs_movie
FROM company_type AS ct,
     info_type AS it,
     movie_companies AS mc,
     movie_info AS mi,
     title AS t
WHERE ct.kind = 'production companies'
  AND mc.note LIKE '%(VHS)%'
  AND mc.note LIKE '%(USA)%'
  AND mc.note LIKE '%(1994)%'
  AND mi.info IN ('USA',
                  'America')
  AND t.production_year > 2010
  AND t.id = mi.movie_id
  AND t.id = mc.movie_id
  AND mc.movie_id = mi.movie_id
  AND ct.id = mc.company_type_id
  AND it.id = mi.info_type_id;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 0 3 3 4 4 5]
indexes_env_matrix for this sql:  [1 2 9 2 3 8 3 4 7 4 5 6 5 0 0 6 0 0 7 0 0 8 0 0 9 0 0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 2.5000000e-01 0.0000000e+00 1.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.9930023e-05
 0.0000000e+00 0.0000000e+00 3.6767006e-02 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.5569755e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  125.59515117736021
Other difference exceed the threshold, need to switch module.
the difference value is:  125.59515117736021
Hash difference exceed the threshold, need to switch module.
the difference value is:  125.59515117736021
Nested loop difference exceed the threshold, need to switch module.
Planning took 97.0ms
q5b_job, predicted time: 4.9
q5b_job,(predicted 4.9),/*+ MergeJoin(t mc mi it ct)
 HashJoin(t mc mi it)
 MergeJoin(mc mi it)
 MergeJoin(mi it)
 IndexScan(t)
 IndexScan(mc)
 IndexScan(mi)
 SeqScan(it)
 IndexScan(ct)
 Leading(((t (mc (mi it))) ct)) */
---------------------------------------
sql_str:  SELECT MIN(an.name) AS cool_actor_pseudonym, MIN(t.title) AS series_named_after_char FROM aka_name AS an, cast_info AS ci, company_name AS cn, keyword AS k, movie_companies AS mc, movie_keyword AS mk, name AS n, title AS t WHERE cn.country_code ='[us]' AND k.keyword ='character-name-in-title' AND an.person_id = n.id AND n.id = ci.person_id AND ci.movie_id = t.id AND t.id = mk.movie_id AND mk.keyword_id = k.id AND t.id = mc.movie_id AND mc.company_id = cn.id AND an.person_id = ci.person_id AND ci.movie_id = mc.movie_id AND ci.movie_id = mk.movie_id AND mc.movie_id = mk.movie_id;

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 3 4 4 4 4 4 5 4]
indexes_env_matrix for this sql:  [ 1  2 15  2  3 14  3  4 13  4  5 12  5  6 11  6  7 10  7  8  9  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 3.6416635e-01 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 7.4532309e-06
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  128.2627798669752
Other difference exceed the threshold, need to switch module.
the difference value is:  128.2627798669752
Hash difference exceed the threshold, need to switch module.
the difference value is:  128.2627798669752
Nested loop difference exceed the threshold, need to switch module.
Planning took 628.9ms
q6a_bao, predicted time: 4932.4
q6a_bao,(predicted 4932.4),/*+ NestLoop(mk k t ci an n mc cn)
 NestLoop(mk k t ci an n mc)
 MergeJoin(mk k t ci an n)
 NestLoop(an n)
 NestLoop(mk k t ci)
 NestLoop(mk k t)
 NestLoop(mk k)
 SeqScan(mk)
 IndexScan(k)
 IndexScan(t)
 IndexScan(ci)
 SeqScan(an)
 IndexScan(n)
 IndexScan(mc)
 IndexScan(cn)
 Leading(((((((mk k) t) ci) (an n)) mc) cn)) */
---------------------------------------
sql_str:  SELECT MIN(k.keyword) AS movie_keyword,
       MIN(n.name) AS actor_name,
       MIN(t.title) AS marvel_movie
FROM cast_info AS ci,
     keyword AS k,
     movie_keyword AS mk,
     name AS n,
     title AS t
WHERE k.keyword = 'marvel-cinematic-universe'
  AND n.name LIKE '%Downey%Robert%'
  AND t.production_year > 2010
  AND k.id = mk.keyword_id
  AND t.id = mk.movie_id
  AND t.id = ci.movie_id
  AND ci.movie_id = mk.movie_id
  AND n.id = ci.person_id;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 4 4 4 4]
indexes_env_matrix for this sql:  [1 2 9 2 3 8 3 4 7 4 5 6 5 0 0 6 0 0 7 0 0 8 0 0 9 0 0]
query_enc_matrix for this sql:  [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 7.45323086e-06
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.00000000e+00 0.00000000e+00 1.00060206e-04 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 1.55697554e-01
 0.00000000e+00 0.00000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  124.51781007553572
Other difference exceed the threshold, need to switch module.
the difference value is:  124.51781007553572
Hash difference exceed the threshold, need to switch module.
the difference value is:  124.51781007553572
Nested loop difference exceed the threshold, need to switch module.
Planning took 84.5ms
q6a_job, predicted time: 12.0
q6a_job,(predicted 12.0),/*+ MergeJoin(k n ci mk t)
 MergeJoin(n ci mk t)
 MergeJoin(n ci mk)
 MergeJoin(n ci)
 SeqScan(k)
 IndexScan(n)
 SeqScan(ci)
 SeqScan(mk)
 SeqScan(t)
 Leading((k (((n ci) mk) t))) */
---------------------------------------
sql_str:  SELECT MIN(k.keyword) AS movie_keyword,
       MIN(n.name) AS actor_name,
       MIN(t.title) AS hero_movie
FROM cast_info AS ci,
     keyword AS k,
     movie_keyword AS mk,
     name AS n,
     title AS t
WHERE k.keyword IN ('superhero',
                    'sequel',
                    'second-part',
                    'marvel-comics',
                    'based-on-comic',
                    'tv-special',
                    'fight',
                    'violence')
  AND n.name LIKE '%Downey%Robert%'
  AND t.production_year > 2014
  AND k.id = mk.keyword_id
  AND t.id = mk.movie_id
  AND t.id = ci.movie_id
  AND ci.movie_id = mk.movie_id
  AND n.id = ci.person_id;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 4 4 4 4]
indexes_env_matrix for this sql:  [1 2 9 2 3 8 3 4 7 4 5 6 5 0 0 6 0 0 7 0 0 8 0 0 9 0 0]
query_enc_matrix for this sql:  [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 5.96258469e-05
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.00000000e+00 0.00000000e+00 1.00060206e-04 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 1.85894787e-05
 0.00000000e+00 0.00000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  126.81857699544155
Other difference exceed the threshold, need to switch module.
the difference value is:  126.81857699544155
Hash difference exceed the threshold, need to switch module.
the difference value is:  126.81857699544155
Nested loop difference exceed the threshold, need to switch module.
Planning took 331.4ms
q6b_job, predicted time: 952.7
q6b_job,(predicted 952.7),/*+ MergeJoin(mk k ci n t)
 NestLoop(ci n t)
 NestLoop(ci n)
 MergeJoin(mk k)
 IndexScan(mk)
 SeqScan(k)
 IndexScan(ci)
 IndexScan(n)
 IndexScan(t)
 Leading(((mk k) ((ci n) t))) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
movie_keyword as mk,
keyword as k,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND t.id = mk.movie_id
AND mk.keyword_id = k.id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('tv movie','video movie'))
AND (t.production_year <= 2015)
AND (t.production_year >= 1975)
AND (mi1.info IN ('Biography','Fantasy','OFM:35 mm','OFM:Video','Romance','Sci-Fi','Sport','Thriller'))
AND (it1.id IN ('3','7'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 7.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 3.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 5000.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 500000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND rt.id = ci.role_id
AND (n.gender in ('f') OR n.gender IS NULL)
AND (n.name_pcode_nf in ('C6235') OR n.name_pcode_nf IS NULL)
AND (ci.note in ('(archive footage)') OR ci.note IS NULL)
AND (rt.role in ('actress'))
AND (it5.id in ('34'))

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 4 3 5 4 5 4 5 3 4]
indexes_env_matrix for this sql:  [ 1  2 31  2  3 30  3  4 29  4  5  6  5  0  0  6  7 28  7  8 27  8  9 26
  9 10 25 10 11 24 11 12 23 12 13 22 13 14 21 14 15 20 15 16 19 16 17 18
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0 28  0  0 29  0  0 30  0  0 31  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.0810786e-01
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 1.0000000e+00
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.9960392e-02 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04
 0.0000000e+00 1.0000000e+00 0.0000000e+00 1.5144364e-02 0.0000000e+00
 0.0000000e+00 6.8371450e-03 8.3333336e-02 7.9754597e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  94.99267457358387
the difference value is:  94.99267457358387
the difference value is:  94.99267457358387
Planning took 3649.4ms
q7a_bao, predicted time: 2.4
q7a_bao,(predicted 2.4),/*+ MergeJoin(k it3 an it1 mii1 n mi1 it5 kt rt pi1 ci it4 t mk mii2)
 MergeJoin(it3 an it1 mii1 n mi1 it5 kt rt pi1 ci it4 t mk mii2)
 MergeJoin(an it1 mii1 n mi1 it5 kt rt pi1 ci it4 t mk mii2)
 MergeJoin(it1 mii1 n mi1 it5 kt rt pi1 ci it4 t mk mii2)
 MergeJoin(mii1 n mi1 it5 kt rt pi1 ci it4 t mk mii2)
 MergeJoin(n mi1 it5 kt rt pi1 ci it4 t mk mii2)
 MergeJoin(mi1 it5 kt rt pi1 ci it4 t mk mii2)
 MergeJoin(it5 kt rt pi1 ci it4 t mk mii2)
 MergeJoin(kt rt pi1 ci it4 t mk mii2)
 MergeJoin(rt pi1 ci it4 t mk mii2)
 MergeJoin(pi1 ci it4 t mk mii2)
 MergeJoin(ci it4 t mk mii2)
 MergeJoin(it4 t mk mii2)
 MergeJoin(t mk mii2)
 MergeJoin(t mk)
 IndexScan(k)
 SeqScan(it3)
 IndexScan(an)
 IndexScan(it1)
 IndexScan(mii1)
 IndexScan(n)
 IndexScan(mi1)
 SeqScan(it5)
 SeqScan(kt)
 IndexScan(rt)
 IndexScan(pi1)
 IndexScan(ci)
 IndexScan(it4)
 SeqScan(t)
 SeqScan(mk)
 IndexScan(mii2)
 Leading((k (it3 (an (it1 (mii1 (n (mi1 (it5 (kt (rt (pi1 (ci (it4 ((t mk) mii2))))))))))))))) */
---------------------------------------
sql_str:  SELECT MIN(n.name) AS of_person,
       MIN(t.title) AS biography_movie
FROM aka_name AS an,
     cast_info AS ci,
     info_type AS it,
     link_type AS lt,
     movie_link AS ml,
     name AS n,
     person_info AS pi,
     title AS t
WHERE an.name LIKE '%a%'
  AND it.info ='mini biography'
  AND lt.link ='features'
  AND n.name_pcode_cf BETWEEN 'A' AND 'F'
  AND (n.gender='m'
       OR (n.gender = 'f'
           AND n.name LIKE 'B%'))
  AND pi.note ='Volker Boehm'
  AND t.production_year BETWEEN 1980 AND 1995
  AND n.id = an.person_id
  AND n.id = pi.person_id
  AND ci.person_id = n.id
  AND t.id = ci.movie_id
  AND ml.linked_movie_id = t.id
  AND lt.id = ml.link_type_id
  AND it.id = pi.info_type_id
  AND pi.person_id = an.person_id
  AND pi.person_id = ci.person_id
  AND an.person_id = ci.person_id
  AND ci.movie_id = ml.linked_movie_id;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 0 3 3 4 4 4 4 4 3]
indexes_env_matrix for this sql:  [ 1  2 15  2  3 14  3  4 13  4  5 12  5  6 11  6  7 10  7  8  9  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0]
query_enc_matrix for this sql:  [7.66374171e-01 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 8.84955749e-03 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 5.55555560e-02
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 1.00000000e+00 1.15377575e-01 0.00000000e+00
 9.78518437e-06 0.00000000e+00 0.00000000e+00 1.37478292e-01
 0.00000000e+00 0.00000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  123.26310169268422
Other difference exceed the threshold, need to switch module.
the difference value is:  123.26310169268422
Hash difference exceed the threshold, need to switch module.
the difference value is:  123.26310169268422
Nested loop difference exceed the threshold, need to switch module.
Planning took 498.7ms
q7a_job, predicted time: 15.8
q7a_job,(predicted 15.8),/*+ MergeJoin(pi it an ci t ml lt n)
 MergeJoin(pi it an ci t ml lt)
 MergeJoin(pi it an ci t ml)
 MergeJoin(pi it an ci t)
 MergeJoin(pi it an ci)
 MergeJoin(pi it an)
 MergeJoin(pi it)
 SeqScan(pi)
 SeqScan(it)
 IndexScan(an)
 IndexScan(ci)
 SeqScan(t)
 IndexScan(ml)
 IndexScan(lt)
 IndexScan(n)
 Leading((((((((pi it) an) ci) t) ml) lt) n)) */
---------------------------------------
sql_str:  SELECT MIN(n.name) AS of_person,
       MIN(t.title) AS biography_movie
FROM aka_name AS an,
     cast_info AS ci,
     info_type AS it,
     link_type AS lt,
     movie_link AS ml,
     name AS n,
     person_info AS pi,
     title AS t
WHERE an.name LIKE '%a%'
  AND it.info ='mini biography'
  AND lt.link ='features'
  AND n.name_pcode_cf LIKE 'D%'
  AND n.gender='m'
  AND pi.note ='Volker Boehm'
  AND t.production_year BETWEEN 1980 AND 1984
  AND n.id = an.person_id
  AND n.id = pi.person_id
  AND ci.person_id = n.id
  AND t.id = ci.movie_id
  AND ml.linked_movie_id = t.id
  AND lt.id = ml.link_type_id
  AND it.id = pi.info_type_id
  AND pi.person_id = an.person_id
  AND pi.person_id = ci.person_id
  AND an.person_id = ci.person_id
  AND ci.movie_id = ml.linked_movie_id;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 0 3 3 4 4 4 4 4 3]
indexes_env_matrix for this sql:  [ 1  2 15  2  3 14  3  4 13  4  5 12  5  6 11  6  7 10  7  8  9  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0]
query_enc_matrix for this sql:  [7.6637417e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.5555556e-02 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 1.0000000e+00 2.3425845e-02 0.0000000e+00
 9.7851844e-06 0.0000000e+00 0.0000000e+00 3.1003295e-02 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  121.77314874498668
Other difference exceed the threshold, need to switch module.
the difference value is:  121.77314874498668
Hash difference exceed the threshold, need to switch module.
the difference value is:  121.77314874498668
Nested loop difference exceed the threshold, need to switch module.
Planning took 234.8ms
q7b_job, predicted time: 11.5
q7b_job,(predicted 11.5),/*+ MergeJoin(it pi n ci t ml lt an)
 MergeJoin(it pi n ci t ml lt)
 MergeJoin(it pi n ci t ml)
 MergeJoin(it pi n ci t)
 MergeJoin(it pi n ci)
 MergeJoin(it pi n)
 MergeJoin(pi n)
 SeqScan(it)
 IndexScan(pi)
 IndexScan(n)
 SeqScan(ci)
 SeqScan(t)
 SeqScan(ml)
 IndexScan(lt)
 IndexScan(an)
 Leading(((((((it (pi n)) ci) t) ml) lt) an)) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND mii2.movie_id = mii1.movie_id
AND mi1.movie_id = mii1.movie_id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('episode','movie'))
AND (t.production_year <= 2015)
AND (t.production_year >= 1925)
AND (mi1.info IN ('Black and White'))
AND (it1.id IN ('2'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 7.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 3.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 10000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND an.person_id = pi1.person_id
AND rt.id = ci.role_id
AND (n.gender in ('f') OR n.gender IS NULL)
AND (n.name_pcode_nf in ('A5136','B4532','C6435','H4524','J2451','J6362','L2525','M6415','S4125','W5245'))
AND (ci.note in ('(writer)') OR ci.note IS NULL)
AND (rt.role in ('actress','cinematographer','writer'))
AND (it5.id in ('26'))

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 1 1 0 1 1 1 3 4 4 4 3 4 4 3 5 4 3 3 4 3]
indexes_env_matrix for this sql:  [ 1  2 27  2  3 26  3  4 25  4  5 24  5  6 23  6  7 22  7  8 21  8  9 20
  9 10 19 10 11 18 11 12 17 12 13 16 13 14 15 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.1365104e-01
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 0.0000000e+00
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.8122478e-03 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04
 0.0000000e+00 0.0000000e+00 0.0000000e+00 3.9400204e-04 0.0000000e+00
 0.0000000e+00 4.6092607e-02 2.5000000e-01 9.3211162e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  110.06059499986766
Other difference exceed the threshold, need to switch module.
the difference value is:  110.06059499986766
Hash difference exceed the threshold, need to switch module.
the difference value is:  110.06059499986766
Nested loop difference exceed the threshold, need to switch module.
Planning took 2139.2ms
q8a_bao, predicted time: 6224.2
q8a_bao,(predicted 6224.2),/*+ MergeJoin(rt kt it3 t mii1 mi1 mii2 it4 it1 ci it5 n pi1 an)
 NestLoop(it5 n pi1 an)
 NestLoop(it5 n pi1)
 NestLoop(n pi1)
 NestLoop(rt kt it3 t mii1 mi1 mii2 it4 it1 ci)
 NestLoop(kt it3 t mii1 mi1 mii2 it4 it1 ci)
 NestLoop(kt it3 t mii1 mi1 mii2 it4 it1)
 NestLoop(kt it3 t mii1 mi1 mii2 it4)
 NestLoop(kt it3 t mii1 mi1 mii2)
 NestLoop(it3 t mii1 mi1 mii2)
 NestLoop(it3 t mii1 mi1)
 NestLoop(it3 t mii1)
 NestLoop(t mii1)
 SeqScan(rt)
 SeqScan(kt)
 SeqScan(it3)
 IndexScan(t)
 IndexScan(mii1)
 IndexScan(mi1)
 IndexScan(mii2)
 SeqScan(it4)
 IndexScan(it1)
 IndexScan(ci)
 SeqScan(it5)
 SeqScan(n)
 IndexScan(pi1)
 IndexScan(an)
 Leading(((rt ((((kt (((it3 (t mii1)) mi1) mii2)) it4) it1) ci)) ((it5 (n pi1)) an))) */
---------------------------------------
sql_str:  SELECT MIN(an1.name) AS actress_pseudonym,
       MIN(t.title) AS japanese_movie_dubbed
FROM aka_name AS an1,
     cast_info AS ci,
     company_name AS cn,
     movie_companies AS mc,
     name AS n1,
     role_type AS rt,
     title AS t
WHERE ci.note ='(voice: English version)'
  AND cn.country_code ='[jp]'
  AND mc.note LIKE '%(Japan)%'
  AND mc.note NOT LIKE '%(USA)%'
  AND n1.name LIKE '%Yo%'
  AND n1.name NOT LIKE '%Yu%'
  AND rt.role ='actress'
  AND an1.person_id = n1.id
  AND n1.id = ci.person_id
  AND ci.movie_id = t.id
  AND t.id = mc.movie_id
  AND mc.company_id = cn.id
  AND ci.role_id = rt.id
  AND an1.person_id = ci.person_id
  AND ci.movie_id = mc.movie_id;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 0 1 1 0 3 3 4 4 3 4 4]
indexes_env_matrix for this sql:  [ 1  2 13  2  3 12  3  4 11  4  5 10  5  6  9  6  7  8  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0]
query_enc_matrix for this sql:  [0.         1.         0.         0.         0.00246477 0.
 0.         0.         0.02693226 0.         0.         0.
 0.         0.         0.         0.         0.         0.
 0.         0.         0.         0.         0.         0.
 0.00437809 0.         0.         0.         0.         0.
 0.         0.         0.         0.         0.         0.
 0.         0.         0.         0.02019992 0.         0.
 0.08333334 1.         0.         0.        ]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  122.23072053129661
Other difference exceed the threshold, need to switch module.
the difference value is:  122.23072053129661
Hash difference exceed the threshold, need to switch module.
the difference value is:  122.23072053129661
Nested loop difference exceed the threshold, need to switch module.
Planning took 309.1ms
q8a_job, predicted time: 5.4
q8a_job,(predicted 5.4),/*+ MergeJoin(cn t an1 n1 rt ci mc)
 MergeJoin(t an1 n1 rt ci mc)
 MergeJoin(an1 n1 rt ci mc)
 MergeJoin(n1 rt ci mc)
 HashJoin(rt ci mc)
 MergeJoin(ci mc)
 SeqScan(cn)
 IndexScan(t)
 SeqScan(an1)
 SeqScan(n1)
 IndexScan(rt)
 IndexScan(ci)
 SeqScan(mc)
 Leading((cn (t (an1 (n1 (rt (ci mc))))))) */
---------------------------------------
sql_str:  SELECT MIN(an.name) AS acress_pseudonym,
       MIN(t.title) AS japanese_anime_movie
FROM aka_name AS an,
     cast_info AS ci,
     company_name AS cn,
     movie_companies AS mc,
     name AS n,
     role_type AS rt,
     title AS t
WHERE ci.note ='(voice: English version)'
  AND cn.country_code ='[jp]'
  AND mc.note LIKE '%(Japan)%'
  AND mc.note NOT LIKE '%(USA)%'
  AND (mc.note LIKE '%(2006)%'
       OR mc.note LIKE '%(2007)%')
  AND n.name LIKE '%Yo%'
  AND n.name NOT LIKE '%Yu%'
  AND rt.role ='actress'
  AND t.production_year BETWEEN 2006 AND 2007
  AND (t.title LIKE 'One Piece%'
       OR t.title LIKE 'Dragon Ball Z%')
  AND an.person_id = n.id
  AND n.id = ci.person_id
  AND ci.movie_id = t.id
  AND t.id = mc.movie_id
  AND mc.company_id = cn.id
  AND ci.role_id = rt.id
  AND an.person_id = ci.person_id
  AND ci.movie_id = mc.movie_id;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 3 4 4 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 13  2  3 12  3  4 11  4  5 10  5  6  9  6  7  8  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.4647708e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.6932258e-02 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.0543255e-04
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.0199923e-02 0.0000000e+00
 0.0000000e+00 0.0000000e+00 8.3333336e-02 1.6611873e-05 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  124.33958990234085
Other difference exceed the threshold, need to switch module.
the difference value is:  124.33958990234085
Hash difference exceed the threshold, need to switch module.
the difference value is:  124.33958990234085
Nested loop difference exceed the threshold, need to switch module.
Planning took 1085.0ms
q8b_job, predicted time: 1.0
q8b_job,(predicted 1.0),/*+ MergeJoin(mc cn t ci rt n an)
 MergeJoin(mc cn t ci rt n)
 MergeJoin(mc cn t ci rt)
 MergeJoin(mc cn t ci)
 MergeJoin(mc cn t)
 MergeJoin(mc cn)
 SeqScan(mc)
 SeqScan(cn)
 IndexScan(t)
 SeqScan(ci)
 SeqScan(rt)
 IndexScan(n)
 SeqScan(an)
 Leading(((((((mc cn) t) ci) rt) n) an)) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
movie_keyword as mk,
keyword as k
WHERE
t.id = mi1.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND t.id = mk.movie_id
AND mii2.movie_id = mii1.movie_id
AND mi1.movie_id = mii1.movie_id
AND mk.movie_id = mi1.movie_id
AND mk.keyword_id = k.id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('episode','movie'))
AND (t.production_year <= 1975)
AND (t.production_year >= 1925)
AND (mi1.info IN ('PCS:Spherical','PFM:35 mm','RAT:1.33 : 1','RAT:1.37 : 1'))
AND (it1.id IN ('1','16','7'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 7.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 3.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 1000.0)

Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 5 3 3 5]
indexes_env_matrix for this sql:  [ 1  2 19  2  3 18  3  4 17  4  5 16  5  6 15  6  7 14  7  8 13  8  9 12
  9 10 11 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 8.8495575e-03 8.8495575e-03 0.0000000e+00 1.0000000e+00
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 4.3821599e-02 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04
 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.3999696e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  116.90656532347376
Other difference exceed the threshold, need to switch module.
the difference value is:  116.90656532347376
Hash difference exceed the threshold, need to switch module.
the difference value is:  116.90656532347376
Nested loop difference exceed the threshold, need to switch module.
Planning took 309.2ms
q9a_bao, predicted time: 33.1
q9a_bao,(predicted 33.1),/*+ MergeJoin(mi1 t mii1 it3 mii2 it4 kt mk k it1)
 MergeJoin(mi1 t mii1 it3 mii2 it4 kt mk k)
 MergeJoin(mi1 t mii1 it3 mii2 it4 kt mk)
 MergeJoin(t mii1 it3 mii2 it4 kt mk)
 MergeJoin(t mii1 it3 mii2 it4 kt)
 MergeJoin(t mii1 it3 mii2 it4)
 MergeJoin(t mii1 it3 mii2)
 MergeJoin(t mii1 it3)
 MergeJoin(t mii1)
 IndexScan(mi1)
 SeqScan(t)
 IndexScan(mii1)
 SeqScan(it3)
 IndexScan(mii2)
 IndexScan(it4)
 SeqScan(kt)
 IndexScan(mk)
 SeqScan(k)
 SeqScan(it1)
 Leading((((mi1 ((((((t mii1) it3) mii2) it4) kt) mk)) k) it1)) */
---------------------------------------
sql_str:  SELECT MIN(an.name) AS alternative_name,
       MIN(chn.name) AS character_name,
       MIN(t.title) AS movie
FROM aka_name AS an,
     char_name AS chn,
     cast_info AS ci,
     company_name AS cn,
     movie_companies AS mc,
     name AS n,
     role_type AS rt,
     title AS t
WHERE ci.note IN ('(voice)',
                  '(voice: Japanese version)',
                  '(voice) (uncredited)',
                  '(voice: English version)')
  AND cn.country_code ='[us]'
  AND mc.note IS NOT NULL
  AND (mc.note LIKE '%(USA)%'
       OR mc.note LIKE '%(worldwide)%')
  AND n.gender ='f'
  AND n.name LIKE '%Ang%'
  AND rt.role ='actress'
  AND t.production_year BETWEEN 2005 AND 2015
  AND ci.movie_id = t.id
  AND t.id = mc.movie_id
  AND ci.movie_id = mc.movie_id
  AND mc.company_id = cn.id
  AND ci.role_id = rt.id
  AND n.id = ci.person_id
  AND chn.id = ci.person_role_id
  AND an.person_id = n.id
  AND an.person_id = ci.person_id;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 0 1 1 3 4 4 3 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 15  2  3 14  3  4 13  4  5 12  5  6 11  6  7 10  7  8  9  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0]
query_enc_matrix for this sql:  [1.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.33155005e-02 1.00000000e+00 0.00000000e+00 0.00000000e+00
 3.64166349e-01 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.11337155e-01 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 2.35153475e-05 0.00000000e+00
 0.00000000e+00 0.00000000e+00 8.33333358e-02 4.36913639e-01
 0.00000000e+00 0.00000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  125.33146732922363
Other difference exceed the threshold, need to switch module.
the difference value is:  125.33146732922363
Hash difference exceed the threshold, need to switch module.
the difference value is:  125.33146732922363
Nested loop difference exceed the threshold, need to switch module.
Planning took 98.6ms
q9a_job, predicted time: 7.1
q9a_job,(predicted 7.1),/*+ MergeJoin(cn ci n t rt chn mc an)
 MergeJoin(cn ci n t rt chn mc)
 MergeJoin(ci n t rt chn mc)
 MergeJoin(ci n t rt chn)
 MergeJoin(ci n t rt)
 MergeJoin(ci n t)
 MergeJoin(ci n)
 SeqScan(cn)
 IndexScan(ci)
 SeqScan(n)
 IndexScan(t)
 SeqScan(rt)
 SeqScan(chn)
 SeqScan(mc)
 SeqScan(an)
 Leading(((cn (((((ci n) t) rt) chn) mc)) an)) */
---------------------------------------
sql_str:  SELECT MIN(an.name) AS alternative_name,
       MIN(chn.name) AS voiced_character,
       MIN(n.name) AS voicing_actress,
       MIN(t.title) AS american_movie
FROM aka_name AS an,
     char_name AS chn,
     cast_info AS ci,
     company_name AS cn,
     movie_companies AS mc,
     name AS n,
     role_type AS rt,
     title AS t
WHERE ci.note = '(voice)'
  AND cn.country_code ='[us]'
  AND mc.note LIKE '%(200%)%'
  AND (mc.note LIKE '%(USA)%'
       OR mc.note LIKE '%(worldwide)%')
  AND n.gender ='f'
  AND n.name LIKE '%Angel%'
  AND rt.role ='actress'
  AND t.production_year BETWEEN 2007 AND 2010
  AND ci.movie_id = t.id
  AND t.id = mc.movie_id
  AND ci.movie_id = mc.movie_id
  AND mc.company_id = cn.id
  AND ci.role_id = rt.id
  AND n.id = ci.person_id
  AND chn.id = ci.person_role_id
  AND an.person_id = n.id
  AND an.person_id = ci.person_id;


Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [0, 0, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 0 1 1 3 4 4 3 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 15  2  3 14  3  4 13  4  5 12  5  6 11  6  7 10  7  8  9  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.9052075e-02
 1.0000000e+00 0.0000000e+00 0.0000000e+00 3.6416635e-01 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 3.7327018e-02
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.3515347e-05 0.0000000e+00
 0.0000000e+00 0.0000000e+00 8.3333336e-02 2.0096926e-01 0.0000000e+00
 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [0 0 1 0]
the difference value is:  123.2553572312629
Other difference exceed the threshold, need to switch module.
the difference value is:  123.2553572312629
Hash difference exceed the threshold, need to switch module.
the difference value is:  123.2553572312629
Nested loop difference exceed the threshold, need to switch module.
Planning took 125.4ms
q9b_job, predicted time: 32.1
q9b_job,(predicted 32.1),/*+ MergeJoin(chn n cn mc ci an t rt)
 MergeJoin(n cn mc ci an t rt)
 MergeJoin(n cn mc ci an t)
 MergeJoin(cn mc ci an t)
 MergeJoin(mc ci an t)
 MergeJoin(ci an t)
 MergeJoin(ci an)
 IndexScan(chn)
 IndexScan(n)
 IndexScan(cn)
 SeqScan(mc)
 SeqScan(ci)
 IndexScan(an)
 SeqScan(t)
 IndexScan(rt)
 Leading((chn ((n (cn (mc ((ci an) t)))) rt))) */
In this iteration, conv_module_other_0 is used 4173 times
In this iteration, conv_module_other_1 is used 2275 times
In this iteration, conv_module_other_2 is used 0 times
In this iteration, conv_module_other_3 is used 0 times
In this iteration, conv_module_hash_join_0 is used 4173 times
In this iteration, conv_module_hash_join_1 is used 2275 times
In this iteration, conv_module_hash_join_2 is used 0 times
In this iteration, conv_module_hash_join_3 is used 0 times
In this iteration, conv_module_nested_loop_join_0 is used 4173 times
In this iteration, conv_module_nested_loop_join_1 is used 2275 times
In this iteration, conv_module_nested_loop_join_2 is used 0 times
In this iteration, conv_module_nested_loop_join_3 is used 0 times