Looking up params by name: Balsa_JOBRandSplit_IMDB_BAO_changed
BalsaAgent params:
{
  adamw: None
  agent_checkpoint: None
  avoid_eq_filters: False
  beam: 20
  bs: 1024
  bushy: True
  check_hint: True
  cls: <class 'experiments.Balsa_JOBRandSplit_IMDB_BAO_changed'>
  cost_model: "mincardcost"
  cross_entropy: False
  db: "imdbload"
  dedup_training_data: True
  drop_cache: True
  dropout: 0.0
  early_stop_on_skip_fraction: None
  ema_decay: 0.95
  engine: "postgres"
  engine_dialect_query_dir: None
  epochs: 100
  epsilon_greedy: 0
  epsilon_greedy_random_plan: False
  epsilon_greedy_random_transform: False
  epsilon_greedy_within_beam_search: False
  explore_soft_v: False
  explore_visit_counts: False
  explore_visit_counts_latency_sort: False
  explore_visit_counts_sort: True
  final_decay_rate: None
  finetune_out_mlp_only: False
  generic_ops_only_for_min_card_cost: False
  gradient_clip_val: 0
  increment_iter_despite_timeouts: True
  inherit_optimizer_state: False
  init_experience: "data/IMDB_BAO_changed/initial_policy_data.pkl"
  initial_timeout_ms: None
  l2_lambda: 0
  label_transform_running_stats: False
  label_transforms: ['log1p', 'standardize']
  linear_decay_to_zero: False
  loss_type: None
  lr: 0.001
  lr_decay_iters: None
  lr_decay_rate: None
  lr_piecewise: [(0, 0.001), (60, 0.0005), (110, 0.00025), (160, 0.000125), (210, 0.0001)]
  on_policy: True
  param_noise: 0.0
  param_tau: 1.0
  per_transition_sgd_steps: -1
  perturb_query_features: None
  physical_execution_hindsight: False
  plan_physical: True
  planner_config: None
  pos_embs: True
  prev_replay_buffers_glob: None
  prev_replay_buffers_glob_val: None
  prev_replay_keep_last_fraction: 1
  query_dir: "queries/sample_queries_imdb_changed"
  query_glob: ['*.sql']
  real_use_plan_restrictions: True
  reduce_lr_within_val_iter: False
  relax_timeout_factor: None
  relax_timeout_on_n_timeout_iters: None
  replay_buffer_reset_at_iter: None
  run_baseline: False
  search_method: "beam_bk"
  search_space_join_ops: ['Hash Join', 'Merge Join', 'Nested Loop']
  search_space_scan_ops: ['Index Scan', 'Index Only Scan', 'Seq Scan']
  search_until_n_complete_plans: 10
  sim: True
  sim_checkpoint: "checkpoints/IMDB_BAO_changed/epoch=14.ckpt"
  sim_data_collection_intermediate_goals: True
  sim_query_featurizer: True
  sim_use_plan_restrictions: True
  skip_sim_init_iter_1p: False
  skip_training_on_expert: True
  skip_training_on_timeouts: False
  special_timeout_label: True
  test_after_n_iters: 0
  test_every_n_iters: 1
  test_query_glob: ['test12b.sql', 'test3a.sql', 'test38b.sql', 'test31c.sql', 'test22c.sql', 'test21b.sql', 'test37b.sql', 'test16c.sql', 'test18b.sql', 'test2b.sql', 'test40a.sql', 'test6c.sql', 'test7c.sql', 'test35a.sql', 'test36b.sql', 'test8c.sql', 'test15c.sql', 'test19c.sql', 'test27c.sql', 'test1a.sql']
  test_using_retrained_model: False
  timeout_slack: 2
  track_model_moving_averages: False
  tree_conv: True
  tree_conv_version: None
  update_label_stats_every_iter: True
  use_adaptive_lr: None
  use_adaptive_lr_decay_to_zero: None
  use_cache: True
  use_ema_source: False
  use_last_n_iters: -1
  use_local_execution: True
  use_new_data_only: False
  use_timeout: True
  v2: True
  val_iters: 20
  validate_early_stop_patience: 3
  validate_every_n_epochs: 5
  validate_fraction: 0.1
}
Connected to ray!  Resources: {'node:172.17.0.2': 1.0, 'memory': 47296860980.0, 'GPU': 3.0, 'accelerator_type:G': 1.0, 'CPU': 36.0, 'pg': 1.0, 'object_store_memory': 23648430489.0}
100 train queries: ['test10a', 'test10b', 'test10c', 'test11a', 'test11b', 'test11c', 'test12a', 'test12c', 'test13a', 'test13b', 'test13c', 'test14a', 'test14b', 'test14c', 'test15a', 'test15b', 'test16a', 'test16b', 'test17a', 'test17b', 'test17c', 'test18a', 'test18c', 'test19a', 'test19b', 'test1b', 'test1c', 'test20a', 'test20b', 'test20c', 'test21a', 'test21c', 'test22a', 'test22b', 'test23a', 'test23b', 'test23c', 'test24a', 'test24b', 'test24c', 'test25a', 'test25b', 'test25c', 'test26a', 'test26b', 'test26c', 'test27a', 'test27b', 'test28a', 'test28b', 'test28c', 'test29a', 'test29b', 'test29c', 'test2a', 'test2c', 'test30a', 'test30b', 'test30c', 'test31a', 'test31b', 'test32a', 'test32b', 'test32c', 'test33a', 'test33b', 'test33c', 'test34a', 'test34b', 'test34c', 'test35b', 'test35c', 'test36a', 'test36c', 'test37a', 'test37c', 'test38a', 'test38c', 'test39a', 'test39b', 'test39c', 'test3b', 'test3c', 'test40b', 'test40c', 'test4a', 'test4b', 'test4c', 'test5a', 'test5b', 'test5c', 'test6a', 'test6b', 'test7a', 'test7b', 'test8a', 'test8b', 'test9a', 'test9b', 'test9c']
20 test queries: ['test12b', 'test15c', 'test16c', 'test18b', 'test19c', 'test1a', 'test21b', 'test22c', 'test27c', 'test2b', 'test31c', 'test35a', 'test36b', 'test37b', 'test38b', 'test3a', 'test40a', 'test6c', 'test7c', 'test8c']
latency_expert/workload (seconds): 1016.01 (100 queries)
latency_expert_test/workload (seconds): 235.44 (20 queries)
Number of joins [3, 15], avg 9.9
Search space (old=query nodes; new=agent action space):
old: ['Index Only Scan' 'Index Scan' 'Seq Scan'] ['Hash Join' 'Nested Loop'] ['FinalizeAggregate' 'Gather' 'Gather Merge' 'Hash' 'Hash Join'
 'Index Only Scan' 'Index Scan' 'Materialize' 'Nested Loop'
 'PartialAggregate' 'Seq Scan' 'SimpleAggregate' 'Sort']
new: ['Index Only Scan' 'Index Scan' 'Seq Scan'] ['Hash Join' 'Merge Join' 'Nested Loop'] ['FinalizeAggregate' 'Gather' 'Gather Merge' 'Hash' 'Hash Join'
 'Index Only Scan' 'Index Scan' 'Materialize' 'Nested Loop'
 'PartialAggregate' 'Seq Scan' 'SimpleAggregate' 'Sort']
plans_lib.FilterScansOrJoins()
plans_lib.GatherUnaryFiltersInfo()
postgres.EstimateFilterRows()
236 unique filters
{('cast_info AS ci', "((ci.note = '(archive footage)'::text) OR (ci.note IS NULL))"): 22040471,
 ('cast_info AS ci', "((ci.note = '(executive producer)'::text) OR (ci.note IS NULL))"): 22372469,
 ('cast_info AS ci', "((ci.note = '(writer)'::text) OR (ci.note IS NULL))"): 22241379,
 ('cast_info AS ci', '((ci.note = ANY (\'{(deviser),(producer),"(production assistant)","(senior producer)","(supervising producer)",(writer)}\'::text[])) OR (ci.note IS NULL))'): 23077311,
 ('cast_info AS ci', "(ci.note = '(producer)'::text)"): 1423314,
 ('cast_info AS ci', '(ci.note = ANY (\'{"(voice) (uncredited)","(voice: English version)"}\'::text[]))'): 118308,
 ('cast_info AS ci', '(ci.note = ANY (\'{"(voice: Japanese version)","(voice) (uncredited)","(voice: English version)"}\'::text[]))'): 154524,
 ('cast_info AS ci', '(ci.note = ANY (\'{(producer),"(executive producer)"}\'::text[]))'): 2451866,
 ('cast_info AS ci', '(ci.note = ANY (\'{(voice),"(voice: Japanese version)","(voice) (uncredited)","(voice: English version)"}\'::text[]))'): 845055,
 ('cast_info AS ci', '(ci.note = ANY (\'{(writer),"(head writer)","(story editor)"}\'::text[]))'): 822118,
 ('cast_info AS ci', '(ci.note = ANY (\'{(writer),"(head writer)","(written by)",(story),"(story editor)"}\'::text[]))'): 1195149,
 ('cast_info AS ci', '(ci.note IS NULL)'): 21967802,
 ('char_name AS chn', "((chn.name IS NOT NULL) AND ((chn.name ~~ '%man%'::text) OR (chn.name ~~ '%Man%'::text)))"): 125924,
 ('comp_cast_type AS cct1', "((cct1.kind)::text = 'cast'::text)"): 1,
 ('comp_cast_type AS cct2', "((cct2.kind)::text ~~ '%complete%'::text)"): 1,
 ('company_name AS cn', "(((cn.country_code)::text = '[us]'::text) AND (cn.name = 'DreamWorks Animation'::text))"): 1,
 ('company_name AS cn', "((cn.country_code)::text = '[de]'::text)"): 10230,
 ('company_name AS cn', "((cn.country_code)::text = '[uk]'::text)"): 22,
 ('company_name AS cn', "((cn.country_code)::text = '[us]'::text)"): 85578,
 ('company_name AS cn', '(cn.name = ANY (\'{"American Broadcasting Company (ABC)","Columbia Broadcasting System (CBS)","National Broadcasting Company (NBC)"}\'::text[]))'): 3,
 ('company_name AS cn', '(cn.name = ANY (\'{"Columbia Broadcasting System (CBS)","Fox Network","Independent Television (ITV)","Metro-Goldwyn-Mayer (MGM)","National Broadcasting Company (NBC)","Shout! Factory","Universal Pictures","Universal TV","Warner Bros"}\'::text[]))'): 10,
 ('company_name AS cn', '(cn.name = ANY (\'{"Columbia Broadcasting System (CBS)","Metro-Goldwyn-Mayer (MGM)","Paramount Pictures","Pathé Frères","Universal Pictures","Warner Home Video"}\'::text[]))'): 7,
 ('company_name AS cn', '(cn.name = ANY (\'{"Fox Network","Independent Television (ITV)","Metro-Goldwyn-Mayer (MGM)","National Broadcasting Company (NBC)","Paramount Pictures","Shout! Factory","Sony Pictures Home Entertainment","Universal Pictures","Universal TV"}\'::text[]))'): 10,
 ('company_name AS cn', '(cn.name = ANY (\'{"Independent Television (ITV)","Metro-Goldwyn-Mayer (MGM)","National Broadcasting Company (NBC)","Paramount Pictures","Shout! Factory","Sony Pictures Home Entertainment","Universal Pictures","Universal TV"}\'::text[]))'): 9,
 ('company_name AS cn', '(cn.name = ANY (\'{ABS-CBN,"American Broadcasting Company (ABC)","British Broadcasting Corporation (BBC)"}\'::text[]))'): 3,
 ('company_type AS ct', "((ct.kind)::text = 'distributors'::text)"): 1,
 ('company_type AS ct', "((ct.kind)::text = 'production companies'::text)"): 1,
 ('company_type AS ct', '((ct.kind)::text = ANY (\'{distributors,"production companies"}\'::text[]))'): 2,
 ('info_type AS it', "((it.info)::text = 'rating'::text)"): 1,
 ('info_type AS it', "((it.info)::text = 'release dates'::text)"): 1,
 ('info_type AS it1', "((it1.info)::text = 'budget'::text)"): 1,
 ('info_type AS it1', "((it1.info)::text = 'genres'::text)"): 1,
 ('info_type AS it1', '(it1.id = 13)'): 1,
 ('info_type AS it1', '(it1.id = 18)'): 1,
 ('info_type AS it1', '(it1.id = 2)'): 1,
 ('info_type AS it1', '(it1.id = 3)'): 1,
 ('info_type AS it1', '(it1.id = 5)'): 1,
 ('info_type AS it1', '(it1.id = 7)'): 1,
 ('info_type AS it1', '(it1.id = 8)'): 1,
 ('info_type AS it2', "((it2.info)::text = 'rating'::text)"): 1,
 ('info_type AS it2', "((it2.info)::text = 'release dates'::text)"): 1,
 ('info_type AS it2', "((it2.info)::text = 'votes'::text)"): 1,
 ('info_type AS it2', '(it2.id = 18)'): 1,
 ('info_type AS it2', '(it2.id = 2)'): 1,
 ('info_type AS it2', '(it2.id = 3)'): 1,
 ('info_type AS it2', '(it2.id = 4)'): 1,
 ('info_type AS it2', '(it2.id = 6)'): 1,
 ('info_type AS it2', '(it2.id = 7)'): 1,
 ('info_type AS it2', '(it2.id = 8)'): 1,
 ('info_type AS it3', '(it3.id = 100)'): 1,
 ('info_type AS it4', '(it4.id = 101)'): 1,
 ('info_type AS it5', '(it5.id = 19)'): 1,
 ('info_type AS it5', '(it5.id = 25)'): 1,
 ('info_type AS it5', '(it5.id = 26)'): 1,
 ('info_type AS it5', '(it5.id = 31)'): 1,
 ('info_type AS it5', '(it5.id = 32)'): 1,
 ('info_type AS it5', '(it5.id = 34)'): 1,
 ('keyword AS k', "(k.keyword = '10,000-mile-club'::text)"): 1,
 ('keyword AS k', "(k.keyword = 'character-name-in-title'::text)"): 1,
 ('keyword AS k', "(k.keyword = 'marvel-cinematic-universe'::text)"): 1,
 ('keyword AS k', "(k.keyword = ANY ('{based-on-comic,tv-special,fight,violence,magnet,web,claw,laser}'::text[]))"): 8,
 ('keyword AS k', "(k.keyword = ANY ('{based-on-play,cigarette-smoking,friendship,independent-film,jealousy,lesbian-sex,male-nudity,marriage,mother-daughter-relationship,one-word-title,oral-sex,police,singing,song}'::text[]))"): 14,
 ('keyword AS k', "(k.keyword = ANY ('{based-on-play,dog,family-relationships,father-son-relationship,female-nudity,hardcore,husband-wife-relationship,independent-film,lesbian-sex,love,marriage,mother-daughter-relationship,nudity,one-word-title,police,sequel,sex,singer}'::text[]))"): 18,
 ('keyword AS k', "(k.keyword = ANY ('{death,elmo,father-son-relationship,fight,gay,independent-film,lesbian-sex,mother-daughter-relationship,murder,number-in-title}'::text[]))"): 10,
 ('keyword AS k', "(k.keyword = ANY ('{death,father-son-relationship,bruce,gay,independent-film,lesbian-sex,mother-daughter-relationship,murder,number-in-title}'::text[]))"): 9,
 ('keyword AS k', "(k.keyword = ANY ('{death,father-son-relationship,fight,gay,independent-film,lesbian-sex,mother-daughter-relationship,murder,number-in-title}'::text[]))"): 9,
 ('keyword AS k', "(k.keyword = ANY ('{father-son-relationship,combat,gay,independent-film,lesbian-sex,mother-daughter-relationship,murder,number-in-title}'::text[]))"): 8,
 ('keyword AS k', "(k.keyword = ANY ('{fight,gay,independent-film,lesbian-sex,mother-daughter-relationship,murder,number-in-title}'::text[]))"): 7,
 ('keyword AS k', "(k.keyword = ANY ('{hero,martial-arts,hand-to-hand-combat,computer-animated-movie}'::text[]))"): 4,
 ('keyword AS k', "(k.keyword = ANY ('{superhero,marvel-comics,based-on-comic,tv-special,fight,violence,magnet,web,claw,laser}'::text[]))"): 10,
 ('keyword AS k', "(k.keyword ~~ '%sequel%'::text)"): 13,
 ('kind_type AS kt', "((kt.kind)::text = 'episode'::text)"): 1,
 ('kind_type AS kt', "((kt.kind)::text = 'movie'::text)"): 1,
 ('kind_type AS kt', "((kt.kind)::text = 'tv movie'::text)"): 1,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{"tv movie","tv series","video game"}\'::text[]))'): 3,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{"tv movie","video movie"}\'::text[]))'): 2,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{"tv series","video game","video movie"}\'::text[]))'): 3,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{"tv series","video movie"}\'::text[]))'): 2,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{episode,movie,"tv movie"}\'::text[]))'): 3,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{episode,movie,"video movie"}\'::text[]))'): 3,
 ('kind_type AS kt', "((kt.kind)::text = ANY ('{episode,movie}'::text[]))"): 2,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{movie,"tv movie","tv series"}\'::text[]))'): 3,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{movie,"tv series"}\'::text[]))'): 2,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{movie,"video movie"}\'::text[]))'): 2,
 ('movie_info AS mi', "((mi.info IS NOT NULL) AND ((mi.info ~~ 'Japan:%201%'::text) OR (mi.info ~~ 'USA:%201%'::text)))"): 154143,
 ('movie_info AS mi', "(mi.info = ANY ('{German,USA,American}'::text[]))"): 615334,
 ('movie_info AS mi', "(mi.info = ANY ('{Horror,Action,Sci-Fi,Thriller,Crime,War}'::text[]))"): 208615,
 ('movie_info AS mi', "(mi.info = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Denish,Norwegian,German,USA,American}'::text[]))"): 693703,
 ('movie_info AS mi1', '((mi1.info = ANY (\'{"Black and White",Color}\'::text[])) AND (mi1.info_type_id = 2))'): 123057,
 ('movie_info AS mi1', "((mi1.info = ANY ('{Crime,Drama}'::text[])) AND (mi1.info_type_id = 3))"): 31429,
 ('movie_info AS mi1', "((mi1.info_type_id = 13) AND (mi1.info = 'Mono'::text))"): 2534,
 ('movie_info AS mi1', '((mi1.info_type_id = 18) AND (mi1.info = ANY (\'{"Buenos Aires, Federal District, Argentina","Los Angeles, California, USA",Mexico,"New York City, New York, USA","Paramount Studios - 5555 Melrose Avenue, Hollywood, Los Angeles, California, USA"}\'::text[])))'): 3365,
 ('movie_info AS mi1', "((mi1.info_type_id = 2) AND (mi1.info = 'Black and White'::text))"): 26886,
 ('movie_info AS mi1', "((mi1.info_type_id = 2) AND (mi1.info = 'Color'::text))"): 96170,
 ('movie_info AS mi1', "((mi1.info_type_id = 3) AND (mi1.info = ANY ('{Adventure,Animation,Crime,Drama}'::text[])))"): 39922,
 ('movie_info AS mi1', "((mi1.info_type_id = 3) AND (mi1.info = ANY ('{Comedy,Crime,Fantasy,Mystery,Short}'::text[])))"): 74055,
 ('movie_info AS mi1', "((mi1.info_type_id = 3) AND (mi1.info = ANY ('{Fantasy,Mystery,Short}'::text[])))"): 48469,
 ('movie_info AS mi1', "((mi1.info_type_id = 5) AND (mi1.info = ANY ('{Argentina:Atp,Canada:G,Iceland:L,UK:X,USA:X}'::text[])))"): 1198,
 ('movie_info AS mi1', '((mi1.info_type_id = 7) AND (mi1.info = ANY (\'{"CAM:Panavision Cameras and Lenses","OFM:16 mm","OFM:35 mm",OFM:Video,PCS:Spherical,"PFM:35 mm","RAT:1.33 : 1","RAT:1.37 : 1","RAT:1.66 : 1","RAT:1.78 : 1","RAT:2.35 : 1",RAT:4:3}\'::text[])))'): 92722,
 ('movie_info AS mi1', '((mi1.info_type_id = 7) AND (mi1.info = ANY (\'{"MET:600 m","OFM:35 mm",PCS:Spherical,"PFM:35 mm","RAT:1.37 : 1"}\'::text[])))'): 62815,
 ('movie_info AS mi1', '((mi1.info_type_id = 7) AND (mi1.info = ANY (\'{"OFM:35 mm",OFM:Live,"PFM:35 mm","RAT:1.33 : 1"}\'::text[])))'): 67817,
 ('movie_info AS mi1', '((mi1.info_type_id = 7) AND (mi1.info = ANY (\'{"PFM:35 mm","RAT:1.33 : 1","RAT:1.66 : 1","RAT:1.85 : 1"}\'::text[])))'): 47860,
 ('movie_info AS mi1', '((mi1.info_type_id = 7) AND (mi1.info = ANY (\'{MET:,"OFM:35 mm","PCS:Digital Intermediate","PFM:35 mm",PFM:Video,"RAT:1.33 : 1","RAT:1.37 : 1"}\'::text[])))'): 72682,
 ('movie_info AS mi1', '((mi1.info_type_id = 7) AND (mi1.info = ANY (\'{PCS:Spherical,"PFM:16 mm","PFM:35 mm","RAT:1.33 : 1","RAT:1.66 : 1","RAT:1.85 : 1"}\'::text[])))'): 60174,
 ('movie_info AS mi1', "((mi1.info_type_id = 8) AND (mi1.info = ANY ('{Austria,Belgium,Brazil,Denmark,France,Mexico,Spain,UK,USA,Yugoslavia}'::text[])))"): 77535,
 ('movie_info AS mi1', "((mi1.info_type_id = 8) AND (mi1.info = ANY ('{Austria,Belgium,Brazil,Hungary,India,Mexico,Poland,Spain}'::text[])))"): 13262,
 ('movie_info AS mi1', "((mi1.info_type_id = 8) AND (mi1.info = ANY ('{Brazil,Denmark,France,Mexico,Spain,UK,USA,Yugoslavia}'::text[])))"): 76385,
 ('movie_info AS mi1', "((mi1.info_type_id = 8) AND (mi1.info = ANY ('{Brazil,India,Ireland,Italy,Netherlands,Philippines,Poland,USA}'::text[])))"): 58849,
 ('movie_info AS mi1', '((mi1.info_type_id = 8) AND (mi1.info = ANY (\'{Italy,Japan,China,"West Germany"}\'::text[])))'): 9311,
 ('movie_info AS mi1', '((mi1.info_type_id = 8) AND (mi1.info = ANY (\'{Italy,Japan,Nigeria,Spain,"West Germany"}\'::text[])))'): 14172,
 ('movie_info AS mi1', "((mi1.info_type_id = 8) AND (mi1.info = ANY ('{Italy,Netherlands,Philippines,Poland,USA}'::text[])))"): 54667,
 ('movie_info AS mi1', "(mi1.info = 'Mono'::text)"): 210597,
 ('movie_info AS mi1', '(mi1.info = ANY (\'{"Hong Kong",Poland,Portugal,"South Korea","Soviet Union",Sweden,Switzerland,Turkey,Yugoslavia}\'::text[]))'): 25033,
 ('movie_info AS mi1', '(mi1.info = ANY (\'{"OFM:35 mm",PCS:Spherical,"PFM:35 mm",PFM:Video,"RAT:1.33 : 1","RAT:1.37 : 1"}\'::text[]))'): 914734,
 ('movie_info AS mi1', '(mi1.info = ANY (\'{"RAT:1.33 : 1","RAT:1.37 : 1"}\'::text[]))'): 264113,
 ('movie_info AS mi1', '(mi1.info = ANY (\'{Austria,Czechoslovakia,Denmark,"Hong Kong",Poland,Portugal,"South Korea","Soviet Union",Sweden,Switzerland,Turkey,Yugoslavia}\'::text[]))'): 38698,
 ('movie_info AS mi1', '(mi1.info = ANY (\'{Biography,Fantasy,"OFM:35 mm",OFM:Video,Romance,Sci-Fi,Sport,Thriller}\'::text[]))'): 444484,
 ('movie_info AS mi1', "(mi1.info = ANY ('{Color,OFM:Live,OFM:Video,PFM:Video}'::text[]))"): 1104415,
 ('movie_info AS mi1', '(mi1.info = ANY (\'{PCS:Spherical,"PFM:35 mm","RAT:1.33 : 1","RAT:1.37 : 1"}\'::text[]))'): 650125,
 ('movie_info AS mi1', "(mi1.info = ANY ('{Sci-Fi,Sport,Thriller}'::text[]))"): 85230,
 ('movie_info AS mi2', '((mi2.info = ANY (\'{"Black and White",Color}\'::text[])) AND (mi2.info_type_id = 2))'): 123057,
 ('movie_info AS mi2', "((mi2.info = ANY ('{Mono,Silent}'::text[])) AND (mi2.info_type_id = 6))"): 11107,
 ('movie_info AS mi2', '((mi2.info_type_id = 18) AND (mi2.info = ANY (\'{"20th Century Fox Studios - 10201 Pico Blvd., Century City, Los Angeles, California, USA","Desilu Studios - 9336 W. Washington Blvd., Culver City, California, USA","Hal Roach Studios - 8822 Washington Blvd., Culver City, California, USA","New York City, New York, USA","Revue Studios, Hollywood, Los Angeles, California, USA","Universal Studios - 100 Universal City Plaza, Universal City, California, USA","Warner Brothers Burbank Studios - 4000 Warner Boulevard, Burbank, California, USA"}\'::text[])))'): 804,
 ('movie_info AS mi2', "((mi2.info_type_id = 3) AND (mi2.info = ANY ('{Adult,Comedy,Documentary,Drama,Mystery,Romance,Short,Thriller,Western}'::text[])))"): 130735,
 ('movie_info AS mi2', "((mi2.info_type_id = 4) AND (mi2.info = ANY ('{English,French,Italian,Malayalam,Polish,Portuguese,Tagalog}'::text[])))"): 72459,
 ('movie_info AS mi2', '((mi2.info_type_id = 7) AND (mi2.info = ANY (\'{"LAB:FotoKem Laboratory, Burbank (CA), USA",MET:,"MET:300 m",PCS:Spherical,"RAT:1.33 : 1","RAT:1.66 : 1"}\'::text[])))'): 34919,
 ('movie_info AS mi2', '((mi2.info_type_id = 7) AND (mi2.info = ANY (\'{"OFM:35 mm","PFM:35 mm","RAT:1.33 : 1"}\'::text[])))'): 67781,
 ('movie_info AS mi2', '((mi2.info_type_id = 8) AND (mi2.info = ANY (\'{"East Germany","Hong Kong",Italy,Taiwan,UK,USA,"West Germany"}\'::text[])))'): 64281,
 ('movie_info AS mi2', "((mi2.info_type_id = 8) AND (mi2.info = ANY ('{France,Germany,Japan,Mexico,Portugal,Spain,UK,USA}'::text[])))"): 83842,
 ('movie_info AS mi2', "((mi2.info_type_id = 8) AND (mi2.info = ANY ('{Japan,Mexico,Portugal,Spain,UK,USA}'::text[])))"): 73095,
 ('movie_info_idx AS mii1', "((mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info_type_id = 100) AND ('0'::double precision <= (mii1.info)::double precision) AND ((mii1.info)::double precision <= '1000'::double precision))"): 1188,
 ('movie_info_idx AS mii1', "((mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info_type_id = 100) AND ('0'::double precision <= (mii1.info)::double precision) AND ((mii1.info)::double precision <= '10000'::double precision))"): 1188,
 ('movie_info_idx AS mii1', "((mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info_type_id = 100) AND ('1000'::double precision <= (mii1.info)::double precision) AND ((mii1.info)::double precision <= '10000'::double precision))"): 1188,
 ('movie_info_idx AS mii1', "((mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info_type_id = 100) AND ('5000'::double precision <= (mii1.info)::double precision) AND ((mii1.info)::double precision <= '500000'::double precision))"): 1188,
 ('movie_info_idx AS mii2', "((mii2.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii2.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii2.info_type_id = 101) AND ((mii2.info)::double precision <= '11'::double precision) AND ('7'::double precision <= (mii2.info)::double precision))"): 1151,
 ('movie_info_idx AS mii2', "((mii2.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii2.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii2.info_type_id = 101) AND ((mii2.info)::double precision <= '7'::double precision) AND ('3'::double precision <= (mii2.info)::double precision))"): 1151,
 ('movie_info_idx AS mii2', "((mii2.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii2.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii2.info_type_id = 101) AND ((mii2.info)::double precision <= '8'::double precision) AND ('0'::double precision <= (mii2.info)::double precision))"): 1151,
 ('name AS n', "((((n.gender)::text = 'f'::text) OR (n.gender IS NULL)) AND (((n.name_pcode_nf)::text = 'C6235'::text) OR (n.name_pcode_nf IS NULL)))"): 63114,
 ('name AS n', "((((n.gender)::text = 'f'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_nf)::text = ANY ('{A5136,B4532,C6435,H4524,J2451,J6362,L2525,M6415,S4125,W5245}'::text[])))"): 1642,
 ('name AS n', "((((n.gender)::text = 'f'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_nf)::text = ANY ('{B6514,D1352,J5163,J5245,M2423,M6126,M6241,M6245,M6252,P3614,V2361,W4125,W4525}'::text[])))"): 13916,
 ('name AS n', "((((n.gender)::text = 'f'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_nf)::text = ANY ('{D2313,E3261,G625,J5141,K1524,L2125,M2563,M265,M3215,P3625,S5326,S6256,T5252}'::text[])))"): 7666,
 ('name AS n', "((((n.gender)::text = 'm'::text) OR (n.gender IS NULL)) AND (((n.name_pcode_nf)::text = 'C6235'::text) OR (n.name_pcode_nf IS NULL)))"): 77835,
 ('name AS n', "((((n.gender)::text = 'm'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_cf)::text = ANY ('{A2365,A6252,C52,D1614,E1524,E2163,L1214,L2,P5215,Q5325,R2425,S1452,T5212,V4524,V4626}'::text[])))"): 6427,
 ('name AS n', "((((n.gender)::text = 'm'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_cf)::text = ANY ('{E2163,L1214,L2,P5215,Q5325,R2425,S1452,T5212,V4524,V4626}'::text[])))"): 3947,
 ('name AS n', "((((n.gender)::text = 'm'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_nf)::text = ANY ('{A4163,B6563,D1316,F6521,F6523,F6524,J5216,J5262,P3616}'::text[])))"): 29197,
 ('name AS n', "((((n.gender)::text = 'm'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_nf)::text = ANY ('{A5136,B4532,C6435,H4524,J2451,J6362,L2525,M6415,S4125,W5245}'::text[])))"): 2025,
 ('name AS n', "((((n.gender)::text = 'm'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_nf)::text = ANY ('{B6514,D1352,J5163,J5245,M2423,M6126,M6241,M6245,M6252,P3614,V2361,W4125,W4525}'::text[])))"): 17162,
 ('name AS n', "((((n.gender)::text = 'm'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_nf)::text = ANY ('{D2313,E3261,G625,J5141,K1524,L2125,M2563,M265,M3215,P3625,S5326,S6256,T5252}'::text[])))"): 9455,
 ('name AS n', "((((n.gender)::text = 'm'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_nf)::text = ANY ('{M2423,M6126,M6241,M6245,M6252,P3614,V2361,W4125,W4525}'::text[])))"): 9733,
 ('name AS n', "((((n.gender)::text = ANY ('{f,m}'::text[])) OR (n.gender IS NULL)) AND ((n.name_pcode_cf)::text = ANY ('{A5362,J5252,R1632,R2632,W4525}'::text[])))"): 31244,
 ('name AS n', "((((n.gender)::text = ANY ('{f,m}'::text[])) OR (n.gender IS NULL)) AND ((n.name_pcode_cf)::text = ANY ('{R1632,R2632,W4525}'::text[])))"): 10737,
 ('name AS n', "((((n.name_pcode_nf)::text = ANY ('{C6235,E4213}'::text[])) OR (n.name_pcode_nf IS NULL)) AND ((n.gender)::text = 'f'::text))"): 31515,
 ('name AS n', "((((n.name_pcode_nf)::text = ANY ('{C6235,E4213}'::text[])) OR (n.name_pcode_nf IS NULL)) AND ((n.gender)::text = 'm'::text))"): 55553,
 ('name AS n', "(((n.gender)::text = 'f'::text) AND (((n.surname_pcode)::text = ANY ('{B4,B6,C462,D12,D25,G65,H65,J525,K5,P6,P62,R3,S5}'::text[])) OR (n.surname_pcode IS NULL)))"): 245698,
 ('name AS n', "(((n.gender)::text = 'f'::text) AND ((n.name_pcode_cf)::text = ANY ('{B6261,B6526,J5252,M6352,R363,S3152,S5362}'::text[])))"): 9348,
 ('name AS n', "(((n.gender)::text = 'f'::text) AND ((n.name_pcode_nf)::text = ANY ('{C6231,F6362,F6525,J513,R1631,R1632,R1636,R2631,S2153}'::text[])))"): 12993,
 ('name AS n', "(((n.gender)::text = 'm'::text) AND (((n.surname_pcode)::text = ANY ('{B4,B6,C462,D12,D25,G65,H65,J525,K5,P6,P62,R3,S5}'::text[])) OR (n.surname_pcode IS NULL)))"): 433106,
 ('name AS n', "(((n.gender)::text = 'm'::text) AND (((n.surname_pcode)::text = ANY ('{D12,D25,G65,H65,J525,K5,P6,P62,R3,S5}'::text[])) OR (n.surname_pcode IS NULL)))"): 425096,
 ('name AS n', "(((n.gender)::text = 'm'::text) AND ((n.name_pcode_cf)::text = ANY ('{B6261,B6526,J5252,M6352,R363,S3152,S5362}'::text[])))"): 16478,
 ('name AS n', "(((n.gender)::text = 'm'::text) AND ((n.name_pcode_cf)::text = ANY ('{J5252,M6352,R363,S3152,S5362}'::text[])))"): 14503,
 ('name AS n', "(((n.gender)::text = 'm'::text) AND ((n.name_pcode_nf)::text = ANY ('{C6231,F6362,F6525,J513,R1631,R1632,R1636,R2631,S2153}'::text[])))"): 22903,
 ('name AS n', "(((n.gender)::text = 'm'::text) AND ((n.surname_pcode)::text = ANY ('{F63,G63,H2,L5,M245,S,S6}'::text[])))"): 17592,
 ('name AS n', "(((n.gender)::text = 'm'::text) OR (n.gender IS NULL))"): 2581078,
 ('name AS n', "(((n.gender)::text = ANY ('{f,m}'::text[])) AND ((n.surname_pcode)::text = ANY ('{C4,C62,C632,D5,F6,F63,G63,H2,L5,M245,S,S6}'::text[])))"): 49735,
 ('name AS n', "(((n.gender)::text = ANY ('{m,f}'::text[])) AND ((n.name_pcode_nf)::text = ANY ('{C6231,F6362,F6525,J513,R1631,R1632,R1636,R2631,S2153}'::text[])))"): 35896,
 ('name AS n', "((n.gender IS NULL) AND (((n.name_pcode_nf)::text = ANY ('{A4163,A4253,A5362,A6532,C5321,C6231,C6235,R516,R5316,S3152,S3521}'::text[])) OR (n.name_pcode_nf IS NULL)))"): 69743,
 ('name AS n', "((n.gender IS NULL) AND (((n.name_pcode_nf)::text = ANY ('{C5321,C6231,C6235,R516,R5316,S3152,S3521}'::text[])) OR (n.name_pcode_nf IS NULL)))"): 53095,
 ('name AS n', "((n.gender)::text = 'f'::text)"): 982547,
 ('name AS n', "((n.gender)::text = 'm'::text)"): 1731995,
 ('name AS n', "((n.gender)::text = ANY ('{f,m}'::text[]))"): 2714543,
 ('name AS n', "((n.name ~~ '%An%'::text) AND ((n.gender)::text = 'f'::text))"): 29774,
 ('name AS n', "((n.name ~~ '%Tim%'::text) AND ((n.gender)::text = 'm'::text))"): 17495,
 ('name AS n', '(n.gender IS NULL)'): 1452914,
 ('name AS n', "(n.name ~~ '%Downey%Robert%'::text)"): 417,
 ('name AS n', "(n.name ~~ 'B%'::text)"): 336764,
 ('person_info AS pi1', '(pi1.info_type_id = 19)'): 83524,
 ('person_info AS pi1', '(pi1.info_type_id = 25)'): 427503,
 ('person_info AS pi1', '(pi1.info_type_id = 26)'): 136603,
 ('person_info AS pi1', '(pi1.info_type_id = 31)'): 6721,
 ('person_info AS pi1', '(pi1.info_type_id = 32)'): 9588,
 ('person_info AS pi1', '(pi1.info_type_id = 34)'): 20263,
 ('role_type AS rt', "((rt.role)::text = 'actor'::text)"): 1,
 ('role_type AS rt', "((rt.role)::text = 'actress'::text)"): 1,
 ('role_type AS rt', "((rt.role)::text = 'miscellaneous crew'::text)"): 1,
 ('role_type AS rt', "((rt.role)::text = 'producer'::text)"): 1,
 ('role_type AS rt', "((rt.role)::text = 'production designer'::text)"): 1,
 ('role_type AS rt', '((rt.role)::text = ANY (\'{"costume designer","production designer"}\'::text[]))'): 2,
 ('role_type AS rt', '((rt.role)::text = ANY (\'{"miscellaneous crew",producer}\'::text[]))'): 2,
 ('role_type AS rt', "((rt.role)::text = ANY ('{actor,actress}'::text[]))"): 2,
 ('role_type AS rt', "((rt.role)::text = ANY ('{actor,cinematographer,writer}'::text[]))"): 3,
 ('role_type AS rt', '((rt.role)::text = ANY (\'{actor,composer,"miscellaneous crew",producer,"production designer"}\'::text[]))'): 5,
 ('role_type AS rt', "((rt.role)::text = ANY ('{actor,director,writer}'::text[]))"): 3,
 ('role_type AS rt', "((rt.role)::text = ANY ('{actor,producer}'::text[]))"): 2,
 ('role_type AS rt', "((rt.role)::text = ANY ('{actor,writer}'::text[]))"): 2,
 ('role_type AS rt', "((rt.role)::text = ANY ('{actress,cinematographer,writer}'::text[]))"): 3,
 ('role_type AS rt', "((rt.role)::text = ANY ('{actress,director,writer}'::text[]))"): 3,
 ('role_type AS rt', "((rt.role)::text = ANY ('{actress,producer}'::text[]))"): 2,
 ('role_type AS rt', "((rt.role)::text = ANY ('{actress,writer}'::text[]))"): 2,
 ('role_type AS rt', '((rt.role)::text = ANY (\'{cinematographer,composer,director,editor,"miscellaneous crew",producer,"production designer",writer}\'::text[]))'): 8,
 ('role_type AS rt', "((rt.role)::text = ANY ('{cinematographer,composer}'::text[]))"): 2,
 ('role_type AS rt', "((rt.role)::text = ANY ('{director,producer}'::text[]))"): 2,
 ('role_type AS rt', "((rt.role)::text = ANY ('{editor,writer}'::text[]))"): 2,
 ('title AS t', '((t.production_year <= 1975) AND (t.production_year >= 1875))'): 457842,
 ('title AS t', '((t.production_year <= 1975) AND (t.production_year >= 1900))'): 451182,
 ('title AS t', '((t.production_year <= 1975) AND (t.production_year >= 1925))'): 353956,
 ('title AS t', '((t.production_year <= 1990) AND (t.production_year >= 1950))'): 545566,
 ('title AS t', '((t.production_year <= 2000) AND (t.production_year >= 1875))'): 1093409,
 ('title AS t', '((t.production_year <= 2000) AND (t.production_year >= 1900))'): 1086749,
 ('title AS t', '((t.production_year <= 2000) AND (t.production_year >= 1925))'): 989523,
 ('title AS t', '((t.production_year <= 2000) AND (t.production_year >= 1950))'): 924563,
 ('title AS t', '((t.production_year <= 2008) AND (t.production_year >= 1952))'): 1617245,
 ('title AS t', '((t.production_year <= 2010) AND (t.production_year >= 1950))'): 1898081,
 ('title AS t', '((t.production_year <= 2010) AND (t.production_year >= 1952))'): 1888172,
 ('title AS t', '((t.production_year <= 2010) AND (t.production_year >= 1990))'): 1376866,
 ('title AS t', '((t.production_year <= 2011) AND (t.production_year >= 1949))'): 2066691,
 ('title AS t', '((t.production_year <= 2015) AND (1925 < t.production_year))'): 2352208,
 ('title AS t', '((t.production_year <= 2015) AND (1950 < t.production_year))'): 2285141,
 ('title AS t', '((t.production_year <= 2015) AND (1990 < t.production_year))'): 1746143,
 ('title AS t', '((t.production_year <= 2015) AND (2000 < t.production_year))'): 1367146,
 ('title AS t', '((t.production_year <= 2015) AND (t.production_year >= 1925))'): 2356669,
 ('title AS t', '((t.production_year <= 2015) AND (t.production_year >= 1955))'): 2261334,
 ('title AS t', '((t.production_year <= 2015) AND (t.production_year >= 1956))'): 2252966,
 ('title AS t', '((t.production_year <= 2015) AND (t.production_year >= 1975))'): 2016445,
 ('title AS t', '((t.production_year <= 2015) AND (t.production_year >= 1990))'): 1770494,
 ('title AS t', '((t.production_year <= 2020) AND (t.production_year >= 1875))'): 2460562,
 ('title AS t', '((t.production_year <= 2020) AND (t.production_year >= 1900))'): 2453902,
 ('title AS t', '((t.production_year <= 2020) AND (t.production_year >= 1925))'): 2356676,
 ('title AS t', '((t.production_year <= 2020) AND (t.production_year >= 1950))'): 2291716,
 ('title AS t', '((t.production_year <= 2020) AND (t.production_year >= 1955))'): 2261341,
 ('title AS t', '((t.production_year <= 2020) AND (t.production_year >= 1970))'): 2085934,
 ('title AS t', '((t.production_year <= 2020) AND (t.production_year >= 1980))'): 1948403,
 ('title AS t', '((t.production_year <= 2020) AND (t.production_year >= 2000))'): 1424121,
 ('title AS t', "((t.production_year > 2010) AND (t.title ~~ 'Kung Fu Panda%'::text))"): 37,
 ('title AS t', '(t.production_year > 1970)'): 2069943,
 ('title AS t', '(t.production_year > 1990)'): 1746167,
 ('title AS t', '(t.production_year > 2000)'): 1367170}
costs stats mean 17.047718048095703 std 1.1638033390045166
Number of model parameters: 2120356 (~= 8.1MB)
SimModel(
  (tree_conv): TreeConvolution(
    (attention_merger_3): AttentionMerger(
      (softmax): Softmax(dim=0)
    )
    (query_mlp): Sequential(
      (0): Linear(in_features=33, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
      (2): LeakyReLU(negative_slope=0.01)
      (3): Linear(in_features=128, out_features=64, bias=True)
      (4): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
      (5): LeakyReLU(negative_slope=0.01)
      (6): Linear(in_features=64, out_features=32, bias=True)
    )
    (conv_module_list_other): ModuleList(
      (0): Sequential(
        (0): TreeConv1d(
          (weights): Conv1d(134, 512, kernel_size=(3,), stride=(3,))
        )
        (1): TreeStandardize()
        (2): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (3): TreeConv1d(
          (weights): Conv1d(512, 256, kernel_size=(3,), stride=(3,))
        )
        (4): TreeStandardize()
        (5): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (6): TreeConv1d(
          (weights): Conv1d(256, 128, kernel_size=(3,), stride=(3,))
        )
        (7): TreeStandardize()
        (8): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (9): TreeMaxPool()
      )
    )
    (conv_module_list_hash_join): ModuleList(
      (0): Sequential(
        (0): TreeConv1d(
          (weights): Conv1d(134, 512, kernel_size=(3,), stride=(3,))
        )
        (1): TreeStandardize()
        (2): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (3): TreeConv1d(
          (weights): Conv1d(512, 256, kernel_size=(3,), stride=(3,))
        )
        (4): TreeStandardize()
        (5): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (6): TreeConv1d(
          (weights): Conv1d(256, 128, kernel_size=(3,), stride=(3,))
        )
        (7): TreeStandardize()
        (8): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (9): TreeMaxPool()
      )
    )
    (conv_module_list_nested_loop_join): ModuleList(
      (0): Sequential(
        (0): TreeConv1d(
          (weights): Conv1d(134, 512, kernel_size=(3,), stride=(3,))
        )
        (1): TreeStandardize()
        (2): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (3): TreeConv1d(
          (weights): Conv1d(512, 256, kernel_size=(3,), stride=(3,))
        )
        (4): TreeStandardize()
        (5): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (6): TreeConv1d(
          (weights): Conv1d(256, 128, kernel_size=(3,), stride=(3,))
        )
        (7): TreeStandardize()
        (8): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (9): TreeMaxPool()
      )
    )
    (out_mlp): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
      (2): LeakyReLU(negative_slope=0.01)
      (3): Linear(in_features=64, out_features=32, bias=True)
      (4): LayerNorm((32,), eps=1e-05, elementwise_affine=True)
      (5): LeakyReLU(negative_slope=0.01)
      (6): Linear(in_features=32, out_features=1, bias=True)
    )
  )
)
No best checkpoint found (run validaiton yet?); model left unchanged.
plans_lib.FilterScansOrJoins()
plans_lib.GatherUnaryFiltersInfo()
postgres.EstimateFilterRows()
221 unique filters
{('cast_info AS ci', "((ci.note = '(archive footage)'::text) OR (ci.note IS NULL))"): 22040471,
 ('cast_info AS ci', "((ci.note = '(executive producer)'::text) OR (ci.note IS NULL))"): 22372469,
 ('cast_info AS ci', "((ci.note = '(writer)'::text) OR (ci.note IS NULL))"): 22241379,
 ('cast_info AS ci', '((ci.note = ANY (\'{(deviser),(producer),"(production assistant)","(senior producer)","(supervising producer)",(writer)}\'::text[])) OR (ci.note IS NULL))'): 23077311,
 ('cast_info AS ci', '(ci.note = ANY (\'{"(voice) (uncredited)","(voice: English version)"}\'::text[]))'): 118308,
 ('cast_info AS ci', '(ci.note = ANY (\'{"(voice: Japanese version)","(voice) (uncredited)","(voice: English version)"}\'::text[]))'): 154524,
 ('cast_info AS ci', '(ci.note = ANY (\'{(producer),"(executive producer)"}\'::text[]))'): 2451866,
 ('cast_info AS ci', '(ci.note = ANY (\'{(voice),"(voice: Japanese version)","(voice) (uncredited)","(voice: English version)"}\'::text[]))'): 845055,
 ('cast_info AS ci', '(ci.note = ANY (\'{(writer),"(head writer)","(story editor)"}\'::text[]))'): 822118,
 ('cast_info AS ci', '(ci.note = ANY (\'{(writer),"(head writer)","(written by)",(story),"(story editor)"}\'::text[]))'): 1195149,
 ('cast_info AS ci', '(ci.note IS NULL)'): 21967802,
 ('char_name AS chn', "((chn.name IS NOT NULL) AND ((chn.name ~~ '%man%'::text) OR (chn.name ~~ '%Man%'::text)))"): 125924,
 ('comp_cast_type AS cct1', "((cct1.kind)::text = 'cast'::text)"): 1,
 ('comp_cast_type AS cct2', "((cct2.kind)::text ~~ '%complete%'::text)"): 1,
 ('company_name AS cn', "(((cn.country_code)::text = '[us]'::text) AND (cn.name = 'DreamWorks Animation'::text))"): 1,
 ('company_name AS cn', "((cn.country_code)::text = '[de]'::text)"): 10230,
 ('company_name AS cn', "((cn.country_code)::text = '[uk]'::text)"): 22,
 ('company_name AS cn', "((cn.country_code)::text = '[us]'::text)"): 85578,
 ('company_name AS cn', '(cn.name = ANY (\'{"American Broadcasting Company (ABC)","Columbia Broadcasting System (CBS)","National Broadcasting Company (NBC)"}\'::text[]))'): 3,
 ('company_name AS cn', '(cn.name = ANY (\'{"Columbia Broadcasting System (CBS)","Fox Network","Independent Television (ITV)","Metro-Goldwyn-Mayer (MGM)","National Broadcasting Company (NBC)","Shout! Factory","Universal Pictures","Universal TV","Warner Bros"}\'::text[]))'): 10,
 ('company_name AS cn', '(cn.name = ANY (\'{"Columbia Broadcasting System (CBS)","Metro-Goldwyn-Mayer (MGM)","Paramount Pictures","Pathé Frères","Universal Pictures","Warner Home Video"}\'::text[]))'): 7,
 ('company_name AS cn', '(cn.name = ANY (\'{"Fox Network","Independent Television (ITV)","Metro-Goldwyn-Mayer (MGM)","National Broadcasting Company (NBC)","Paramount Pictures","Shout! Factory","Sony Pictures Home Entertainment","Universal Pictures","Universal TV"}\'::text[]))'): 10,
 ('company_name AS cn', '(cn.name = ANY (\'{"Independent Television (ITV)","Metro-Goldwyn-Mayer (MGM)","National Broadcasting Company (NBC)","Paramount Pictures","Shout! Factory","Sony Pictures Home Entertainment","Universal Pictures","Universal TV"}\'::text[]))'): 9,
 ('company_name AS cn', '(cn.name = ANY (\'{ABS-CBN,"American Broadcasting Company (ABC)","British Broadcasting Corporation (BBC)"}\'::text[]))'): 3,
 ('company_type AS ct', "((ct.kind)::text = 'distributors'::text)"): 1,
 ('company_type AS ct', "((ct.kind)::text = 'production companies'::text)"): 1,
 ('company_type AS ct', '((ct.kind)::text = ANY (\'{distributors,"production companies"}\'::text[]))'): 2,
 ('info_type AS it', "((it.info)::text = 'rating'::text)"): 1,
 ('info_type AS it', "((it.info)::text = 'release dates'::text)"): 1,
 ('info_type AS it1', "((it1.info)::text = 'budget'::text)"): 1,
 ('info_type AS it1', "((it1.info)::text = 'genres'::text)"): 1,
 ('info_type AS it1', '(it1.id = 13)'): 1,
 ('info_type AS it1', '(it1.id = 18)'): 1,
 ('info_type AS it1', '(it1.id = 2)'): 1,
 ('info_type AS it1', '(it1.id = 3)'): 1,
 ('info_type AS it1', '(it1.id = 5)'): 1,
 ('info_type AS it1', '(it1.id = 7)'): 1,
 ('info_type AS it1', '(it1.id = 8)'): 1,
 ('info_type AS it2', "((it2.info)::text = 'rating'::text)"): 1,
 ('info_type AS it2', "((it2.info)::text = 'release dates'::text)"): 1,
 ('info_type AS it2', "((it2.info)::text = 'votes'::text)"): 1,
 ('info_type AS it2', '(it2.id = 18)'): 1,
 ('info_type AS it2', '(it2.id = 2)'): 1,
 ('info_type AS it2', '(it2.id = 3)'): 1,
 ('info_type AS it2', '(it2.id = 4)'): 1,
 ('info_type AS it2', '(it2.id = 6)'): 1,
 ('info_type AS it2', '(it2.id = 7)'): 1,
 ('info_type AS it2', '(it2.id = 8)'): 1,
 ('info_type AS it3', '(it3.id = 100)'): 1,
 ('info_type AS it4', '(it4.id = 101)'): 1,
 ('info_type AS it5', '(it5.id = 19)'): 1,
 ('info_type AS it5', '(it5.id = 25)'): 1,
 ('info_type AS it5', '(it5.id = 26)'): 1,
 ('info_type AS it5', '(it5.id = 31)'): 1,
 ('info_type AS it5', '(it5.id = 32)'): 1,
 ('info_type AS it5', '(it5.id = 34)'): 1,
 ('keyword AS k', "(k.keyword = '10,000-mile-club'::text)"): 1,
 ('keyword AS k', "(k.keyword = 'character-name-in-title'::text)"): 1,
 ('keyword AS k', "(k.keyword = 'marvel-cinematic-universe'::text)"): 1,
 ('keyword AS k', "(k.keyword = ANY ('{based-on-play,cigarette-smoking,friendship,independent-film,jealousy,lesbian-sex,male-nudity,marriage,mother-daughter-relationship,one-word-title,oral-sex,police,singing,song}'::text[]))"): 14,
 ('keyword AS k', "(k.keyword = ANY ('{based-on-play,dog,family-relationships,father-son-relationship,female-nudity,hardcore,husband-wife-relationship,independent-film,lesbian-sex,love,marriage,mother-daughter-relationship,nudity,one-word-title,police,sequel,sex,singer}'::text[]))"): 18,
 ('keyword AS k', "(k.keyword = ANY ('{death,elmo,father-son-relationship,fight,gay,independent-film,lesbian-sex,mother-daughter-relationship,murder,number-in-title}'::text[]))"): 10,
 ('keyword AS k', "(k.keyword = ANY ('{death,father-son-relationship,bruce,gay,independent-film,lesbian-sex,mother-daughter-relationship,murder,number-in-title}'::text[]))"): 9,
 ('keyword AS k', "(k.keyword = ANY ('{death,father-son-relationship,fight,gay,independent-film,lesbian-sex,mother-daughter-relationship,murder,number-in-title}'::text[]))"): 9,
 ('keyword AS k', "(k.keyword = ANY ('{father-son-relationship,combat,gay,independent-film,lesbian-sex,mother-daughter-relationship,murder,number-in-title}'::text[]))"): 8,
 ('keyword AS k', "(k.keyword = ANY ('{fight,gay,independent-film,lesbian-sex,mother-daughter-relationship,murder,number-in-title}'::text[]))"): 7,
 ('keyword AS k', "(k.keyword = ANY ('{hero,martial-arts,hand-to-hand-combat,computer-animated-movie}'::text[]))"): 4,
 ('keyword AS k', "(k.keyword = ANY ('{superhero,marvel-comics,based-on-comic,tv-special,fight,violence,magnet,web,claw,laser}'::text[]))"): 10,
 ('keyword AS k', "(k.keyword ~~ '%sequel%'::text)"): 13,
 ('kind_type AS kt', "((kt.kind)::text = 'episode'::text)"): 1,
 ('kind_type AS kt', "((kt.kind)::text = 'movie'::text)"): 1,
 ('kind_type AS kt', "((kt.kind)::text = 'tv movie'::text)"): 1,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{"tv movie","tv series","video game"}\'::text[]))'): 3,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{"tv movie","video movie"}\'::text[]))'): 2,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{"tv series","video game","video movie"}\'::text[]))'): 3,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{"tv series","video movie"}\'::text[]))'): 2,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{episode,movie,"tv movie"}\'::text[]))'): 3,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{episode,movie,"video movie"}\'::text[]))'): 3,
 ('kind_type AS kt', "((kt.kind)::text = ANY ('{episode,movie}'::text[]))"): 2,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{movie,"tv movie","tv series"}\'::text[]))'): 3,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{movie,"tv series"}\'::text[]))'): 2,
 ('kind_type AS kt', '((kt.kind)::text = ANY (\'{movie,"video movie"}\'::text[]))'): 2,
 ('movie_info AS mi', "((mi.info IS NOT NULL) AND ((mi.info ~~ 'Japan:%201%'::text) OR (mi.info ~~ 'USA:%201%'::text)))"): 154143,
 ('movie_info AS mi', "(mi.info = ANY ('{Horror,Action,Sci-Fi,Thriller,Crime,War}'::text[]))"): 208615,
 ('movie_info AS mi', "(mi.info = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Denish,Norwegian,German,USA,American}'::text[]))"): 693703,
 ('movie_info AS mi1', '((mi1.info = ANY (\'{"Black and White",Color}\'::text[])) AND (mi1.info_type_id = 2))'): 123057,
 ('movie_info AS mi1', "((mi1.info_type_id = 13) AND (mi1.info = 'Mono'::text))"): 2534,
 ('movie_info AS mi1', '((mi1.info_type_id = 18) AND (mi1.info = ANY (\'{"Buenos Aires, Federal District, Argentina","Los Angeles, California, USA",Mexico,"New York City, New York, USA","Paramount Studios - 5555 Melrose Avenue, Hollywood, Los Angeles, California, USA"}\'::text[])))'): 3365,
 ('movie_info AS mi1', "((mi1.info_type_id = 2) AND (mi1.info = 'Black and White'::text))"): 26886,
 ('movie_info AS mi1', "((mi1.info_type_id = 2) AND (mi1.info = 'Color'::text))"): 96170,
 ('movie_info AS mi1', "((mi1.info_type_id = 3) AND (mi1.info = ANY ('{Adventure,Animation,Crime,Drama}'::text[])))"): 39922,
 ('movie_info AS mi1', "((mi1.info_type_id = 3) AND (mi1.info = ANY ('{Comedy,Crime,Fantasy,Mystery,Short}'::text[])))"): 74055,
 ('movie_info AS mi1', "((mi1.info_type_id = 3) AND (mi1.info = ANY ('{Fantasy,Mystery,Short}'::text[])))"): 48469,
 ('movie_info AS mi1', "((mi1.info_type_id = 5) AND (mi1.info = ANY ('{Argentina:Atp,Canada:G,Iceland:L,UK:X,USA:X}'::text[])))"): 1198,
 ('movie_info AS mi1', '((mi1.info_type_id = 7) AND (mi1.info = ANY (\'{"CAM:Panavision Cameras and Lenses","OFM:16 mm","OFM:35 mm",OFM:Video,PCS:Spherical,"PFM:35 mm","RAT:1.33 : 1","RAT:1.37 : 1","RAT:1.66 : 1","RAT:1.78 : 1","RAT:2.35 : 1",RAT:4:3}\'::text[])))'): 92722,
 ('movie_info AS mi1', '((mi1.info_type_id = 7) AND (mi1.info = ANY (\'{"MET:600 m","OFM:35 mm",PCS:Spherical,"PFM:35 mm","RAT:1.37 : 1"}\'::text[])))'): 62815,
 ('movie_info AS mi1', '((mi1.info_type_id = 7) AND (mi1.info = ANY (\'{"OFM:35 mm",OFM:Live,"PFM:35 mm","RAT:1.33 : 1"}\'::text[])))'): 67817,
 ('movie_info AS mi1', '((mi1.info_type_id = 7) AND (mi1.info = ANY (\'{"PFM:35 mm","RAT:1.33 : 1","RAT:1.66 : 1","RAT:1.85 : 1"}\'::text[])))'): 47860,
 ('movie_info AS mi1', '((mi1.info_type_id = 7) AND (mi1.info = ANY (\'{MET:,"OFM:35 mm","PCS:Digital Intermediate","PFM:35 mm",PFM:Video,"RAT:1.33 : 1","RAT:1.37 : 1"}\'::text[])))'): 72682,
 ('movie_info AS mi1', '((mi1.info_type_id = 7) AND (mi1.info = ANY (\'{PCS:Spherical,"PFM:16 mm","PFM:35 mm","RAT:1.33 : 1","RAT:1.66 : 1","RAT:1.85 : 1"}\'::text[])))'): 60174,
 ('movie_info AS mi1', "((mi1.info_type_id = 8) AND (mi1.info = ANY ('{Austria,Belgium,Brazil,Denmark,France,Mexico,Spain,UK,USA,Yugoslavia}'::text[])))"): 77535,
 ('movie_info AS mi1', "((mi1.info_type_id = 8) AND (mi1.info = ANY ('{Austria,Belgium,Brazil,Hungary,India,Mexico,Poland,Spain}'::text[])))"): 13262,
 ('movie_info AS mi1', "((mi1.info_type_id = 8) AND (mi1.info = ANY ('{Brazil,Denmark,France,Mexico,Spain,UK,USA,Yugoslavia}'::text[])))"): 76385,
 ('movie_info AS mi1', "((mi1.info_type_id = 8) AND (mi1.info = ANY ('{Brazil,India,Ireland,Italy,Netherlands,Philippines,Poland,USA}'::text[])))"): 58849,
 ('movie_info AS mi1', '((mi1.info_type_id = 8) AND (mi1.info = ANY (\'{Italy,Japan,China,"West Germany"}\'::text[])))'): 9311,
 ('movie_info AS mi1', '((mi1.info_type_id = 8) AND (mi1.info = ANY (\'{Italy,Japan,Nigeria,Spain,"West Germany"}\'::text[])))'): 14172,
 ('movie_info AS mi1', "((mi1.info_type_id = 8) AND (mi1.info = ANY ('{Italy,Netherlands,Philippines,Poland,USA}'::text[])))"): 54667,
 ('movie_info AS mi1', "(mi1.info = 'Mono'::text)"): 210597,
 ('movie_info AS mi1', '(mi1.info = ANY (\'{"Hong Kong",Poland,Portugal,"South Korea","Soviet Union",Sweden,Switzerland,Turkey,Yugoslavia}\'::text[]))'): 25033,
 ('movie_info AS mi1', '(mi1.info = ANY (\'{"OFM:35 mm",PCS:Spherical,"PFM:35 mm",PFM:Video,"RAT:1.33 : 1","RAT:1.37 : 1"}\'::text[]))'): 914734,
 ('movie_info AS mi1', '(mi1.info = ANY (\'{"RAT:1.33 : 1","RAT:1.37 : 1"}\'::text[]))'): 264113,
 ('movie_info AS mi1', '(mi1.info = ANY (\'{Austria,Czechoslovakia,Denmark,"Hong Kong",Poland,Portugal,"South Korea","Soviet Union",Sweden,Switzerland,Turkey,Yugoslavia}\'::text[]))'): 38698,
 ('movie_info AS mi1', '(mi1.info = ANY (\'{Biography,Fantasy,"OFM:35 mm",OFM:Video,Romance,Sci-Fi,Sport,Thriller}\'::text[]))'): 444484,
 ('movie_info AS mi1', "(mi1.info = ANY ('{Color,OFM:Live,OFM:Video,PFM:Video}'::text[]))"): 1104415,
 ('movie_info AS mi1', '(mi1.info = ANY (\'{PCS:Spherical,"PFM:35 mm","RAT:1.33 : 1","RAT:1.37 : 1"}\'::text[]))'): 650125,
 ('movie_info AS mi2', '((mi2.info = ANY (\'{"Black and White",Color}\'::text[])) AND (mi2.info_type_id = 2))'): 123057,
 ('movie_info AS mi2', "((mi2.info = ANY ('{Mono,Silent}'::text[])) AND (mi2.info_type_id = 6))"): 11107,
 ('movie_info AS mi2', '((mi2.info_type_id = 18) AND (mi2.info = ANY (\'{"20th Century Fox Studios - 10201 Pico Blvd., Century City, Los Angeles, California, USA","Desilu Studios - 9336 W. Washington Blvd., Culver City, California, USA","Hal Roach Studios - 8822 Washington Blvd., Culver City, California, USA","New York City, New York, USA","Revue Studios, Hollywood, Los Angeles, California, USA","Universal Studios - 100 Universal City Plaza, Universal City, California, USA","Warner Brothers Burbank Studios - 4000 Warner Boulevard, Burbank, California, USA"}\'::text[])))'): 804,
 ('movie_info AS mi2', "((mi2.info_type_id = 3) AND (mi2.info = ANY ('{Adult,Comedy,Documentary,Drama,Mystery,Romance,Short,Thriller,Western}'::text[])))"): 130735,
 ('movie_info AS mi2', "((mi2.info_type_id = 4) AND (mi2.info = ANY ('{English,French,Italian,Malayalam,Polish,Portuguese,Tagalog}'::text[])))"): 72459,
 ('movie_info AS mi2', '((mi2.info_type_id = 7) AND (mi2.info = ANY (\'{"LAB:FotoKem Laboratory, Burbank (CA), USA",MET:,"MET:300 m",PCS:Spherical,"RAT:1.33 : 1","RAT:1.66 : 1"}\'::text[])))'): 34919,
 ('movie_info AS mi2', '((mi2.info_type_id = 7) AND (mi2.info = ANY (\'{"OFM:35 mm","PFM:35 mm","RAT:1.33 : 1"}\'::text[])))'): 67781,
 ('movie_info AS mi2', '((mi2.info_type_id = 8) AND (mi2.info = ANY (\'{"East Germany","Hong Kong",Italy,Taiwan,UK,USA,"West Germany"}\'::text[])))'): 64281,
 ('movie_info AS mi2', "((mi2.info_type_id = 8) AND (mi2.info = ANY ('{France,Germany,Japan,Mexico,Portugal,Spain,UK,USA}'::text[])))"): 83842,
 ('movie_info_idx AS mii1', "((mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info_type_id = 100) AND ('0'::double precision <= (mii1.info)::double precision) AND ((mii1.info)::double precision <= '1000'::double precision))"): 1188,
 ('movie_info_idx AS mii1', "((mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info_type_id = 100) AND ('0'::double precision <= (mii1.info)::double precision) AND ((mii1.info)::double precision <= '10000'::double precision))"): 1188,
 ('movie_info_idx AS mii1', "((mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info_type_id = 100) AND ('1000'::double precision <= (mii1.info)::double precision) AND ((mii1.info)::double precision <= '10000'::double precision))"): 1188,
 ('movie_info_idx AS mii1', "((mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii1.info_type_id = 100) AND ('5000'::double precision <= (mii1.info)::double precision) AND ((mii1.info)::double precision <= '500000'::double precision))"): 1188,
 ('movie_info_idx AS mii2', "((mii2.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii2.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii2.info_type_id = 101) AND ((mii2.info)::double precision <= '11'::double precision) AND ('7'::double precision <= (mii2.info)::double precision))"): 1151,
 ('movie_info_idx AS mii2', "((mii2.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii2.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii2.info_type_id = 101) AND ((mii2.info)::double precision <= '7'::double precision) AND ('3'::double precision <= (mii2.info)::double precision))"): 1151,
 ('movie_info_idx AS mii2', "((mii2.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii2.info ~ '^(?:[1-9]\\d*|0)?(?:\\.\\d+)?$'::text) AND (mii2.info_type_id = 101) AND ((mii2.info)::double precision <= '8'::double precision) AND ('0'::double precision <= (mii2.info)::double precision))"): 1151,
 ('name AS n', "((((n.gender)::text = 'f'::text) OR (n.gender IS NULL)) AND (((n.name_pcode_nf)::text = 'C6235'::text) OR (n.name_pcode_nf IS NULL)))"): 63114,
 ('name AS n', "((((n.gender)::text = 'f'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_nf)::text = ANY ('{A5136,B4532,C6435,H4524,J2451,J6362,L2525,M6415,S4125,W5245}'::text[])))"): 1642,
 ('name AS n', "((((n.gender)::text = 'f'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_nf)::text = ANY ('{B6514,D1352,J5163,J5245,M2423,M6126,M6241,M6245,M6252,P3614,V2361,W4125,W4525}'::text[])))"): 13916,
 ('name AS n', "((((n.gender)::text = 'm'::text) OR (n.gender IS NULL)) AND (((n.name_pcode_nf)::text = 'C6235'::text) OR (n.name_pcode_nf IS NULL)))"): 77835,
 ('name AS n', "((((n.gender)::text = 'm'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_cf)::text = ANY ('{A2365,A6252,C52,D1614,E1524,E2163,L1214,L2,P5215,Q5325,R2425,S1452,T5212,V4524,V4626}'::text[])))"): 6427,
 ('name AS n', "((((n.gender)::text = 'm'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_cf)::text = ANY ('{E2163,L1214,L2,P5215,Q5325,R2425,S1452,T5212,V4524,V4626}'::text[])))"): 3947,
 ('name AS n', "((((n.gender)::text = 'm'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_nf)::text = ANY ('{A4163,B6563,D1316,F6521,F6523,F6524,J5216,J5262,P3616}'::text[])))"): 29197,
 ('name AS n', "((((n.gender)::text = 'm'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_nf)::text = ANY ('{A5136,B4532,C6435,H4524,J2451,J6362,L2525,M6415,S4125,W5245}'::text[])))"): 2025,
 ('name AS n', "((((n.gender)::text = 'm'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_nf)::text = ANY ('{B6514,D1352,J5163,J5245,M2423,M6126,M6241,M6245,M6252,P3614,V2361,W4125,W4525}'::text[])))"): 17162,
 ('name AS n', "((((n.gender)::text = 'm'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_nf)::text = ANY ('{D2313,E3261,G625,J5141,K1524,L2125,M2563,M265,M3215,P3625,S5326,S6256,T5252}'::text[])))"): 9455,
 ('name AS n', "((((n.gender)::text = 'm'::text) OR (n.gender IS NULL)) AND ((n.name_pcode_nf)::text = ANY ('{M2423,M6126,M6241,M6245,M6252,P3614,V2361,W4125,W4525}'::text[])))"): 9733,
 ('name AS n', "((((n.gender)::text = ANY ('{f,m}'::text[])) OR (n.gender IS NULL)) AND ((n.name_pcode_cf)::text = ANY ('{A5362,J5252,R1632,R2632,W4525}'::text[])))"): 31244,
 ('name AS n', "((((n.gender)::text = ANY ('{f,m}'::text[])) OR (n.gender IS NULL)) AND ((n.name_pcode_cf)::text = ANY ('{R1632,R2632,W4525}'::text[])))"): 10737,
 ('name AS n', "((((n.name_pcode_nf)::text = ANY ('{C6235,E4213}'::text[])) OR (n.name_pcode_nf IS NULL)) AND ((n.gender)::text = 'f'::text))"): 31515,
 ('name AS n', "((((n.name_pcode_nf)::text = ANY ('{C6235,E4213}'::text[])) OR (n.name_pcode_nf IS NULL)) AND ((n.gender)::text = 'm'::text))"): 55553,
 ('name AS n', "(((n.gender)::text = 'f'::text) AND (((n.surname_pcode)::text = ANY ('{B4,B6,C462,D12,D25,G65,H65,J525,K5,P6,P62,R3,S5}'::text[])) OR (n.surname_pcode IS NULL)))"): 245698,
 ('name AS n', "(((n.gender)::text = 'f'::text) AND ((n.name_pcode_cf)::text = ANY ('{B6261,B6526,J5252,M6352,R363,S3152,S5362}'::text[])))"): 9348,
 ('name AS n', "(((n.gender)::text = 'f'::text) AND ((n.name_pcode_nf)::text = ANY ('{C6231,F6362,F6525,J513,R1631,R1632,R1636,R2631,S2153}'::text[])))"): 12993,
 ('name AS n', "(((n.gender)::text = 'm'::text) AND (((n.surname_pcode)::text = ANY ('{B4,B6,C462,D12,D25,G65,H65,J525,K5,P6,P62,R3,S5}'::text[])) OR (n.surname_pcode IS NULL)))"): 433106,
 ('name AS n', "(((n.gender)::text = 'm'::text) AND ((n.name_pcode_cf)::text = ANY ('{B6261,B6526,J5252,M6352,R363,S3152,S5362}'::text[])))"): 16478,
 ('name AS n', "(((n.gender)::text = 'm'::text) AND ((n.name_pcode_cf)::text = ANY ('{J5252,M6352,R363,S3152,S5362}'::text[])))"): 14503,
 ('name AS n', "(((n.gender)::text = 'm'::text) AND ((n.surname_pcode)::text = ANY ('{F63,G63,H2,L5,M245,S,S6}'::text[])))"): 17592,
 ('name AS n', "(((n.gender)::text = 'm'::text) OR (n.gender IS NULL))"): 2581078,
 ('name AS n', "(((n.gender)::text = ANY ('{f,m}'::text[])) AND ((n.surname_pcode)::text = ANY ('{C4,C62,C632,D5,F6,F63,G63,H2,L5,M245,S,S6}'::text[])))"): 49735,
 ('name AS n', "(((n.gender)::text = ANY ('{m,f}'::text[])) AND ((n.name_pcode_nf)::text = ANY ('{C6231,F6362,F6525,J513,R1631,R1632,R1636,R2631,S2153}'::text[])))"): 35896,
 ('name AS n', "((n.gender IS NULL) AND (((n.name_pcode_nf)::text = ANY ('{A4163,A4253,A5362,A6532,C5321,C6231,C6235,R516,R5316,S3152,S3521}'::text[])) OR (n.name_pcode_nf IS NULL)))"): 69743,
 ('name AS n', "((n.gender)::text = 'f'::text)"): 982547,
 ('name AS n', "((n.gender)::text = 'm'::text)"): 1731995,
 ('name AS n', "((n.gender)::text = ANY ('{f,m}'::text[]))"): 2714543,
 ('name AS n', "((n.name ~~ '%An%'::text) AND ((n.gender)::text = 'f'::text))"): 29774,
 ('name AS n', "((n.name ~~ '%Tim%'::text) AND ((n.gender)::text = 'm'::text))"): 17495,
 ('name AS n', '(n.gender IS NULL)'): 1452914,
 ('name AS n', "(n.name ~~ '%Downey%Robert%'::text)"): 417,
 ('name AS n', "(n.name ~~ 'B%'::text)"): 336764,
 ('person_info AS pi1', '(pi1.info_type_id = 19)'): 83524,
 ('person_info AS pi1', '(pi1.info_type_id = 25)'): 427503,
 ('person_info AS pi1', '(pi1.info_type_id = 26)'): 136603,
 ('person_info AS pi1', '(pi1.info_type_id = 31)'): 6721,
 ('person_info AS pi1', '(pi1.info_type_id = 32)'): 9588,
 ('person_info AS pi1', '(pi1.info_type_id = 34)'): 20263,
 ('role_type AS rt', "((rt.role)::text = 'actor'::text)"): 1,
 ('role_type AS rt', "((rt.role)::text = 'actress'::text)"): 1,
 ('role_type AS rt', "((rt.role)::text = 'miscellaneous crew'::text)"): 1,
 ('role_type AS rt', "((rt.role)::text = 'producer'::text)"): 1,
 ('role_type AS rt', "((rt.role)::text = 'production designer'::text)"): 1,
 ('role_type AS rt', '((rt.role)::text = ANY (\'{"costume designer","production designer"}\'::text[]))'): 2,
 ('role_type AS rt', '((rt.role)::text = ANY (\'{"miscellaneous crew",producer}\'::text[]))'): 2,
 ('role_type AS rt', "((rt.role)::text = ANY ('{actor,actress}'::text[]))"): 2,
 ('role_type AS rt', "((rt.role)::text = ANY ('{actor,cinematographer,writer}'::text[]))"): 3,
 ('role_type AS rt', '((rt.role)::text = ANY (\'{actor,composer,"miscellaneous crew",producer,"production designer"}\'::text[]))'): 5,
 ('role_type AS rt', "((rt.role)::text = ANY ('{actor,director,writer}'::text[]))"): 3,
 ('role_type AS rt', "((rt.role)::text = ANY ('{actor,producer}'::text[]))"): 2,
 ('role_type AS rt', "((rt.role)::text = ANY ('{actor,writer}'::text[]))"): 2,
 ('role_type AS rt', "((rt.role)::text = ANY ('{actress,cinematographer,writer}'::text[]))"): 3,
 ('role_type AS rt', "((rt.role)::text = ANY ('{actress,producer}'::text[]))"): 2,
 ('role_type AS rt', "((rt.role)::text = ANY ('{actress,writer}'::text[]))"): 2,
 ('role_type AS rt', '((rt.role)::text = ANY (\'{cinematographer,composer,director,editor,"miscellaneous crew",producer,"production designer",writer}\'::text[]))'): 8,
 ('role_type AS rt', "((rt.role)::text = ANY ('{cinematographer,composer}'::text[]))"): 2,
 ('role_type AS rt', "((rt.role)::text = ANY ('{director,producer}'::text[]))"): 2,
 ('role_type AS rt', "((rt.role)::text = ANY ('{editor,writer}'::text[]))"): 2,
 ('title AS t', '((t.production_year <= 1975) AND (t.production_year >= 1875))'): 457842,
 ('title AS t', '((t.production_year <= 1975) AND (t.production_year >= 1900))'): 451182,
 ('title AS t', '((t.production_year <= 1975) AND (t.production_year >= 1925))'): 353956,
 ('title AS t', '((t.production_year <= 1990) AND (t.production_year >= 1950))'): 545566,
 ('title AS t', '((t.production_year <= 2000) AND (t.production_year >= 1875))'): 1093409,
 ('title AS t', '((t.production_year <= 2000) AND (t.production_year >= 1900))'): 1086749,
 ('title AS t', '((t.production_year <= 2000) AND (t.production_year >= 1925))'): 989523,
 ('title AS t', '((t.production_year <= 2000) AND (t.production_year >= 1950))'): 924563,
 ('title AS t', '((t.production_year <= 2008) AND (t.production_year >= 1952))'): 1617245,
 ('title AS t', '((t.production_year <= 2010) AND (t.production_year >= 1950))'): 1898081,
 ('title AS t', '((t.production_year <= 2010) AND (t.production_year >= 1952))'): 1888172,
 ('title AS t', '((t.production_year <= 2011) AND (t.production_year >= 1949))'): 2066691,
 ('title AS t', '((t.production_year <= 2015) AND (1925 < t.production_year))'): 2352208,
 ('title AS t', '((t.production_year <= 2015) AND (1950 < t.production_year))'): 2285141,
 ('title AS t', '((t.production_year <= 2015) AND (1990 < t.production_year))'): 1746143,
 ('title AS t', '((t.production_year <= 2015) AND (2000 < t.production_year))'): 1367146,
 ('title AS t', '((t.production_year <= 2015) AND (t.production_year >= 1925))'): 2356669,
 ('title AS t', '((t.production_year <= 2015) AND (t.production_year >= 1955))'): 2261334,
 ('title AS t', '((t.production_year <= 2015) AND (t.production_year >= 1956))'): 2252966,
 ('title AS t', '((t.production_year <= 2015) AND (t.production_year >= 1975))'): 2016445,
 ('title AS t', '((t.production_year <= 2015) AND (t.production_year >= 1990))'): 1770494,
 ('title AS t', '((t.production_year <= 2020) AND (t.production_year >= 1875))'): 2460562,
 ('title AS t', '((t.production_year <= 2020) AND (t.production_year >= 1925))'): 2356676,
 ('title AS t', '((t.production_year <= 2020) AND (t.production_year >= 1950))'): 2291716,
 ('title AS t', '((t.production_year <= 2020) AND (t.production_year >= 1955))'): 2261341,
 ('title AS t', '((t.production_year <= 2020) AND (t.production_year >= 1970))'): 2085934,
 ('title AS t', '((t.production_year <= 2020) AND (t.production_year >= 2000))'): 1424121,
 ('title AS t', "((t.production_year > 2010) AND (t.title ~~ 'Kung Fu Panda%'::text))"): 37,
 ('title AS t', '(t.production_year > 1990)'): 1746167,
 ('title AS t', '(t.production_year > 2000)'): 1367170}
20 rels: ['aka_name' 'cast_info' 'char_name' 'comp_cast_type' 'company_name'
 'company_type' 'complete_cast' 'info_type' 'keyword' 'kind_type'
 'link_type' 'movie_companies' 'movie_info' 'movie_info_idx'
 'movie_keyword' 'movie_link' 'name' 'person_info' 'role_type' 'title']
33 rel_ids: ['aka_name AS an' 'cast_info AS ci' 'char_name AS chn'
 'comp_cast_type AS cct1' 'comp_cast_type AS cct2' 'company_name AS cn'
 'company_type AS ct' 'complete_cast AS cc' 'info_type AS it'
 'info_type AS it1' 'info_type AS it2' 'info_type AS it3'
 'info_type AS it4' 'info_type AS it5' 'keyword AS k' 'kind_type AS kt'
 'link_type AS lt' 'movie_companies AS mc' 'movie_info AS mi'
 'movie_info AS mi1' 'movie_info AS mi2' 'movie_info_idx AS mi_idx'
 'movie_info_idx AS mii1' 'movie_info_idx AS mii2'
 'movie_info_idx AS miidx' 'movie_keyword AS mk' 'movie_link AS ml'
 'name AS n' 'person_info AS pi1' 'role_type AS rt' 'title AS t'
 'title AS t1' 'title AS t2']
3 scans: ['Index Only Scan' 'Index Scan' 'Seq Scan']
3 joins: ['Hash Join' 'Merge Join' 'Nested Loop']
14 all ops: ['FinalizeAggregate' 'Gather' 'Gather Merge' 'Hash' 'Hash Join'
 'Index Only Scan' 'Index Scan' 'Materialize' 'Merge Join' 'Nested Loop'
 'PartialAggregate' 'Seq Scan' 'SimpleAggregate' 'Sort']
Calling make_and_featurize_trees()...
took 0.2s
num_total_subtrees=981 num_featurized_subtrees=981 num_new_datapoints=981
head
  query=3.144 feat=16.0 cost=5405.091
  query=3.144 feat=16.0 cost=5405.091
tail
  query=3.501 feat=5.0 cost=4989.852
  query=3.501 feat=10.0 cost=4989.852
costs stats mean 8.076531410217285 std 1.7992031574249268
num_train=882 num_validation=99
MakeModel afresh
InitializeModel curr_value_iter=0
Initialized from SIM weights.
iter 0 lr 0.001
number of model parameters: 2120356 (~= 8.1MB)
BalsaModel(
  (model): TreeConvolution(
    (attention_merger_3): AttentionMerger(
      (softmax): Softmax(dim=0)
    )
    (query_mlp): Sequential(
      (0): Linear(in_features=33, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
      (2): LeakyReLU(negative_slope=0.01)
      (3): Linear(in_features=128, out_features=64, bias=True)
      (4): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
      (5): LeakyReLU(negative_slope=0.01)
      (6): Linear(in_features=64, out_features=32, bias=True)
    )
    (conv_module_list_other): ModuleList(
      (0): Sequential(
        (0): TreeConv1d(
          (weights): Conv1d(134, 512, kernel_size=(3,), stride=(3,))
        )
        (1): TreeStandardize()
        (2): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (3): TreeConv1d(
          (weights): Conv1d(512, 256, kernel_size=(3,), stride=(3,))
        )
        (4): TreeStandardize()
        (5): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (6): TreeConv1d(
          (weights): Conv1d(256, 128, kernel_size=(3,), stride=(3,))
        )
        (7): TreeStandardize()
        (8): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (9): TreeMaxPool()
      )
    )
    (conv_module_list_hash_join): ModuleList(
      (0): Sequential(
        (0): TreeConv1d(
          (weights): Conv1d(134, 512, kernel_size=(3,), stride=(3,))
        )
        (1): TreeStandardize()
        (2): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (3): TreeConv1d(
          (weights): Conv1d(512, 256, kernel_size=(3,), stride=(3,))
        )
        (4): TreeStandardize()
        (5): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (6): TreeConv1d(
          (weights): Conv1d(256, 128, kernel_size=(3,), stride=(3,))
        )
        (7): TreeStandardize()
        (8): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (9): TreeMaxPool()
      )
    )
    (conv_module_list_nested_loop_join): ModuleList(
      (0): Sequential(
        (0): TreeConv1d(
          (weights): Conv1d(134, 512, kernel_size=(3,), stride=(3,))
        )
        (1): TreeStandardize()
        (2): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (3): TreeConv1d(
          (weights): Conv1d(512, 256, kernel_size=(3,), stride=(3,))
        )
        (4): TreeStandardize()
        (5): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (6): TreeConv1d(
          (weights): Conv1d(256, 128, kernel_size=(3,), stride=(3,))
        )
        (7): TreeStandardize()
        (8): TreeAct(
          (activation): LeakyReLU(negative_slope=0.01)
        )
        (9): TreeMaxPool()
      )
    )
    (out_mlp): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
      (2): LeakyReLU(negative_slope=0.01)
      (3): Linear(in_features=64, out_features=32, bias=True)
      (4): LayerNorm((32,), eps=1e-05, elementwise_affine=True)
      (5): LeakyReLU(negative_slope=0.01)
      (6): Linear(in_features=32, out_features=1, bias=True)
    )
  )
)
No best checkpoint found (run validaiton yet?); model left unchanged.
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('8'))
AND (it2.id in ('6'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('Austria','Belgium','Brazil','Hungary','India','Mexico','Poland','Spain'))
AND (mi2.info in ('Mono','Silent'))
AND (kt.kind in ('episode','movie','tv movie'))
AND (rt.role in ('costume designer','production designer'))
AND (n.gender IS NULL)
AND (t.production_year <= 1975)
AND (t.production_year >= 1875)
AND (k.keyword IN ('based-on-play','cigarette-smoking','friendship','independent-film','jealousy','lesbian-sex','male-nudity','marriage','mother-daughter-relationship','one-word-title','oral-sex','police','singing','song'))
GROUP BY t.production_year, kt.kind
ORDER BY t.production_year, kt.kind;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 1 1 4 4 4 3 4 4 4 3 3 4 4]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.00000000e+00 1.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 8.84955749e-03 8.84955749e-03 0.00000000e+00
 0.00000000e+00 0.00000000e+00 1.04345236e-04 4.28571433e-01
 0.00000000e+00 0.00000000e+00 0.00000000e+00 8.93923570e-04
 7.48666062e-04 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 1.00000000e+00 0.00000000e+00 3.48630399e-01
 0.00000000e+00 1.66666672e-01 1.81086034e-01 0.00000000e+00
 0.00000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  163.71526504139547
Other difference exceed the threshold, need to switch module.
the difference value is:  163.71526504139547
Hash difference exceed the threshold, need to switch module.
the difference value is:  163.71526504139547
Nested loop difference exceed the threshold, need to switch module.
created a new module and initialize the weights for other
created a new module and initialize the weights for hash join
created a new module and initialize the weights for nested loop join
Planning took 455.2ms
qtest10a, predicted time: 3.2
qtest10a,(predicted 3.2),/*+ MergeJoin(kt rt ci t mi1 it1 n mk mi2 it2 k)
 MergeJoin(kt rt ci t mi1 it1 n mk mi2 it2)
 MergeJoin(kt rt ci t mi1 it1 n mk mi2)
 MergeJoin(kt rt ci t mi1 it1 n mk)
 MergeJoin(rt ci t mi1 it1 n mk)
 MergeJoin(ci t mi1 it1 n mk)
 MergeJoin(ci t mi1 it1 n)
 MergeJoin(ci t mi1 it1)
 MergeJoin(t mi1 it1)
 HashJoin(mi1 it1)
 IndexScan(kt)
 SeqScan(rt)
 IndexScan(ci)
 IndexScan(t)
 IndexScan(mi1)
 IndexScan(it1)
 SeqScan(n)
 SeqScan(mk)
 SeqScan(mi2)
 IndexScan(it2)
 SeqScan(k)
 Leading(((((kt (rt (((ci (t (mi1 it1))) n) mk))) mi2) it2) k)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('8'))
AND (it2.id in ('6'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('Austria','Belgium','Brazil','Hungary','India','Mexico','Poland','Spain'))
AND (mi2.info in ('Mono','Silent'))
AND (kt.kind in ('episode','movie','tv movie'))
AND (rt.role in ('costume designer','production designer'))
AND (n.gender IS NULL)
AND (t.production_year <= 2020)
AND (t.production_year >= 1875)
AND (k.keyword IN ('based-on-play','cigarette-smoking','friendship','independent-film','jealousy','lesbian-sex','male-nudity','marriage','mother-daughter-relationship','one-word-title','oral-sex','police','singing','song'))
GROUP BY t.production_year, kt.kind
ORDER BY t.production_year, kt.kind;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 1 1 4 4 4 3 4 4 3 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.00000000e+00 1.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 8.84955749e-03 8.84955749e-03 0.00000000e+00
 0.00000000e+00 0.00000000e+00 1.04345236e-04 4.28571433e-01
 0.00000000e+00 0.00000000e+00 0.00000000e+00 8.93923570e-04
 7.48666062e-04 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 1.00000000e+00 0.00000000e+00 3.48630399e-01
 0.00000000e+00 1.66666672e-01 9.73203480e-01 0.00000000e+00
 0.00000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  154.83074300860926
Other difference exceed the threshold, need to switch module.
the difference value is:  154.83074300860926
Hash difference exceed the threshold, need to switch module.
the difference value is:  154.83074300860926
Nested loop difference exceed the threshold, need to switch module.
Planning took 590.2ms
qtest10b, predicted time: 2.7
qtest10b,(predicted 2.7),/*+ MergeJoin(rt k ci t mi1 it1 kt n mk mi2 it2)
 MergeJoin(rt k ci t mi1 it1 kt n mk mi2)
 MergeJoin(rt k ci t mi1 it1 kt n mk)
 MergeJoin(k ci t mi1 it1 kt n mk)
 MergeJoin(ci t mi1 it1 kt n mk)
 MergeJoin(ci t mi1 it1 kt n)
 MergeJoin(ci t mi1 it1 kt)
 MergeJoin(ci t mi1 it1)
 MergeJoin(t mi1 it1)
 HashJoin(mi1 it1)
 SeqScan(rt)
 SeqScan(k)
 IndexScan(ci)
 SeqScan(t)
 IndexScan(mi1)
 IndexScan(it1)
 SeqScan(kt)
 SeqScan(n)
 SeqScan(mk)
 SeqScan(mi2)
 IndexScan(it2)
 Leading((((rt (k ((((ci (t (mi1 it1))) kt) n) mk))) mi2) it2)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('8'))
AND (it2.id in ('6'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('Austria','Belgium','Brazil','Hungary','India','Mexico','Poland','Spain'))
AND (mi2.info in ('Mono','Silent'))
AND (kt.kind in ('tv movie'))
AND (rt.role in ('costume designer','production designer'))
AND (n.gender IS NULL)
AND (t.production_year <= 1975)
AND (t.production_year >= 1875)
AND (k.keyword IN ('based-on-play','cigarette-smoking','friendship','independent-film','jealousy','lesbian-sex','male-nudity','marriage','mother-daughter-relationship','one-word-title','oral-sex','police','singing','song'))
GROUP BY t.production_year, kt.kind
ORDER BY t.production_year, kt.kind;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 1 1 4 4 4 3 4 4 4 3 3 4 4]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.00000000e+00 1.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 8.84955749e-03 8.84955749e-03 0.00000000e+00
 0.00000000e+00 0.00000000e+00 1.04345236e-04 1.42857149e-01
 0.00000000e+00 0.00000000e+00 0.00000000e+00 8.93923570e-04
 7.48666062e-04 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 1.00000000e+00 0.00000000e+00 3.48630399e-01
 0.00000000e+00 1.66666672e-01 1.81086034e-01 0.00000000e+00
 0.00000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  163.53974879672282
Other difference exceed the threshold, need to switch module.
the difference value is:  163.53974879672282
Hash difference exceed the threshold, need to switch module.
the difference value is:  163.53974879672282
Nested loop difference exceed the threshold, need to switch module.
Planning took 1624.6ms
qtest10c, predicted time: 6889.2
qtest10c,(predicted 6889.2),/*+ MergeJoin(k mk n rt mi1 mi2 t kt ci it1 it2)
 MergeJoin(mk n rt mi1 mi2 t kt ci it1 it2)
 MergeJoin(n rt mi1 mi2 t kt ci it1 it2)
 MergeJoin(n rt mi1 mi2 t kt ci it1)
 MergeJoin(rt mi1 mi2 t kt ci it1)
 MergeJoin(rt mi1 mi2 t kt ci)
 MergeJoin(mi1 mi2 t kt ci)
 MergeJoin(mi1 mi2 t kt)
 MergeJoin(mi1 mi2 t)
 HashJoin(mi2 t)
 IndexScan(k)
 IndexScan(mk)
 IndexScan(n)
 SeqScan(rt)
 IndexScan(mi1)
 IndexScan(mi2)
 IndexScan(t)
 IndexScan(kt)
 SeqScan(ci)
 SeqScan(it1)
 IndexScan(it2)
 Leading((k (mk ((n ((rt (((mi1 (mi2 t)) kt) ci)) it1)) it2)))) */
---------------------------------------
sql_str:  SELECT
    MIN(n.name) AS member_in_charnamed_movie
FROM
    cast_info AS ci,
    company_name AS cn,
    keyword AS k,
    movie_companies AS mc,
    movie_keyword AS mk,
    name AS n,
    title AS t
WHERE
    cn.country_code = '[us]'
    AND k.keyword = 'character-name-in-title'
    AND n.id = ci.person_id
    AND ci.movie_id = t.id
    AND t.id = mk.movie_id
    AND mk.keyword_id = k.id
    AND t.id = mc.movie_id
    AND mc.company_id = cn.id
    AND ci.movie_id = mc.movie_id
    AND ci.movie_id = mk.movie_id
    AND mc.movie_id = mk.movie_id
GROUP BY t.production_year, t.title
ORDER BY t.production_year, t.title;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 3 4 4 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 13  2  3 12  3  4 11  4  5 10  5  6  9  6  7  8  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 3.6416635e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 7.4532309e-06
 0.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  136.65060442484074
Other difference exceed the threshold, need to switch module.
the difference value is:  136.65060442484074
Hash difference exceed the threshold, need to switch module.
the difference value is:  136.65060442484074
Nested loop difference exceed the threshold, need to switch module.
Planning took 127.5ms
qtest11a, predicted time: 1.6
qtest11a,(predicted 1.6),/*+ MergeJoin(ci k mk n mc t cn)
 MergeJoin(ci k mk n mc t)
 MergeJoin(ci k mk n mc)
 MergeJoin(ci k mk n)
 MergeJoin(ci k mk)
 HashJoin(k mk)
 SeqScan(ci)
 SeqScan(k)
 IndexScan(mk)
 SeqScan(n)
 IndexScan(mc)
 SeqScan(t)
 SeqScan(cn)
 Leading((((((ci (k mk)) n) mc) t) cn)) */
---------------------------------------
sql_str:  SELECT
    MAX(n.name) AS member_in_charnamed_movie
FROM
    cast_info AS ci,
    company_name AS cn,
    keyword AS k,
    movie_companies AS mc,
    movie_keyword AS mk,
    name AS n,
    title AS t
WHERE
    cn.country_code = '[us]'
    AND k.keyword = 'character-name-in-title'
    AND n.id = ci.person_id
    AND ci.movie_id = t.id
    AND t.id = mk.movie_id
    AND mk.keyword_id = k.id
    AND t.id = mc.movie_id
    AND mc.company_id = cn.id
    AND ci.movie_id = mc.movie_id
    AND ci.movie_id = mk.movie_id
    AND mc.movie_id = mk.movie_id
GROUP BY t.production_year, t.title
ORDER BY t.production_year, t.title;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 3 4 4 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 13  2  3 12  3  4 11  4  5 10  5  6  9  6  7  8  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 3.6416635e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 7.4532309e-06
 0.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  116.37268230411254
Other difference exceed the threshold, need to switch module.
the difference value is:  116.37268230411254
Hash difference exceed the threshold, need to switch module.
the difference value is:  116.37268230411254
Nested loop difference exceed the threshold, need to switch module.
Planning took 87.7ms
qtest11b, predicted time: 8601.5
qtest11b,(predicted 8601.5),/*+ MergeJoin(mc ci k mk t cn n)
 HashJoin(mc ci k mk t cn)
 HashJoin(mc ci k mk t)
 HashJoin(ci k mk t)
 MergeJoin(k mk t)
 HashJoin(k mk)
 SeqScan(mc)
 SeqScan(ci)
 IndexScan(k)
 IndexScan(mk)
 SeqScan(t)
 IndexScan(cn)
 IndexScan(n)
 Leading((((mc (ci ((k mk) t))) cn) n)) */
---------------------------------------
sql_str:  SELECT
    MIN(n.name) AS member_in_charnamed_movie
FROM
    cast_info AS ci,
    company_name AS cn,
    keyword AS k,
    movie_companies AS mc,
    movie_keyword AS mk,
    name AS n,
    title AS t
WHERE
    cn.country_code = '[uk]'
    AND k.keyword = 'character-name-in-title'
    AND n.id = ci.person_id
    AND ci.movie_id = t.id
    AND t.id = mk.movie_id
    AND mk.keyword_id = k.id
    AND t.id = mc.movie_id
    AND mc.company_id = cn.id
    AND ci.movie_id = mc.movie_id
    AND ci.movie_id = mk.movie_id
    AND mc.movie_id = mk.movie_id
GROUP BY t.production_year, t.title
ORDER BY t.production_year, t.title;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 3 4 4 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 13  2  3 12  3  4 11  4  5 10  5  6  9  6  7  8  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0]
query_enc_matrix for this sql:  [0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 9.361822e-05 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 7.453231e-06
 0.000000e+00 0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 1.000000e+00 0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00
 1.000000e+00 0.000000e+00 0.000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  136.52862051858386
Other difference exceed the threshold, need to switch module.
the difference value is:  136.52862051858386
Hash difference exceed the threshold, need to switch module.
the difference value is:  136.52862051858386
Nested loop difference exceed the threshold, need to switch module.
Planning took 129.7ms
qtest11c, predicted time: 1.2
qtest11c,(predicted 1.2),/*+ MergeJoin(ci k mk mc n cn t)
 MergeJoin(ci k mk mc n cn)
 MergeJoin(ci k mk mc n)
 MergeJoin(ci k mk mc)
 HashJoin(k mk mc)
 MergeJoin(k mk)
 IndexScan(ci)
 SeqScan(k)
 IndexScan(mk)
 SeqScan(mc)
 IndexScan(n)
 SeqScan(cn)
 SeqScan(t)
 Leading(((((ci ((k mk) mc)) n) cn) t)) */
---------------------------------------
sql_str:   SELECT
    MIN(n.name) AS member_in_charnamed_american_movie,
    MIN(n.name) AS a1
FROM
    cast_info AS ci,
    company_name AS cn,
    keyword AS k,
    movie_companies AS mc,
    movie_keyword AS mk,
    name AS n,
    title AS t
WHERE
    cn.country_code = '[us]'
    AND k.keyword = 'character-name-in-title'
    AND n.name LIKE 'B%'
    AND n.id = ci.person_id
    AND ci.movie_id = t.id
    AND t.id = mk.movie_id
    AND mk.keyword_id = k.id
    AND t.id = mc.movie_id
    AND mc.company_id = cn.id
    AND ci.movie_id = mc.movie_id
    AND ci.movie_id = mk.movie_id
    AND mc.movie_id = mk.movie_id
GROUP BY t.production_year, t.title
ORDER BY t.production_year, t.title;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 3 4 4 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 13  2  3 12  3  4 11  4  5 10  5  6  9  6  7  8  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 3.6416635e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 7.4532309e-06
 0.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 8.0807373e-02 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  115.48099560132472
Other difference exceed the threshold, need to switch module.
the difference value is:  115.48099560132472
Hash difference exceed the threshold, need to switch module.
the difference value is:  115.48099560132472
Nested loop difference exceed the threshold, need to switch module.
Planning took 166.7ms
qtest12a, predicted time: 6249.5
qtest12a,(predicted 6249.5),/*+ MergeJoin(t cn mc n ci k mk)
 MergeJoin(cn mc n ci k mk)
 MergeJoin(mc n ci k mk)
 HashJoin(n ci k mk)
 MergeJoin(ci k mk)
 HashJoin(k mk)
 SeqScan(t)
 IndexScan(cn)
 IndexScan(mc)
 IndexScan(n)
 SeqScan(ci)
 IndexScan(k)
 IndexScan(mk)
 Leading((t (cn (mc (n (ci (k mk))))))) */
---------------------------------------
sql_str:  SELECT
    MIN(n.name) AS member_in_charnamed_american_movie,
    MIN(n.name) AS a1
FROM
    cast_info AS ci,
    company_name AS cn,
    keyword AS k,
    movie_companies AS mc,
    movie_keyword AS mk,
    name AS n,
    title AS t
WHERE
    cn.country_code = '[uk]'
    AND k.keyword = 'character-name-in-title'
    AND n.name LIKE 'B%'
    AND n.id = ci.person_id
    AND ci.movie_id = t.id
    AND t.id = mk.movie_id
    AND mk.keyword_id = k.id
    AND t.id = mc.movie_id
    AND mc.company_id = cn.id
    AND ci.movie_id = mc.movie_id
    AND ci.movie_id = mk.movie_id
    AND mc.movie_id = mk.movie_id
GROUP BY t.production_year, t.title
ORDER BY t.production_year, t.title;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 3 4 4 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 13  2  3 12  3  4 11  4  5 10  5  6  9  6  7  8  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0]
query_enc_matrix for this sql:  [0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 9.361822e-05 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 7.453231e-06
 0.000000e+00 0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 1.000000e+00 0.000000e+00 8.080737e-02 0.000000e+00 0.000000e+00
 1.000000e+00 0.000000e+00 0.000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  135.57723415238164
Other difference exceed the threshold, need to switch module.
the difference value is:  135.57723415238164
Hash difference exceed the threshold, need to switch module.
the difference value is:  135.57723415238164
Nested loop difference exceed the threshold, need to switch module.
Planning took 117.1ms
qtest12c, predicted time: 2.4
qtest12c,(predicted 2.4),/*+ MergeJoin(mk t n ci mc cn k)
 MergeJoin(mk t n ci mc cn)
 MergeJoin(mk t n ci mc)
 MergeJoin(mk t n ci)
 MergeJoin(t n ci)
 HashJoin(n ci)
 IndexScan(mk)
 IndexScan(t)
 IndexScan(n)
 SeqScan(ci)
 SeqScan(mc)
 SeqScan(cn)
 SeqScan(k)
 Leading(((((mk (t (n ci))) mc) cn) k)) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
movie_keyword as mk,
keyword as k,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND t.id = mk.movie_id
AND mk.keyword_id = k.id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('episode'))
AND (t.production_year <= 1975)
AND (t.production_year >= 1925)
AND (mi1.info IN ('Mono'))
AND (it1.id IN ('13','6','8'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 7.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 3.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 10000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND rt.id = ci.role_id
AND (n.gender in ('m') OR n.gender IS NULL)
AND (n.name_pcode_nf in ('A4163','B6563','D1316','F6521','F6523','F6524','J5216','J5262','P3616'))
AND (ci.note IS NULL)
AND (rt.role in ('actor'))
AND (it5.id in ('32'))
GROUP BY t.production_year, kt.kind
ORDER BY t.production_year, kt.kind;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 4 3 5 4 5 4 5 3 4]
indexes_env_matrix for this sql:  [ 1  2 31  2  3 30  3  4 29  4  5  6  5  0  0  6  7 28  7  8 27  8  9 26
  9 10 25 10 11 24 11 12 23 12 13 22 13 14 21 14 15 20 15 16 19 16 17 18
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0 28  0  0 29  0  0 30  0  0 31  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 6.0610288e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 1.0000000e+00
 1.4285715e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.4195266e-02
 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04 0.0000000e+00
 1.0000000e+00 0.0000000e+00 7.0058941e-03 3.2351846e-03 8.3333336e-02
 1.3999696e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  214.04197569980855
Other difference exceed the threshold, need to switch module.
the difference value is:  214.04197569980855
Hash difference exceed the threshold, need to switch module.
the difference value is:  214.04197569980855
Nested loop difference exceed the threshold, need to switch module.
Planning took 414.6ms
qtest13a, predicted time: 838.6
qtest13a,(predicted 838.6),/*+ NestLoop(pi1 rt ci it1 kt it4 mi1 mii1 it3 t mii2 n it5 mk an k)
 NestLoop(pi1 rt ci it1 kt it4 mi1 mii1 it3 t mii2 n it5 mk an)
 NestLoop(pi1 rt ci it1 kt it4 mi1 mii1 it3 t mii2 n it5 mk)
 NestLoop(pi1 rt ci it1 kt it4 mi1 mii1 it3 t mii2 n it5)
 HashJoin(pi1 rt ci it1 kt it4 mi1 mii1 it3 t mii2 n)
 HashJoin(rt ci it1 kt it4 mi1 mii1 it3 t mii2 n)
 HashJoin(rt ci it1 kt it4 mi1 mii1 it3 t mii2)
 HashJoin(ci it1 kt it4 mi1 mii1 it3 t mii2)
 MergeJoin(it1 kt it4 mi1 mii1 it3 t mii2)
 MergeJoin(kt it4 mi1 mii1 it3 t mii2)
 MergeJoin(it4 mi1 mii1 it3 t mii2)
 MergeJoin(mi1 mii1 it3 t mii2)
 MergeJoin(mi1 mii1 it3 t)
 MergeJoin(mii1 it3 t)
 HashJoin(mii1 it3)
 SeqScan(pi1)
 IndexScan(rt)
 SeqScan(ci)
 SeqScan(it1)
 SeqScan(kt)
 SeqScan(it4)
 IndexScan(mi1)
 IndexScan(mii1)
 IndexScan(it3)
 SeqScan(t)
 IndexScan(mii2)
 IndexScan(n)
 IndexScan(it5)
 IndexScan(mk)
 IndexScan(an)
 IndexScan(k)
 Leading((((((pi1 ((rt (ci (it1 (kt (it4 ((mi1 ((mii1 it3) t)) mii2)))))) n)) it5) mk) an) k)) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
movie_keyword as mk,
keyword as k,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND t.id = mk.movie_id
AND mk.keyword_id = k.id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('episode'))
AND (t.production_year <= 2020)
AND (t.production_year >= 1955)
AND (mi1.info IN ('Mono'))
AND (it1.id IN ('13','7','8'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 7.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 3.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 10000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND rt.id = ci.role_id
AND (n.gender in ('m') OR n.gender IS NULL)
AND (n.name_pcode_nf in ('A4163','B6563','D1316','F6521','F6523','F6524','J5216','J5262','P3616'))
AND (ci.note IS NULL)
AND (rt.role in ('actor'))
AND (it5.id in ('32'))
GROUP BY t.production_year, kt.kind
ORDER BY t.production_year, kt.kind;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 4 3 5 4 5 4 5 3 4]
indexes_env_matrix for this sql:  [ 1  2 31  2  3 30  3  4 29  4  5  6  5  0  0  6  7 28  7  8 27  8  9 26
  9 10 25 10 11 24 11 12 23 12 13 22 13 14 21 14 15 20 15 16 19 16 17 18
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0 28  0  0 29  0  0 30  0  0 31  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 6.0610288e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 1.0000000e+00
 1.4285715e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.4195266e-02
 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04 0.0000000e+00
 1.0000000e+00 0.0000000e+00 7.0058941e-03 3.2351846e-03 8.3333336e-02
 8.9440739e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  210.43631483674008
Other difference exceed the threshold, need to switch module.
the difference value is:  210.43631483674008
Hash difference exceed the threshold, need to switch module.
the difference value is:  210.43631483674008
Nested loop difference exceed the threshold, need to switch module.
Planning took 1767.0ms
qtest13b, predicted time: 1.8
qtest13b,(predicted 1.8),/*+ MergeJoin(n ci k mk t mii2 it4 kt mii1 it3 pi1 an it5 mi1 rt it1)
 MergeJoin(n ci k mk t mii2 it4 kt mii1 it3 pi1 an it5 mi1 rt)
 MergeJoin(n ci k mk t mii2 it4 kt mii1 it3 pi1 an it5 mi1)
 MergeJoin(n ci k mk t mii2 it4 kt mii1 it3 pi1 an it5)
 MergeJoin(n ci k mk t mii2 it4 kt mii1 it3 pi1 an)
 MergeJoin(n ci k mk t mii2 it4 kt mii1 it3 pi1)
 MergeJoin(n ci k mk t mii2 it4 kt mii1 it3)
 MergeJoin(n ci k mk t mii2 it4 kt mii1)
 MergeJoin(n ci k mk t mii2 it4 kt)
 MergeJoin(n ci k mk t mii2 it4)
 MergeJoin(n ci k mk t mii2)
 MergeJoin(ci k mk t mii2)
 MergeJoin(ci k mk t)
 NestLoop(k mk t)
 HashJoin(k mk)
 SeqScan(n)
 IndexScan(ci)
 SeqScan(k)
 SeqScan(mk)
 IndexScan(t)
 IndexScan(mii2)
 IndexScan(it4)
 IndexScan(kt)
 IndexScan(mii1)
 SeqScan(it3)
 SeqScan(pi1)
 SeqScan(an)
 SeqScan(it5)
 IndexScan(mi1)
 IndexScan(rt)
 SeqScan(it1)
 Leading((((((((((((n ((ci ((k mk) t)) mii2)) it4) kt) mii1) it3) pi1) an) it5) mi1) rt) it1)) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
movie_keyword as mk,
keyword as k,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND t.id = mk.movie_id
AND mk.keyword_id = k.id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('episode'))
AND (t.production_year <= 1975)
AND (t.production_year >= 1925)
AND (mi1.info IN ('Mono'))
AND (it1.id IN ('13'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 7.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 3.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 10000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND rt.id = ci.role_id
AND (n.gender in ('m') OR n.gender IS NULL)
AND (n.name_pcode_nf in ('A4163','B6563','D1316','F6521','F6523','F6524','J5216','J5262','P3616'))
AND (ci.note IS NULL)
AND (rt.role in ('actor'))
AND (it5.id in ('32'))
GROUP BY t.production_year, kt.kind
ORDER BY t.production_year, kt.kind;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 4 3 5 4 3 4 5 3 4]
indexes_env_matrix for this sql:  [ 1  2 31  2  3 30  3  4 29  4  5  6  5  0  0  6  7 28  7  8 27  8  9 26
  9 10 25 10 11 24 11 12 23 12 13 22 13 14 21 14 15 20 15 16 19 16 17 18
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0 28  0  0 29  0  0 30  0  0 31  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 6.0610288e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 1.0000000e+00
 1.4285715e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.7080398e-04
 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04 0.0000000e+00
 1.0000000e+00 0.0000000e+00 7.0058941e-03 3.2351846e-03 8.3333336e-02
 1.3999696e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  213.76643293039817
Other difference exceed the threshold, need to switch module.
the difference value is:  213.76643293039817
Hash difference exceed the threshold, need to switch module.
the difference value is:  213.76643293039817
Nested loop difference exceed the threshold, need to switch module.
Planning took 796.1ms
qtest13c, predicted time: 2100.3
qtest13c,(predicted 2100.3),/*+ NestLoop(it1 k kt it4 mi1 mii1 it3 t mii2 mk ci rt pi1 it5 n an)
 NestLoop(it1 k kt it4 mi1 mii1 it3 t mii2 mk ci rt pi1 it5 n)
 NestLoop(it1 k kt it4 mi1 mii1 it3 t mii2 mk ci rt pi1 it5)
 NestLoop(it1 k kt it4 mi1 mii1 it3 t mii2 mk ci rt pi1)
 NestLoop(it1 k kt it4 mi1 mii1 it3 t mii2 mk ci rt)
 NestLoop(it1 k kt it4 mi1 mii1 it3 t mii2 mk ci)
 HashJoin(it1 k kt it4 mi1 mii1 it3 t mii2 mk)
 MergeJoin(k kt it4 mi1 mii1 it3 t mii2 mk)
 MergeJoin(kt it4 mi1 mii1 it3 t mii2 mk)
 MergeJoin(kt it4 mi1 mii1 it3 t mii2)
 MergeJoin(it4 mi1 mii1 it3 t mii2)
 MergeJoin(mi1 mii1 it3 t mii2)
 MergeJoin(mi1 mii1 it3 t)
 MergeJoin(mii1 it3 t)
 HashJoin(mii1 it3)
 IndexScan(it1)
 IndexScan(k)
 SeqScan(kt)
 SeqScan(it4)
 IndexScan(mi1)
 IndexScan(mii1)
 IndexScan(it3)
 SeqScan(t)
 IndexScan(mii2)
 IndexScan(mk)
 IndexScan(ci)
 IndexScan(rt)
 IndexScan(pi1)
 IndexScan(it5)
 IndexScan(n)
 IndexScan(an)
 Leading((((((((it1 (k ((kt (it4 ((mi1 ((mii1 it3) t)) mii2))) mk))) ci) rt) pi1) it5) n) an)) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND mii2.movie_id = mii1.movie_id
AND mi1.movie_id = mii1.movie_id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('episode','movie'))
AND (t.production_year <= 1990)
AND (t.production_year >= 1950)
AND (mi1.info IN ('OFM:35 mm','PCS:Spherical','PFM:35 mm','PFM:Video','RAT:1.33 : 1','RAT:1.37 : 1'))
AND (it1.id IN ('15','7','98'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 11.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 7.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 1000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND an.person_id = pi1.person_id
AND rt.id = ci.role_id
AND (n.gender in ('m') OR n.gender IS NULL)
AND (n.name_pcode_nf in ('B6514','D1352','J5163','J5245','M2423','M6126','M6241','M6245','M6252','P3614','V2361','W4125','W4525'))
AND (ci.note in ('(executive producer)') OR ci.note IS NULL)
AND (rt.role in ('actor','producer'))
AND (it5.id in ('19'))
GROUP BY t.production_year, kt.kind
ORDER BY t.production_year, kt.kind;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 4 5 5 4 3 4 3]
indexes_env_matrix for this sql:  [ 1  2 27  2  3 26  3  4 25  4  5  6  5  0  0  6  7 24  7  8 23  8  9 22
  9 10 21 10 11 20 11 12 19 12 13 18 13 14 17 14 15 16 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 6.1726785e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 0.0000000e+00
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.1657541e-02
 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04 0.0000000e+00
 0.0000000e+00 0.0000000e+00 4.1180653e-03 2.8182682e-02 1.6666667e-01
 2.1578270e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  188.68649660428798
Other difference exceed the threshold, need to switch module.
the difference value is:  188.68649660428798
Hash difference exceed the threshold, need to switch module.
the difference value is:  188.68649660428798
Nested loop difference exceed the threshold, need to switch module.
Planning took 1248.5ms
qtest14a, predicted time: 4.4
qtest14a,(predicted 4.4),/*+ MergeJoin(it3 mii2 mii1 it4 mi1 t kt it1 ci n pi1 an rt it5)
 MergeJoin(it3 mii2 mii1 it4 mi1 t kt it1 ci n pi1 an rt)
 MergeJoin(it3 mii2 mii1 it4 mi1 t kt it1 ci n pi1 an)
 MergeJoin(it3 mii2 mii1 it4 mi1 t kt it1 ci n pi1)
 MergeJoin(it3 mii2 mii1 it4 mi1 t kt it1 ci n)
 MergeJoin(it3 mii2 mii1 it4 mi1 t kt it1 ci)
 MergeJoin(it3 mii2 mii1 it4 mi1 t kt it1)
 MergeJoin(it3 mii2 mii1 it4 mi1 t kt)
 MergeJoin(it3 mii2 mii1 it4 mi1 t)
 MergeJoin(it3 mii2 mii1 it4 mi1)
 MergeJoin(it3 mii2 mii1 it4)
 MergeJoin(it3 mii2 mii1)
 HashJoin(mii2 mii1)
 IndexScan(it3)
 SeqScan(mii2)
 IndexScan(mii1)
 SeqScan(it4)
 IndexScan(mi1)
 IndexScan(t)
 IndexScan(kt)
 IndexScan(it1)
 SeqScan(ci)
 IndexScan(n)
 SeqScan(pi1)
 IndexScan(an)
 SeqScan(rt)
 SeqScan(it5)
 Leading(((((((((((((it3 (mii2 mii1)) it4) mi1) t) kt) it1) ci) n) pi1) an) rt) it5)) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND mii2.movie_id = mii1.movie_id
AND mi1.movie_id = mii1.movie_id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('episode','movie'))
AND (t.production_year <= 1990)
AND (t.production_year >= 1950)
AND (mi1.info IN ('OFM:35 mm','PCS:Spherical','PFM:35 mm','PFM:Video','RAT:1.33 : 1','RAT:1.37 : 1'))
AND (it1.id IN ('15','7','98'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 11.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 7.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 1000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND an.person_id = pi1.person_id
AND rt.id = ci.role_id
AND (n.gender in ('f') OR n.gender IS NULL)
AND (n.name_pcode_nf in ('B6514','D1352','J5163','J5245','M2423','M6126','M6241','M6245','M6252','P3614','V2361','W4125','W4525'))
AND (ci.note in ('(executive producer)') OR ci.note IS NULL)
AND (rt.role in ('actress','producer'))
AND (it5.id in ('19'))
GROUP BY t.production_year, kt.kind
ORDER BY t.production_year, kt.kind;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 4 5 5 4 3 4 3]
indexes_env_matrix for this sql:  [ 1  2 27  2  3 26  3  4 25  4  5  6  5  0  0  6  7 24  7  8 23  8  9 22
  9 10 21 10 11 20 11 12 19 12 13 18 13 14 17 14 15 16 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 6.1726785e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 0.0000000e+00
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.1657541e-02
 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04 0.0000000e+00
 0.0000000e+00 0.0000000e+00 3.3391793e-03 2.8182682e-02 1.6666667e-01
 2.1578270e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  196.1026471642179
Other difference exceed the threshold, need to switch module.
the difference value is:  196.1026471642179
Hash difference exceed the threshold, need to switch module.
the difference value is:  196.1026471642179
Nested loop difference exceed the threshold, need to switch module.
Planning took 1644.5ms
qtest14b, predicted time: 2991.9
qtest14b,(predicted 2991.9),/*+ MergeJoin(an rt n it5 pi1 kt it4 t mii1 it3 mi1 mii2 it1 ci)
 MergeJoin(rt n it5 pi1 kt it4 t mii1 it3 mi1 mii2 it1 ci)
 MergeJoin(n it5 pi1 kt it4 t mii1 it3 mi1 mii2 it1 ci)
 MergeJoin(it5 pi1 kt it4 t mii1 it3 mi1 mii2 it1 ci)
 MergeJoin(pi1 kt it4 t mii1 it3 mi1 mii2 it1 ci)
 MergeJoin(kt it4 t mii1 it3 mi1 mii2 it1 ci)
 MergeJoin(kt it4 t mii1 it3 mi1 mii2 it1)
 MergeJoin(kt it4 t mii1 it3 mi1 mii2)
 MergeJoin(it4 t mii1 it3 mi1 mii2)
 MergeJoin(t mii1 it3 mi1 mii2)
 MergeJoin(mii1 it3 mi1 mii2)
 MergeJoin(mii1 it3 mi1)
 HashJoin(mii1 it3)
 SeqScan(an)
 SeqScan(rt)
 IndexScan(n)
 SeqScan(it5)
 SeqScan(pi1)
 SeqScan(kt)
 SeqScan(it4)
 IndexScan(t)
 IndexScan(mii1)
 IndexScan(it3)
 SeqScan(mi1)
 IndexScan(mii2)
 IndexScan(it1)
 IndexScan(ci)
 Leading((an (rt (n (it5 (pi1 (((kt (it4 (t (((mii1 it3) mi1) mii2)))) it1) ci))))))) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND mii2.movie_id = mii1.movie_id
AND mi1.movie_id = mii1.movie_id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('episode','movie'))
AND (t.production_year <= 1990)
AND (t.production_year >= 1950)
AND (mi1.info IN ('OFM:35 mm','PCS:Spherical','PFM:35 mm','PFM:Video','RAT:1.33 : 1','RAT:1.37 : 1'))
AND (it1.id IN ('15','7','98'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 11.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 7.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 1000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND an.person_id = pi1.person_id
AND rt.id = ci.role_id
AND (n.gender in ('m') OR n.gender IS NULL)
AND (n.name_pcode_nf in ('M2423','M6126','M6241','M6245','M6252','P3614','V2361','W4125','W4525'))
AND (ci.note in ('(executive producer)') OR ci.note IS NULL)
AND (rt.role in ('actor','producer'))
AND (it5.id in ('19'))
GROUP BY t.production_year, kt.kind
ORDER BY t.production_year, kt.kind;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 4 5 5 4 3 4 3]
indexes_env_matrix for this sql:  [ 1  2 27  2  3 26  3  4 25  4  5  6  5  0  0  6  7 24  7  8 23  8  9 22
  9 10 21 10 11 20 11 12 19 12 13 18 13 14 17 14 15 16 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 6.1726785e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 0.0000000e+00
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.1657541e-02
 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04 0.0000000e+00
 0.0000000e+00 0.0000000e+00 2.3354581e-03 2.8182682e-02 1.6666667e-01
 2.1578270e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  188.68648314793094
Other difference exceed the threshold, need to switch module.
the difference value is:  188.68648314793094
Hash difference exceed the threshold, need to switch module.
the difference value is:  188.68648314793094
Nested loop difference exceed the threshold, need to switch module.
Planning took 1226.0ms
qtest14c, predicted time: 4.4
qtest14c,(predicted 4.4),/*+ MergeJoin(it3 mii2 mii1 it4 mi1 t kt it1 ci n pi1 an rt it5)
 MergeJoin(it3 mii2 mii1 it4 mi1 t kt it1 ci n pi1 an rt)
 MergeJoin(it3 mii2 mii1 it4 mi1 t kt it1 ci n pi1 an)
 MergeJoin(it3 mii2 mii1 it4 mi1 t kt it1 ci n pi1)
 MergeJoin(it3 mii2 mii1 it4 mi1 t kt it1 ci n)
 MergeJoin(it3 mii2 mii1 it4 mi1 t kt it1 ci)
 MergeJoin(it3 mii2 mii1 it4 mi1 t kt it1)
 MergeJoin(it3 mii2 mii1 it4 mi1 t kt)
 MergeJoin(it3 mii2 mii1 it4 mi1 t)
 MergeJoin(it3 mii2 mii1 it4 mi1)
 MergeJoin(it3 mii2 mii1 it4)
 MergeJoin(it3 mii2 mii1)
 HashJoin(mii2 mii1)
 IndexScan(it3)
 SeqScan(mii2)
 IndexScan(mii1)
 SeqScan(it4)
 IndexScan(mi1)
 IndexScan(t)
 IndexScan(kt)
 IndexScan(it1)
 SeqScan(ci)
 IndexScan(n)
 SeqScan(pi1)
 IndexScan(an)
 SeqScan(rt)
 SeqScan(it5)
 Leading(((((((((((((it3 (mii2 mii1)) it4) mi1) t) kt) it1) ci) n) pi1) an) rt) it5)) */
---------------------------------------
sql_str:  SELECT
    MIN(mi.info) AS movie_budget,
    MIN(mi_idx.info) AS movie_votes,
    MIN(t.title) AS movie_title
FROM
    cast_info AS ci,
    info_type AS it1,
    info_type AS it2,
    movie_info AS mi,
    movie_info_idx AS mi_idx,
    name AS n,
    title AS t
WHERE
    ci.note in ('(producer)', '(executive producer)')
    AND it1.info = 'budget'
    AND it2.info = 'votes'
    AND n.gender = 'm'
    and n.name like '%Tim%'
    AND t.id = mi.movie_id
    AND t.id = mi_idx.movie_id
    AND t.id = ci.movie_id
    AND ci.movie_id = mi.movie_id
    AND ci.movie_id = mi_idx.movie_id
    AND mi.movie_id = mi_idx.movie_id
    AND n.id = ci.person_id
    AND it1.id = mi.info_type_id
    AND it2.id = mi_idx.info_type_id
GROUP BY t.production_year, n.name
ORDER BY t.production_year, n.name;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 0 1 0 3 3 4 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 13  2  3 12  3  4 11  4  5 10  5  6  9  6  7  8  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0]
query_enc_matrix for this sql:  [0.         0.06764824 0.         0.         0.         0.
 0.         0.         0.         0.00884956 0.00884956 0.
 0.         0.         0.         0.         0.         0.
 1.         0.         0.         1.         0.         0.
 0.         0.         0.         0.00419797 0.         0.
 1.         0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  118.37810908173053
Other difference exceed the threshold, need to switch module.
the difference value is:  118.37810908173053
Hash difference exceed the threshold, need to switch module.
the difference value is:  118.37810908173053
Nested loop difference exceed the threshold, need to switch module.
Planning took 92.6ms
qtest15a, predicted time: 2684.6
qtest15a,(predicted 2684.6),/*+ MergeJoin(ci mi_idx mi it1 it2 t n)
 HashJoin(ci mi_idx mi it1 it2 t)
 HashJoin(mi_idx mi it1 it2 t)
 HashJoin(mi_idx mi it1 it2)
 HashJoin(mi_idx mi it1)
 HashJoin(mi it1)
 SeqScan(ci)
 SeqScan(mi_idx)
 IndexScan(mi)
 IndexScan(it1)
 IndexScan(it2)
 SeqScan(t)
 IndexScan(n)
 Leading(((ci (((mi_idx (mi it1)) it2) t)) n)) */
---------------------------------------
sql_str:  SELECT
    MAX(mi.info) AS movie_budget,
    MAX(mi_idx.info) AS movie_votes,
    MAX(t.title) AS movie_title
FROM
    cast_info AS ci,
    info_type AS it1,
    info_type AS it2,
    movie_info AS mi,
    movie_info_idx AS mi_idx,
    name AS n,
    title AS t
WHERE
    ci.note in ('(producer)', '(executive producer)')
    AND it1.info = 'budget'
    AND it2.info = 'votes'
    AND n.gender = 'm'
    and n.name like '%Tim%'
    AND t.id = mi.movie_id
    AND t.id = mi_idx.movie_id
    AND t.id = ci.movie_id
    AND ci.movie_id = mi.movie_id
    AND ci.movie_id = mi_idx.movie_id
    AND mi.movie_id = mi_idx.movie_id
    AND n.id = ci.person_id
    AND it1.id = mi.info_type_id
    AND it2.id = mi_idx.info_type_id
GROUP BY t.production_year, n.name
ORDER BY t.production_year, n.name;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 0 1 0 3 3 4 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 13  2  3 12  3  4 11  4  5 10  5  6  9  6  7  8  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0]
query_enc_matrix for this sql:  [0.         0.06764824 0.         0.         0.         0.
 0.         0.         0.         0.00884956 0.00884956 0.
 0.         0.         0.         0.         0.         0.
 1.         0.         0.         1.         0.         0.
 0.         0.         0.         0.00419797 0.         0.
 1.         0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  136.5359410263444
Other difference exceed the threshold, need to switch module.
the difference value is:  136.5359410263444
Hash difference exceed the threshold, need to switch module.
the difference value is:  136.5359410263444
Nested loop difference exceed the threshold, need to switch module.
Planning took 86.5ms
qtest15b, predicted time: 1.1
qtest15b,(predicted 1.1),/*+ MergeJoin(ci t mi_idx n mi it1 it2)
 MergeJoin(ci t mi_idx n mi it1)
 MergeJoin(ci t mi_idx n mi)
 MergeJoin(ci t mi_idx n)
 MergeJoin(ci t mi_idx)
 HashJoin(t mi_idx)
 IndexScan(ci)
 IndexScan(t)
 SeqScan(mi_idx)
 SeqScan(n)
 SeqScan(mi)
 SeqScan(it1)
 IndexScan(it2)
 Leading((((((ci (t mi_idx)) n) mi) it1) it2)) */
---------------------------------------
sql_str:  SELECT
    MIN(chn.name) AS character_name,
    MIN(mi_idx.info) AS rating,
    MIN(t.title) AS complete_hero_movie
FROM
    complete_cast AS cc,
    comp_cast_type AS cct1,
    comp_cast_type AS cct2,
    char_name AS chn,
    cast_info AS ci,
    info_type AS it2,
    keyword AS k,
    kind_type AS kt,
    movie_info_idx AS mi_idx,
    movie_keyword AS mk,
    name AS n,
    title AS t
WHERE
    cct1.kind = 'cast'
    AND cct2.kind like '%complete%'
    AND chn.name is not NULL
    and (
        chn.name like '%man%'
        or chn.name like '%Man%'
    )
    AND it2.info = 'rating'
    AND k.keyword in (
        'superhero',
        'marvel-comics',
        'based-on-comic',
        'tv-special',
        'fight',
        'violence',
        'magnet',
        'web',
        'claw',
        'laser'
    )
    AND kt.kind = 'movie'
    AND t.production_year > 2000
    AND kt.id = t.kind_id
    AND t.id = mk.movie_id
    AND t.id = ci.movie_id
    AND t.id = cc.movie_id
    AND t.id = mi_idx.movie_id
    AND mk.movie_id = ci.movie_id
    AND mk.movie_id = cc.movie_id
    AND mk.movie_id = mi_idx.movie_id
    AND ci.movie_id = cc.movie_id
    AND ci.movie_id = mi_idx.movie_id
    AND cc.movie_id = mi_idx.movie_id
    AND chn.id = ci.person_role_id
    AND n.id = ci.person_id
    AND k.id = mk.keyword_id
    AND cct1.id = cc.subject_id
    AND cct2.id = cc.status_id
    AND it2.id = mi_idx.info_type_id
GROUP BY t.production_year, kt.kind
ORDER BY t.production_year, kt.kind;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 3 1 1 3 1 1 3 1 1 3 4 4 4 4 4 4 5 3]
indexes_env_matrix for this sql:  [ 1  2 23  2  3 22  3  4 21  4  5 20  5  6  7  6  0  0  7  8 19  8  9 10
  9  0  0 10 11 18 11 12 13 12  0  0 13 14 17 14 15 16 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 4.0098857e-02 2.5000000e-01 2.5000000e-01
 0.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 7.4532312e-05
 1.4285715e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00
 5.4074419e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  179.63714575362934
Other difference exceed the threshold, need to switch module.
the difference value is:  179.63714575362934
Hash difference exceed the threshold, need to switch module.
the difference value is:  179.63714575362934
Nested loop difference exceed the threshold, need to switch module.
Planning took 613.9ms
qtest16a, predicted time: 7742.2
qtest16a,(predicted 7742.2),/*+ MergeJoin(ci mi_idx k mk t n kt it2 chn cc cct2 cct1)
 HashJoin(ci mi_idx k mk t n kt it2 chn cc cct2)
 HashJoin(ci mi_idx k mk t n kt it2 chn cc)
 HashJoin(ci mi_idx k mk t n kt it2 chn)
 HashJoin(ci mi_idx k mk t n kt it2)
 MergeJoin(ci mi_idx k mk t n kt)
 HashJoin(ci mi_idx k mk t n)
 MergeJoin(ci mi_idx k mk t)
 HashJoin(mi_idx k mk t)
 MergeJoin(k mk t)
 HashJoin(k mk)
 SeqScan(ci)
 SeqScan(mi_idx)
 IndexScan(k)
 IndexScan(mk)
 SeqScan(t)
 IndexScan(n)
 SeqScan(kt)
 IndexScan(it2)
 SeqScan(chn)
 SeqScan(cc)
 SeqScan(cct2)
 IndexScan(cct1)
 Leading(((((((((ci (mi_idx ((k mk) t))) n) kt) it2) chn) cc) cct2) cct1)) */
---------------------------------------
sql_str:  SELECT
    MAX(chn.name) AS character_name,
    MAX(mi_idx.info) AS rating,
    MAX(t.title) AS complete_hero_movie
FROM
    complete_cast AS cc,
    comp_cast_type AS cct1,
    comp_cast_type AS cct2,
    char_name AS chn,
    cast_info AS ci,
    info_type AS it2,
    keyword AS k,
    kind_type AS kt,
    movie_info_idx AS mi_idx,
    movie_keyword AS mk,
    name AS n,
    title AS t
WHERE
    cct1.kind = 'cast'
    AND cct2.kind like '%complete%'
    AND chn.name is not NULL
    and (
        chn.name like '%man%'
        or chn.name like '%Man%'
    )
    AND it2.info = 'rating'
    AND k.keyword in (
        'superhero',
        'marvel-comics',
        'based-on-comic',
        'tv-special',
        'fight',
        'violence',
        'magnet',
        'web',
        'claw',
        'laser'
    )
    AND kt.kind = 'movie'
    AND t.production_year > 2000
    AND kt.id = t.kind_id
    AND t.id = mk.movie_id
    AND t.id = ci.movie_id
    AND t.id = cc.movie_id
    AND t.id = mi_idx.movie_id
    AND mk.movie_id = ci.movie_id
    AND mk.movie_id = cc.movie_id
    AND mk.movie_id = mi_idx.movie_id
    AND ci.movie_id = cc.movie_id
    AND ci.movie_id = mi_idx.movie_id
    AND cc.movie_id = mi_idx.movie_id
    AND chn.id = ci.person_role_id
    AND n.id = ci.person_id
    AND k.id = mk.keyword_id
    AND cct1.id = cc.subject_id
    AND cct2.id = cc.status_id
    AND it2.id = mi_idx.info_type_id
GROUP BY t.production_year, kt.kind
ORDER BY t.production_year, kt.kind;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 3 1 1 3 1 1 3 1 1 3 4 4 4 4 4 4 5 3]
indexes_env_matrix for this sql:  [ 1  2 23  2  3 22  3  4 21  4  5 20  5  6  7  6  0  0  7  8 19  8  9 10
  9  0  0 10 11 18 11 12 13 12  0  0 13 14 17 14 15 16 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 4.0098857e-02 2.5000000e-01 2.5000000e-01
 0.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 7.4532312e-05
 1.4285715e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00
 5.4074419e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  163.92878457939327
Other difference exceed the threshold, need to switch module.
the difference value is:  163.92878457939327
Hash difference exceed the threshold, need to switch module.
the difference value is:  163.92878457939327
Nested loop difference exceed the threshold, need to switch module.
Planning took 1419.6ms
qtest16b, predicted time: 3.2
qtest16b,(predicted 3.2),/*+ MergeJoin(mi_idx chn n mk ci cc k cct2 cct1 t kt it2)
 MergeJoin(mi_idx chn n mk ci cc k cct2 cct1 t kt)
 MergeJoin(mi_idx chn n mk ci cc k cct2 cct1 t)
 MergeJoin(mi_idx chn n mk ci cc k cct2 cct1)
 MergeJoin(mi_idx chn n mk ci cc k cct2)
 MergeJoin(chn n mk ci cc k cct2)
 MergeJoin(chn n mk ci cc k)
 MergeJoin(chn n mk ci cc)
 MergeJoin(chn n mk ci)
 MergeJoin(n mk ci)
 HashJoin(mk ci)
 SeqScan(mi_idx)
 SeqScan(chn)
 SeqScan(n)
 SeqScan(mk)
 SeqScan(ci)
 SeqScan(cc)
 SeqScan(k)
 IndexScan(cct2)
 SeqScan(cct1)
 IndexScan(t)
 IndexScan(kt)
 IndexScan(it2)
 Leading((((((mi_idx ((((chn (n (mk ci))) cc) k) cct2)) cct1) t) kt) it2)) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
movie_keyword as mk,
keyword as k,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND t.id = mk.movie_id
AND mk.keyword_id = k.id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('tv movie','video movie'))
AND (t.production_year <= 2015)
AND (t.production_year >= 1925)
AND (mi1.info IN ('Italy','Japan','Nigeria','Spain','West Germany'))
AND (it1.id IN ('8'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 8.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 1000.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 10000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND rt.id = ci.role_id
AND (n.gender in ('f'))
AND (n.name_pcode_nf in ('C6235','E4213') OR n.name_pcode_nf IS NULL)
AND (ci.note IS NULL)
AND (rt.role in ('actress'))
AND (it5.id in ('25'))
GROUP BY t.production_year, kt.kind
ORDER BY t.production_year, kt.kind;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 4 3 5 4 3 4 5 3 4]
indexes_env_matrix for this sql:  [ 1  2 31  2  3 30  3  4 29  4  5  6  5  0  0  6  7 28  7  8 27  8  9 26
  9 10 25 10 11 24 11 12 23 12 13 22 13 14 21 14 15 20 15 16 19 16 17 18
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0 28  0  0 29  0  0 30  0  0 31  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 6.0610288e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 1.0000000e+00
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 9.5526205e-04
 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04 0.0000000e+00
 1.0000000e+00 0.0000000e+00 7.5621037e-03 1.4424813e-01 8.3333336e-02
 9.3211162e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  214.64783485844038
Other difference exceed the threshold, need to switch module.
the difference value is:  214.64783485844038
Hash difference exceed the threshold, need to switch module.
the difference value is:  214.64783485844038
Nested loop difference exceed the threshold, need to switch module.
Planning took 1791.5ms
qtest17a, predicted time: 4987.6
qtest17a,(predicted 4987.6),/*+ HashJoin(k mk ci it4 mi1 mii1 it3 t mii2 kt rt it1 pi1 it5 n an)
 MergeJoin(mk ci it4 mi1 mii1 it3 t mii2 kt rt it1 pi1 it5 n an)
 MergeJoin(ci it4 mi1 mii1 it3 t mii2 kt rt it1 pi1 it5 n an)
 MergeJoin(ci it4 mi1 mii1 it3 t mii2 kt rt it1 pi1 it5 n)
 MergeJoin(ci it4 mi1 mii1 it3 t mii2 kt rt it1 pi1 it5)
 MergeJoin(ci it4 mi1 mii1 it3 t mii2 kt rt it1 pi1)
 MergeJoin(ci it4 mi1 mii1 it3 t mii2 kt rt it1)
 MergeJoin(ci it4 mi1 mii1 it3 t mii2 kt rt)
 MergeJoin(ci it4 mi1 mii1 it3 t mii2 kt)
 MergeJoin(it4 mi1 mii1 it3 t mii2 kt)
 MergeJoin(it4 mi1 mii1 it3 t mii2)
 MergeJoin(mi1 mii1 it3 t mii2)
 MergeJoin(mi1 mii1 it3 t)
 MergeJoin(mii1 it3 t)
 HashJoin(mii1 it3)
 IndexScan(k)
 IndexScan(mk)
 SeqScan(ci)
 SeqScan(it4)
 IndexScan(mi1)
 IndexScan(mii1)
 IndexScan(it3)
 SeqScan(t)
 IndexScan(mii2)
 SeqScan(kt)
 SeqScan(rt)
 IndexScan(it1)
 IndexScan(pi1)
 IndexScan(it5)
 IndexScan(n)
 IndexScan(an)
 Leading((k (mk (((((((ci ((it4 ((mi1 ((mii1 it3) t)) mii2)) kt)) rt) it1) pi1) it5) n) an)))) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
movie_keyword as mk,
keyword as k,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND t.id = mk.movie_id
AND mk.keyword_id = k.id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('tv movie','video movie'))
AND (t.production_year <= 2015)
AND (t.production_year >= 1925)
AND (mi1.info IN ('Italy','Japan','Nigeria','Spain','West Germany'))
AND (it1.id IN ('8'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 8.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 1000.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 10000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND rt.id = ci.role_id
AND (n.gender in ('m'))
AND (n.name_pcode_nf in ('C6235','E4213') OR n.name_pcode_nf IS NULL)
AND (ci.note IS NULL)
AND (rt.role in ('actor'))
AND (it5.id in ('25'))
GROUP BY t.production_year, kt.kind
ORDER BY t.production_year, kt.kind;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 4 3 5 4 3 4 5 3 4]
indexes_env_matrix for this sql:  [ 1  2 31  2  3 30  3  4 29  4  5  6  5  0  0  6  7 28  7  8 27  8  9 26
  9 10 25 10 11 24 11 12 23 12 13 22 13 14 21 14 15 20 15 16 19 16 17 18
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0 28  0  0 29  0  0 30  0  0 31  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 6.0610288e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 1.0000000e+00
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 9.5526205e-04
 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04 0.0000000e+00
 1.0000000e+00 0.0000000e+00 1.3330082e-02 1.4424813e-01 8.3333336e-02
 9.3211162e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  209.90263968793212
Other difference exceed the threshold, need to switch module.
the difference value is:  209.90263968793212
Hash difference exceed the threshold, need to switch module.
the difference value is:  209.90263968793212
Nested loop difference exceed the threshold, need to switch module.
Planning took 2862.6ms
qtest17b, predicted time: 1.4
qtest17b,(predicted 1.4),/*+ MergeJoin(pi1 ci k mk t n kt it5 mii1 it3 mii2 mi1 it4 an it1 rt)
 MergeJoin(pi1 ci k mk t n kt it5 mii1 it3 mii2 mi1 it4 an it1)
 MergeJoin(pi1 ci k mk t n kt it5 mii1 it3 mii2 mi1 it4 an)
 MergeJoin(pi1 ci k mk t n kt it5 mii1 it3 mii2 mi1 it4)
 MergeJoin(pi1 ci k mk t n kt it5 mii1 it3 mii2 mi1)
 MergeJoin(pi1 ci k mk t n kt it5 mii1 it3 mii2)
 MergeJoin(pi1 ci k mk t n kt it5 mii1 it3)
 MergeJoin(pi1 ci k mk t n kt it5 mii1)
 MergeJoin(pi1 ci k mk t n kt it5)
 MergeJoin(pi1 ci k mk t n kt)
 MergeJoin(ci k mk t n kt)
 MergeJoin(ci k mk t n)
 MergeJoin(ci k mk t)
 NestLoop(k mk t)
 HashJoin(k mk)
 SeqScan(pi1)
 IndexScan(ci)
 SeqScan(k)
 SeqScan(mk)
 IndexScan(t)
 SeqScan(n)
 SeqScan(kt)
 IndexScan(it5)
 IndexScan(mii1)
 SeqScan(it3)
 SeqScan(mii2)
 IndexScan(mi1)
 IndexScan(it4)
 SeqScan(an)
 SeqScan(it1)
 SeqScan(rt)
 Leading(((((((((((pi1 (((ci ((k mk) t)) n) kt)) it5) mii1) it3) mii2) mi1) it4) an) it1) rt)) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
movie_keyword as mk,
keyword as k,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND t.id = mk.movie_id
AND mk.keyword_id = k.id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('tv movie','video movie'))
AND (t.production_year <= 2015)
AND (t.production_year >= 1925)
AND (mi1.info IN ('Italy','Japan','China','West Germany'))
AND (it1.id IN ('8'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 8.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 1000.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 10000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND rt.id = ci.role_id
AND (n.gender in ('f'))
AND (n.name_pcode_nf in ('C6235','E4213') OR n.name_pcode_nf IS NULL)
AND (ci.note IS NULL)
AND (rt.role in ('actress'))
AND (it5.id in ('25'))
GROUP BY t.production_year, kt.kind
ORDER BY t.production_year, kt.kind;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 4 3 5 4 3 4 5 3 4]
indexes_env_matrix for this sql:  [ 1  2 31  2  3 30  3  4 29  4  5  6  5  0  0  6  7 28  7  8 27  8  9 26
  9 10 25 10 11 24 11 12 23 12 13 22 13 14 21 14 15 20 15 16 19 16 17 18
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0 28  0  0 29  0  0 30  0  0 31  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 6.0610288e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 1.0000000e+00
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.2760687e-04
 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04 0.0000000e+00
 1.0000000e+00 0.0000000e+00 7.5621037e-03 1.4424813e-01 8.3333336e-02
 9.3211162e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  214.64783438342437
Other difference exceed the threshold, need to switch module.
the difference value is:  214.64783438342437
Hash difference exceed the threshold, need to switch module.
the difference value is:  214.64783438342437
Nested loop difference exceed the threshold, need to switch module.
Planning took 1804.6ms
qtest17c, predicted time: 4989.5
qtest17c,(predicted 4989.5),/*+ HashJoin(k mk ci it4 mi1 mii1 it3 t mii2 kt rt it1 pi1 it5 n an)
 MergeJoin(mk ci it4 mi1 mii1 it3 t mii2 kt rt it1 pi1 it5 n an)
 MergeJoin(ci it4 mi1 mii1 it3 t mii2 kt rt it1 pi1 it5 n an)
 MergeJoin(ci it4 mi1 mii1 it3 t mii2 kt rt it1 pi1 it5 n)
 MergeJoin(ci it4 mi1 mii1 it3 t mii2 kt rt it1 pi1 it5)
 MergeJoin(ci it4 mi1 mii1 it3 t mii2 kt rt it1 pi1)
 MergeJoin(ci it4 mi1 mii1 it3 t mii2 kt rt it1)
 MergeJoin(ci it4 mi1 mii1 it3 t mii2 kt rt)
 MergeJoin(ci it4 mi1 mii1 it3 t mii2 kt)
 MergeJoin(it4 mi1 mii1 it3 t mii2 kt)
 MergeJoin(it4 mi1 mii1 it3 t mii2)
 MergeJoin(mi1 mii1 it3 t mii2)
 MergeJoin(mi1 mii1 it3 t)
 MergeJoin(mii1 it3 t)
 HashJoin(mii1 it3)
 IndexScan(k)
 IndexScan(mk)
 SeqScan(ci)
 SeqScan(it4)
 IndexScan(mi1)
 IndexScan(mii1)
 IndexScan(it3)
 SeqScan(t)
 IndexScan(mii2)
 SeqScan(kt)
 SeqScan(rt)
 IndexScan(it1)
 IndexScan(pi1)
 IndexScan(it5)
 IndexScan(n)
 IndexScan(an)
 Leading((k (mk (((((((ci ((it4 ((mi1 ((mii1 it3) t)) mii2)) kt)) rt) it1) pi1) it5) n) an)))) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
movie_keyword as mk,
keyword as k,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND t.id = mk.movie_id
AND mk.keyword_id = k.id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('episode','movie'))
AND (t.production_year <= 2015)
AND (t.production_year >= 1925)
AND (mi1.info IN ('Buenos Aires, Federal District, Argentina','Los Angeles, California, USA','Mexico','New York City, New York, USA','Paramount Studios - 5555 Melrose Avenue, Hollywood, Los Angeles, California, USA'))
AND (it1.id IN ('18'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 7.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 3.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 10000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND rt.id = ci.role_id
AND (n.gender in ('m') OR n.gender IS NULL)
AND (n.name_pcode_nf in ('D2313','E3261','G625','J5141','K1524','L2125','M2563','M265','M3215','P3625','S5326','S6256','T5252'))
AND (ci.note in ('(writer)') OR ci.note IS NULL)
AND (rt.role in ('actor','director','writer'))
AND (it5.id in ('31'))
GROUP BY t.production_year, kt.kind
ORDER BY t.production_year, kt.kind;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 4 4 3 5 3 4 3 3 4 5]
indexes_env_matrix for this sql:  [ 1  2 31  2  3 30  3  4 29  4  5 28  5  6 27  6  7 26  7  8 25  8  9 24
  9 10 23 10 11 22 11 12 21 12 13 20 13 14 19 14 15 18 15 16 17 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0 28  0  0 29  0  0 30  0  0 31  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 6.1365104e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 1.0000000e+00
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.2681744e-04
 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04 0.0000000e+00
 1.0000000e+00 0.0000000e+00 2.2687512e-03 2.2678010e-03 2.5000000e-01
 9.3211162e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  207.944990437497
Other difference exceed the threshold, need to switch module.
the difference value is:  207.944990437497
Hash difference exceed the threshold, need to switch module.
the difference value is:  207.944990437497
Nested loop difference exceed the threshold, need to switch module.
Planning took 2138.7ms
qtest18a, predicted time: 1.5
qtest18a,(predicted 1.5),/*+ MergeJoin(pi1 ci k mk t n kt it5 rt mi1 mii1 mii2 an it1 it3 it4)
 MergeJoin(pi1 ci k mk t n kt it5 rt mi1 mii1 mii2 an it1 it3)
 MergeJoin(pi1 ci k mk t n kt it5 rt mi1 mii1 mii2 an it1)
 MergeJoin(pi1 ci k mk t n kt it5 rt mi1 mii1 mii2 an)
 MergeJoin(pi1 ci k mk t n kt it5 rt mi1 mii1 mii2)
 MergeJoin(pi1 ci k mk t n kt it5 rt mi1 mii1)
 MergeJoin(pi1 ci k mk t n kt it5 rt mi1)
 MergeJoin(pi1 ci k mk t n kt it5 rt)
 MergeJoin(pi1 ci k mk t n kt it5)
 MergeJoin(pi1 ci k mk t n kt)
 MergeJoin(ci k mk t n kt)
 MergeJoin(ci k mk t n)
 MergeJoin(ci k mk t)
 NestLoop(k mk t)
 HashJoin(k mk)
 SeqScan(pi1)
 IndexScan(ci)
 SeqScan(k)
 SeqScan(mk)
 IndexScan(t)
 SeqScan(n)
 SeqScan(kt)
 IndexScan(it5)
 SeqScan(rt)
 IndexScan(mi1)
 SeqScan(mii1)
 IndexScan(mii2)
 SeqScan(an)
 SeqScan(it1)
 SeqScan(it3)
 IndexScan(it4)
 Leading(((((((((((pi1 (((ci ((k mk) t)) n) kt)) it5) rt) mi1) mii1) mii2) an) it1) it3) it4)) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
movie_keyword as mk,
keyword as k,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND t.id = mk.movie_id
AND mk.keyword_id = k.id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('movie'))
AND (t.production_year <= 2015)
AND (t.production_year >= 1925)
AND (mi1.info IN ('Buenos Aires, Federal District, Argentina','Los Angeles, California, USA','Mexico','New York City, New York, USA','Paramount Studios - 5555 Melrose Avenue, Hollywood, Los Angeles, California, USA'))
AND (it1.id IN ('18'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 7.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 3.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 10000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND rt.id = ci.role_id
AND (n.gender in ('m') OR n.gender IS NULL)
AND (n.name_pcode_nf in ('D2313','E3261','G625','J5141','K1524','L2125','M2563','M265','M3215','P3625','S5326','S6256','T5252'))
AND (ci.note in ('(writer)') OR ci.note IS NULL)
AND (rt.role in ('actor','director','writer'))
AND (it5.id in ('31'))
GROUP BY t.production_year, kt.kind
ORDER BY t.production_year, kt.kind;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 4 3 5 4 3 4 5 3 4]
indexes_env_matrix for this sql:  [ 1  2 31  2  3 30  3  4 29  4  5  6  5  0  0  6  7 28  7  8 27  8  9 26
  9 10 25 10 11 24 11 12 23 12 13 22 13 14 21 14 15 20 15 16 19 16 17 18
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0 28  0  0 29  0  0 30  0  0 31  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 6.1365104e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 1.0000000e+00
 1.4285715e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.2681744e-04
 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04 0.0000000e+00
 1.0000000e+00 0.0000000e+00 2.2687512e-03 2.2678010e-03 2.5000000e-01
 9.3211162e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  214.63196475545348
Other difference exceed the threshold, need to switch module.
the difference value is:  214.63196475545348
Hash difference exceed the threshold, need to switch module.
the difference value is:  214.63196475545348
Nested loop difference exceed the threshold, need to switch module.
Planning took 1749.0ms
qtest18c, predicted time: 5815.6
qtest18c,(predicted 5815.6),/*+ MergeJoin(k mk ci it4 mi1 mii1 it3 t mii2 kt rt n pi1 it1 it5 an)
 MergeJoin(mk ci it4 mi1 mii1 it3 t mii2 kt rt n pi1 it1 it5 an)
 MergeJoin(ci it4 mi1 mii1 it3 t mii2 kt rt n pi1 it1 it5 an)
 MergeJoin(ci it4 mi1 mii1 it3 t mii2 kt rt n pi1 it1 it5)
 MergeJoin(ci it4 mi1 mii1 it3 t mii2 kt rt n pi1 it1)
 MergeJoin(ci it4 mi1 mii1 it3 t mii2 kt rt n pi1)
 MergeJoin(ci it4 mi1 mii1 it3 t mii2 kt rt n)
 MergeJoin(ci it4 mi1 mii1 it3 t mii2 kt rt)
 MergeJoin(ci it4 mi1 mii1 it3 t mii2 kt)
 MergeJoin(it4 mi1 mii1 it3 t mii2 kt)
 MergeJoin(it4 mi1 mii1 it3 t mii2)
 MergeJoin(mi1 mii1 it3 t mii2)
 MergeJoin(mi1 mii1 it3 t)
 MergeJoin(mii1 it3 t)
 HashJoin(mii1 it3)
 IndexScan(k)
 IndexScan(mk)
 SeqScan(ci)
 SeqScan(it4)
 IndexScan(mi1)
 IndexScan(mii1)
 IndexScan(it3)
 SeqScan(t)
 IndexScan(mii2)
 SeqScan(kt)
 SeqScan(rt)
 IndexScan(n)
 SeqScan(pi1)
 IndexScan(it1)
 IndexScan(it5)
 IndexScan(an)
 Leading((k (mk (((((((ci ((it4 ((mi1 ((mii1 it3) t)) mii2)) kt)) rt) n) pi1) it1) it5) an)))) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('7'))
AND (it2.id in ('8'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('CAM:Panavision Cameras and Lenses','OFM:16 mm','OFM:35 mm','OFM:Video','PCS:Spherical','PFM:35 mm','RAT:1.33 : 1','RAT:1.37 : 1','RAT:1.66 : 1','RAT:1.78 : 1','RAT:2.35 : 1','RAT:4:3'))
AND (mi2.info in ('East Germany','Hong Kong','Italy','Taiwan','UK','USA','West Germany'))
AND (kt.kind in ('episode','movie'))
AND (rt.role in ('production designer'))
AND (n.gender in ('f'))
AND (t.production_year <= 2010)
AND (t.production_year >= 1950)
AND (k.keyword IN ('death','father-son-relationship','fight','gay','independent-film','lesbian-sex','mother-daughter-relationship','murder','number-in-title'))
GROUP BY n.name, t.production_year
ORDER BY n.name, t.production_year;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 1 1 4 4 4 3 4 4 3 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.7079076e-05
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.2499158e-03
 4.3328535e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 2.3576464e-01 0.0000000e+00 8.3333336e-02
 7.5073051e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  154.20976653225884
Other difference exceed the threshold, need to switch module.
the difference value is:  154.20976653225884
Hash difference exceed the threshold, need to switch module.
the difference value is:  154.20976653225884
Nested loop difference exceed the threshold, need to switch module.
Planning took 213.5ms
qtest19a, predicted time: 3.3
qtest19a,(predicted 3.3),/*+ MergeJoin(kt k ci t mi1 it1 n mk rt mi2 it2)
 MergeJoin(kt k ci t mi1 it1 n mk rt mi2)
 MergeJoin(k ci t mi1 it1 n mk rt mi2)
 MergeJoin(k ci t mi1 it1 n mk rt)
 MergeJoin(k ci t mi1 it1 n mk)
 MergeJoin(ci t mi1 it1 n mk)
 MergeJoin(ci t mi1 it1 n)
 MergeJoin(ci t mi1 it1)
 MergeJoin(t mi1 it1)
 HashJoin(mi1 it1)
 SeqScan(kt)
 SeqScan(k)
 IndexScan(ci)
 SeqScan(t)
 IndexScan(mi1)
 IndexScan(it1)
 SeqScan(n)
 SeqScan(mk)
 IndexScan(rt)
 SeqScan(mi2)
 SeqScan(it2)
 Leading(((kt (((k (((ci (t (mi1 it1))) n) mk)) rt) mi2)) it2)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('7'))
AND (it2.id in ('8'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('CAM:Panavision Cameras and Lenses','OFM:16 mm','OFM:35 mm','OFM:Video','PCS:Spherical','PFM:35 mm','RAT:1.33 : 1','RAT:1.37 : 1','RAT:1.66 : 1','RAT:1.78 : 1','RAT:2.35 : 1','RAT:4:3'))
AND (mi2.info in ('East Germany','Hong Kong','Italy','Taiwan','UK','USA','West Germany'))
AND (kt.kind in ('episode','movie'))
AND (rt.role in ('production designer'))
AND (n.gender in ('f'))
AND (t.production_year <= 2020)
AND (t.production_year >= 1950)
AND (k.keyword IN ('death','father-son-relationship','fight','gay','independent-film','lesbian-sex','mother-daughter-relationship','murder','number-in-title'))
GROUP BY n.name, t.production_year
ORDER BY n.name, t.production_year;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 1 1 4 4 4 3 4 4 3 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.7079076e-05
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.2499158e-03
 4.3328535e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 2.3576464e-01 0.0000000e+00 8.3333336e-02
 9.0642136e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  164.33889082068174
Other difference exceed the threshold, need to switch module.
the difference value is:  164.33889082068174
Hash difference exceed the threshold, need to switch module.
the difference value is:  164.33889082068174
Nested loop difference exceed the threshold, need to switch module.
Planning took 1234.3ms
qtest19b, predicted time: 6989.3
qtest19b,(predicted 6989.3),/*+ MergeJoin(k mk kt mi1 t mi2 ci rt n it1 it2)
 HashJoin(mk kt mi1 t mi2 ci rt n it1 it2)
 MergeJoin(kt mi1 t mi2 ci rt n it1 it2)
 MergeJoin(mi1 t mi2 ci rt n it1 it2)
 MergeJoin(mi1 t mi2 ci rt n it1)
 MergeJoin(mi1 t mi2 ci rt n)
 MergeJoin(mi1 t mi2 ci rt)
 MergeJoin(mi1 t mi2 ci)
 MergeJoin(t mi2 ci)
 HashJoin(t mi2)
 SeqScan(k)
 SeqScan(mk)
 SeqScan(kt)
 IndexScan(mi1)
 SeqScan(t)
 IndexScan(mi2)
 SeqScan(ci)
 IndexScan(rt)
 IndexScan(n)
 SeqScan(it1)
 IndexScan(it2)
 Leading((k (mk (kt (((((mi1 ((t mi2) ci)) rt) n) it1) it2))))) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k,
movie_companies as mc,
company_type as ct,
company_name as cn
WHERE
t.id = ci.movie_id
AND t.id = mc.movie_id
AND t.id = mi1.movie_id
AND t.id = mk.movie_id
AND mc.company_type_id = ct.id
AND mc.company_id = cn.id
AND k.id = mk.keyword_id
AND mi1.info_type_id = it1.id
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (it1.id IN ('7'))
AND (mi1.info in ('MET:','OFM:35 mm','PCS:Digital Intermediate','PFM:35 mm','PFM:Video','RAT:1.33 : 1','RAT:1.37 : 1'))
AND (kt.kind in ('episode','movie','tv movie'))
AND (rt.role in ('actor','actress'))
AND (n.gender in ('f','m') OR n.gender IS NULL)
AND (n.name_pcode_cf in ('R1632','R2632','W4525'))
AND (t.production_year <= 2015)
AND (t.production_year >= 1955)
AND (cn.name in ('Fox Network','Independent Television (ITV)','Metro-Goldwyn-Mayer (MGM)','National Broadcasting Company (NBC)','Paramount Pictures','Shout! Factory','Sony Pictures Home Entertainment','Universal Pictures','Universal TV'))
AND (ct.kind in ('distributors','production companies'))
GROUP BY 
    t.production_year, 
    cn.name
ORDER BY 
    t.production_year, 
    cn.name;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 0 1 1 1 0 1 0 1 3 4 3 4 3 4 3 4 3 4 5 4]
indexes_env_matrix for this sql:  [ 1  2 23  2  3 22  3  4 21  4  5 20  5  6 19  6  7 18  7  8 17  8  9 16
  9 10 15 10 11 14 11 12 13 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 4.2553736e-05 5.0000000e-01 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 4.2857143e-01 0.0000000e+00 1.0000000e+00 0.0000000e+00 4.8991218e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 2.5763703e-03 0.0000000e+00 1.6666667e-01
 8.9440465e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  169.76581060989983
Other difference exceed the threshold, need to switch module.
the difference value is:  169.76581060989983
Hash difference exceed the threshold, need to switch module.
the difference value is:  169.76581060989983
Nested loop difference exceed the threshold, need to switch module.
Planning took 801.0ms
qtest1b, predicted time: 2.3
qtest1b,(predicted 2.3),/*+ MergeJoin(rt n ci t mc cn ct mk kt k mi1 it1)
 MergeJoin(rt n ci t mc cn ct mk kt k mi1)
 MergeJoin(rt n ci t mc cn ct mk kt k)
 MergeJoin(rt n ci t mc cn ct mk kt)
 MergeJoin(rt n ci t mc cn ct mk)
 MergeJoin(rt n ci t mc cn ct)
 MergeJoin(rt n ci t mc cn)
 MergeJoin(rt n ci t mc)
 MergeJoin(rt n ci t)
 MergeJoin(rt n ci)
 HashJoin(n ci)
 SeqScan(rt)
 IndexScan(n)
 SeqScan(ci)
 SeqScan(t)
 IndexScan(mc)
 SeqScan(cn)
 SeqScan(ct)
 IndexScan(mk)
 IndexScan(kt)
 IndexScan(k)
 IndexScan(mi1)
 SeqScan(it1)
 Leading(((((((((((rt (n ci)) t) mc) cn) ct) mk) kt) k) mi1) it1)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k,
movie_companies as mc,
company_type as ct,
company_name as cn
WHERE
t.id = ci.movie_id
AND t.id = mc.movie_id
AND t.id = mi1.movie_id
AND t.id = mk.movie_id
AND mc.company_type_id = ct.id
AND mc.company_id = cn.id
AND k.id = mk.keyword_id
AND mi1.info_type_id = it1.id
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (it1.id IN ('7'))
AND (mi1.info in ('MET:','OFM:35 mm','PCS:Digital Intermediate','PFM:35 mm','PFM:Video','RAT:1.33 : 1','RAT:1.37 : 1'))
AND (kt.kind in ('episode','movie','tv movie'))
AND (rt.role in ('actor','actress'))
AND (n.gender in ('f','m') OR n.gender IS NULL)
AND (n.name_pcode_cf in ('A5362','J5252','R1632','R2632','W4525'))
AND (t.production_year <= 2015)
AND (t.production_year >= 1956)
AND (cn.name in ('Independent Television (ITV)','Metro-Goldwyn-Mayer (MGM)','National Broadcasting Company (NBC)','Paramount Pictures','Shout! Factory','Sony Pictures Home Entertainment','Universal Pictures','Universal TV'))
AND (ct.kind in ('distributors','production companies'))
GROUP BY 
    t.production_year, 
    cn.name
ORDER BY 
    t.production_year, 
    cn.name;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 0 1 1 1 1 1 0 0 1 1 3 4 4 3 3 4 5 4 3 4 3 4]
indexes_env_matrix for this sql:  [ 1  2 23  2  3 22  3  4 21  4  5 20  5  6 19  6  7 18  7  8 17  8  9 16
  9 10 15 10 11 14 11 12 13 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 3.8298360e-05 5.0000000e-01 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 4.2857143e-01 0.0000000e+00 1.0000000e+00 0.0000000e+00 4.8991218e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 7.4970769e-03 0.0000000e+00 1.6666667e-01
 8.9109492e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  177.58272135746043
Other difference exceed the threshold, need to switch module.
the difference value is:  177.58272135746043
Hash difference exceed the threshold, need to switch module.
the difference value is:  177.58272135746043
Nested loop difference exceed the threshold, need to switch module.
Planning took 309.7ms
qtest1c, predicted time: 3661.4
qtest1c,(predicted 3661.4),/*+ MergeJoin(k mk rt kt ci mc cn t ct n mi1 it1)
 MergeJoin(mk rt kt ci mc cn t ct n mi1 it1)
 MergeJoin(rt kt ci mc cn t ct n mi1 it1)
 MergeJoin(rt kt ci mc cn t ct n mi1)
 MergeJoin(rt kt ci mc cn t ct n)
 MergeJoin(kt ci mc cn t ct n)
 HashJoin(ci mc cn t ct n)
 MergeJoin(ci mc cn t ct)
 MergeJoin(mc cn t ct)
 MergeJoin(mc cn t)
 HashJoin(mc cn)
 IndexScan(k)
 IndexScan(mk)
 SeqScan(rt)
 SeqScan(kt)
 SeqScan(ci)
 IndexScan(mc)
 IndexScan(cn)
 SeqScan(t)
 SeqScan(ct)
 IndexScan(n)
 IndexScan(mi1)
 SeqScan(it1)
 Leading((k (mk (((rt (kt ((ci (((mc cn) t) ct)) n))) mi1) it1)))) */
---------------------------------------
sql_str:  SELECT
    MIN(chn.name) AS voiced_char_name,
    MIN(n.name) AS voicing_actress_name,
    MIN(t.title) AS kung_fu_panda
FROM
    aka_name AS an,
    char_name AS chn,
    cast_info AS ci,
    company_name AS cn,
    info_type AS it,
    keyword AS k,
    movie_companies AS mc,
    movie_info AS mi,
    movie_keyword AS mk,
    name AS n,
    role_type AS rt,
    title AS t
WHERE
    ci.note in (
        '(voice)',
        '(voice: Japanese version)',
        '(voice) (uncredited)',
        '(voice: English version)'
    )
    AND cn.country_code = '[us]'
    AND cn.name = 'DreamWorks Animation'
    AND it.info = 'release dates'
    AND k.keyword in (
        'hero',
        'martial-arts',
        'hand-to-hand-combat',
        'computer-animated-movie'
    )
    AND mi.info is not null
    and (
        mi.info like 'Japan:%201%'
        or mi.info like 'USA:%201%'
    )
    AND n.gender = 'f'
    and n.name like '%An%'
    AND rt.role = 'actress'
    AND t.production_year > 2010
    AND t.title like 'Kung Fu Panda%'
    AND t.id = mi.movie_id
    AND t.id = mc.movie_id
    AND t.id = ci.movie_id
    AND t.id = mk.movie_id
    AND mc.movie_id = ci.movie_id
    AND mc.movie_id = mi.movie_id
    AND mc.movie_id = mk.movie_id
    AND mi.movie_id = ci.movie_id
    AND mi.movie_id = mk.movie_id
    AND ci.movie_id = mk.movie_id
    AND cn.id = mc.company_id
    AND it.id = mi.info_type_id
    AND n.id = ci.person_id
    AND rt.id = ci.role_id
    AND n.id = an.person_id
    AND ci.person_id = an.person_id
    AND chn.id = ci.person_role_id
    AND k.id = mk.keyword_id
GROUP BY t.production_year, t.title
ORDER BY t.production_year, t.title;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 1 1 1 1 3 4 4 4 4 5 4 4 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 23  2  3 22  3  4 21  4  5 20  5  6 19  6  7 18  7  8 17  8  9 16
  9 10 15 10 11 14 11 12 13 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 2.3315500e-02 1.0000000e+00 0.0000000e+00 0.0000000e+00
 4.2553734e-06 0.0000000e+00 0.0000000e+00 8.8495575e-03 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.9812923e-05
 0.0000000e+00 0.0000000e+00 1.0000000e+00 1.0389991e-02 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 7.1443464e-03 0.0000000e+00 8.3333336e-02
 1.4634270e-05 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  165.57842212734317
Other difference exceed the threshold, need to switch module.
the difference value is:  165.57842212734317
Hash difference exceed the threshold, need to switch module.
the difference value is:  165.57842212734317
Nested loop difference exceed the threshold, need to switch module.
Planning took 1041.8ms
qtest20a, predicted time: 5.4
qtest20a,(predicted 5.4),/*+ MergeJoin(k mi cn mc mk ci n an it chn t rt)
 MergeJoin(k mi cn mc mk ci n an it chn t)
 MergeJoin(k mi cn mc mk ci n an it chn)
 MergeJoin(k mi cn mc mk ci n an it)
 MergeJoin(k mi cn mc mk ci n an)
 MergeJoin(k mi cn mc mk ci n)
 MergeJoin(k mi cn mc mk ci)
 MergeJoin(k mi cn mc mk)
 MergeJoin(mi cn mc mk)
 MergeJoin(mi cn mc)
 NestLoop(cn mc)
 SeqScan(k)
 SeqScan(mi)
 IndexScan(cn)
 IndexScan(mc)
 IndexScan(mk)
 IndexScan(ci)
 SeqScan(n)
 IndexScan(an)
 IndexScan(it)
 IndexScan(chn)
 IndexScan(t)
 SeqScan(rt)
 Leading(((((((((k ((mi (cn mc)) mk)) ci) n) an) it) chn) t) rt)) */
---------------------------------------
sql_str:  SELECT
    MAX(chn.name) AS voiced_char_name,
    MAX(n.name) AS voicing_actress_name,
    MAX(t.title) AS kung_fu_panda
FROM
    aka_name AS an,
    char_name AS chn,
    cast_info AS ci,
    company_name AS cn,
    info_type AS it,
    keyword AS k,
    movie_companies AS mc,
    movie_info AS mi,
    movie_keyword AS mk,
    name AS n,
    role_type AS rt,
    title AS t
WHERE
    ci.note in (
        '(voice)',
        '(voice: Japanese version)',
        '(voice) (uncredited)',
        '(voice: English version)'
    )
    AND cn.country_code = '[us]'
    AND cn.name = 'DreamWorks Animation'
    AND it.info = 'release dates'
    AND k.keyword in (
        'hero',
        'martial-arts',
        'hand-to-hand-combat',
        'computer-animated-movie'
    )
    AND mi.info is not null
    and (
        mi.info like 'Japan:%201%'
        or mi.info like 'USA:%201%'
    )
    AND n.gender = 'f'
    and n.name like '%An%'
    AND rt.role = 'actress'
    AND t.production_year > 2010
    AND t.title like 'Kung Fu Panda%'
    AND t.id = mi.movie_id
    AND t.id = mc.movie_id
    AND t.id = ci.movie_id
    AND t.id = mk.movie_id
    AND mc.movie_id = ci.movie_id
    AND mc.movie_id = mi.movie_id
    AND mc.movie_id = mk.movie_id
    AND mi.movie_id = ci.movie_id
    AND mi.movie_id = mk.movie_id
    AND ci.movie_id = mk.movie_id
    AND cn.id = mc.company_id
    AND it.id = mi.info_type_id
    AND n.id = ci.person_id
    AND rt.id = ci.role_id
    AND n.id = an.person_id
    AND ci.person_id = an.person_id
    AND chn.id = ci.person_role_id
    AND k.id = mk.keyword_id
GROUP BY t.production_year, t.title
ORDER BY t.production_year, t.title;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 1 1 1 1 3 4 4 4 4 5 4 4 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 23  2  3 22  3  4 21  4  5 20  5  6 19  6  7 18  7  8 17  8  9 16
  9 10 15 10 11 14 11 12 13 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 2.3315500e-02 1.0000000e+00 0.0000000e+00 0.0000000e+00
 4.2553734e-06 0.0000000e+00 0.0000000e+00 8.8495575e-03 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.9812923e-05
 0.0000000e+00 0.0000000e+00 1.0000000e+00 1.0389991e-02 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 7.1443464e-03 0.0000000e+00 8.3333336e-02
 1.4634270e-05 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  176.3585816252859
Other difference exceed the threshold, need to switch module.
the difference value is:  176.3585816252859
Hash difference exceed the threshold, need to switch module.
the difference value is:  176.3585816252859
Nested loop difference exceed the threshold, need to switch module.
Planning took 196.7ms
qtest20b, predicted time: 338.8
qtest20b,(predicted 338.8),/*+ HashJoin(mi an rt mk ci mc cn t n k chn it)
 HashJoin(mi an rt mk ci mc cn t n k chn)
 HashJoin(an rt mk ci mc cn t n k chn)
 HashJoin(rt mk ci mc cn t n k chn)
 HashJoin(mk ci mc cn t n k chn)
 HashJoin(mk ci mc cn t n k)
 HashJoin(mk ci mc cn t n)
 HashJoin(ci mc cn t n)
 HashJoin(ci mc cn t)
 HashJoin(mc cn t)
 HashJoin(mc cn)
 SeqScan(mi)
 SeqScan(an)
 IndexScan(rt)
 SeqScan(mk)
 SeqScan(ci)
 SeqScan(mc)
 IndexScan(cn)
 IndexScan(t)
 IndexScan(n)
 SeqScan(k)
 IndexScan(chn)
 SeqScan(it)
 Leading(((mi (an (rt (((mk ((ci ((mc cn) t)) n)) k) chn)))) it)) */
---------------------------------------
sql_str:  SELECT
    MIN(chn.name) AS voiced_char_name,
    MIN(n.name) AS voicing_actress_name,
    MIN(t.title) AS kung_fu_panda
FROM
    aka_name AS an,
    char_name AS chn,
    cast_info AS ci,
    company_name AS cn,
    info_type AS it,
    keyword AS k,
    movie_companies AS mc,
    movie_info AS mi,
    movie_keyword AS mk,
    name AS n,
    role_type AS rt,
    title AS t
WHERE
    ci.note in (
        '(voice) (uncredited)',
        '(voice: English version)'
    )
    AND cn.country_code = '[us]'
    AND cn.name = 'DreamWorks Animation'
    AND it.info = 'release dates'
    AND k.keyword in (
        'hero',
        'martial-arts',
        'hand-to-hand-combat',
        'computer-animated-movie'
    )
    AND mi.info is not null
    and (
        mi.info like 'Japan:%201%'
        or mi.info like 'USA:%201%'
    )
    AND n.gender = 'f'
    and n.name like '%An%'
    AND rt.role = 'actress'
    AND t.production_year > 2010
    AND t.title like 'Kung Fu Panda%'
    AND t.id = mi.movie_id
    AND t.id = mc.movie_id
    AND t.id = ci.movie_id
    AND t.id = mk.movie_id
    AND mc.movie_id = ci.movie_id
    AND mc.movie_id = mi.movie_id
    AND mc.movie_id = mk.movie_id
    AND mi.movie_id = ci.movie_id
    AND mi.movie_id = mk.movie_id
    AND ci.movie_id = mk.movie_id
    AND cn.id = mc.company_id
    AND it.id = mi.info_type_id
    AND n.id = ci.person_id
    AND rt.id = ci.role_id
    AND n.id = an.person_id
    AND ci.person_id = an.person_id
    AND chn.id = ci.person_role_id
    AND k.id = mk.keyword_id
GROUP BY t.production_year, t.title
ORDER BY t.production_year, t.title;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 4 5 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 23  2  3 22  3  4 21  4  5 20  5  6 19  6  7 18  7  8 17  8  9 16
  9 10 15 10 11 14 11 12 13 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 3.2641783e-03 1.0000000e+00 0.0000000e+00 0.0000000e+00
 4.2553734e-06 0.0000000e+00 0.0000000e+00 8.8495575e-03 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.9812923e-05
 0.0000000e+00 0.0000000e+00 1.0000000e+00 1.0389991e-02 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 7.1443464e-03 0.0000000e+00 8.3333336e-02
 1.4634270e-05 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  165.57789248129757
Other difference exceed the threshold, need to switch module.
the difference value is:  165.57789248129757
Hash difference exceed the threshold, need to switch module.
the difference value is:  165.57789248129757
Nested loop difference exceed the threshold, need to switch module.
Planning took 1216.1ms
qtest20c, predicted time: 5.4
qtest20c,(predicted 5.4),/*+ MergeJoin(k mi cn mc mk ci n an it chn t rt)
 MergeJoin(k mi cn mc mk ci n an it chn t)
 MergeJoin(k mi cn mc mk ci n an it chn)
 MergeJoin(k mi cn mc mk ci n an it)
 MergeJoin(k mi cn mc mk ci n an)
 MergeJoin(k mi cn mc mk ci n)
 MergeJoin(k mi cn mc mk ci)
 MergeJoin(k mi cn mc mk)
 MergeJoin(mi cn mc mk)
 MergeJoin(mi cn mc)
 NestLoop(cn mc)
 SeqScan(k)
 SeqScan(mi)
 IndexScan(cn)
 IndexScan(mc)
 IndexScan(mk)
 IndexScan(ci)
 SeqScan(n)
 IndexScan(an)
 IndexScan(it)
 IndexScan(chn)
 IndexScan(t)
 SeqScan(rt)
 Leading(((((((((k ((mi (cn mc)) mk)) ci) n) an) it) chn) t) rt)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('5'))
AND (it2.id in ('7'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('Argentina:Atp','Canada:G','Iceland:L','UK:X','USA:X'))
AND (mi2.info in ('OFM:35 mm','PFM:35 mm','RAT:1.33 : 1'))
AND (kt.kind in ('tv series','video movie'))
AND (rt.role in ('director','producer'))
AND (n.gender IS NULL)
AND (t.production_year <= 1975)
AND (t.production_year >= 1875)
AND (k.keyword IN ('based-on-play','dog','family-relationships','father-son-relationship','female-nudity','hardcore','husband-wife-relationship','independent-film','lesbian-sex','love','marriage','mother-daughter-relationship','nudity','one-word-title','police','sequel','sex','singer'))
GROUP BY t.production_year, kt.kind, n.name
ORDER BY t.production_year, kt.kind, n.name;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 1 1 4 4 4 3 4 4 3 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.3415815e-04
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.0751051e-05
 4.5687705e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 3.4863040e-01 0.0000000e+00 1.6666667e-01
 1.8108603e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  163.60589948541644
Other difference exceed the threshold, need to switch module.
the difference value is:  163.60589948541644
Hash difference exceed the threshold, need to switch module.
the difference value is:  163.60589948541644
Nested loop difference exceed the threshold, need to switch module.
Planning took 1626.3ms
qtest21a, predicted time: 6924.7
qtest21a,(predicted 6924.7),/*+ MergeJoin(k mk rt mi2 t mi1 ci kt n it1 it2)
 MergeJoin(mk rt mi2 t mi1 ci kt n it1 it2)
 MergeJoin(rt mi2 t mi1 ci kt n it1 it2)
 MergeJoin(rt mi2 t mi1 ci kt n it1)
 MergeJoin(rt mi2 t mi1 ci kt n)
 MergeJoin(rt mi2 t mi1 ci kt)
 MergeJoin(rt mi2 t mi1 ci)
 MergeJoin(mi2 t mi1 ci)
 MergeJoin(mi2 t mi1)
 HashJoin(mi2 t)
 IndexScan(k)
 SeqScan(mk)
 SeqScan(rt)
 IndexScan(mi2)
 IndexScan(t)
 IndexScan(mi1)
 SeqScan(ci)
 SeqScan(kt)
 IndexScan(n)
 SeqScan(it1)
 SeqScan(it2)
 Leading((k (mk (((((rt (((mi2 t) mi1) ci)) kt) n) it1) it2)))) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('5'))
AND (it2.id in ('7'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('Argentina:Atp','Canada:G','Iceland:L','UK:X','USA:X'))
AND (mi2.info in ('OFM:35 mm','PFM:35 mm','RAT:1.33 : 1'))
AND (kt.kind in ('tv series','video movie'))
AND (rt.role in ('producer'))
AND (n.gender IS NULL)
AND (t.production_year <= 1975)
AND (t.production_year >= 1875)
AND (k.keyword IN ('based-on-play','dog','family-relationships','father-son-relationship','female-nudity','hardcore','husband-wife-relationship','independent-film','lesbian-sex','love','marriage','mother-daughter-relationship','nudity','one-word-title','police','sequel','sex','singer'))
GROUP BY t.production_year, kt.kind, n.name
ORDER BY t.production_year, kt.kind, n.name;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 1 1 4 4 4 3 4 4 3 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.3415815e-04
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.0751051e-05
 4.5687705e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 3.4863040e-01 0.0000000e+00 8.3333336e-02
 1.8108603e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  153.67880110718585
Other difference exceed the threshold, need to switch module.
the difference value is:  153.67880110718585
Hash difference exceed the threshold, need to switch module.
the difference value is:  153.67880110718585
Nested loop difference exceed the threshold, need to switch module.
Planning took 333.6ms
qtest21c, predicted time: 3.0
qtest21c,(predicted 3.0),/*+ MergeJoin(kt k ci t mi1 it1 n mk rt mi2 it2)
 MergeJoin(kt k ci t mi1 it1 n mk rt mi2)
 MergeJoin(kt k ci t mi1 it1 n mk rt)
 MergeJoin(kt k ci t mi1 it1 n mk)
 MergeJoin(k ci t mi1 it1 n mk)
 MergeJoin(ci t mi1 it1 n mk)
 MergeJoin(ci t mi1 it1 n)
 MergeJoin(ci t mi1 it1)
 MergeJoin(t mi1 it1)
 HashJoin(mi1 it1)
 SeqScan(kt)
 SeqScan(k)
 IndexScan(ci)
 IndexScan(t)
 IndexScan(mi1)
 IndexScan(it1)
 SeqScan(n)
 SeqScan(mk)
 IndexScan(rt)
 SeqScan(mi2)
 IndexScan(it2)
 Leading(((((kt (k (((ci (t (mi1 it1))) n) mk))) rt) mi2) it2)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k,
movie_companies as mc,
company_type as ct,
company_name as cn
WHERE
t.id = ci.movie_id
AND t.id = mc.movie_id
AND t.id = mi1.movie_id
AND t.id = mk.movie_id
AND mc.company_type_id = ct.id
AND mc.company_id = cn.id
AND k.id = mk.keyword_id
AND mi1.info_type_id = it1.id
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (it1.id IN ('3'))
AND (mi1.info in ('Adventure','Animation','Crime','Drama'))
AND (kt.kind in ('movie'))
AND (rt.role in ('actor','actress'))
AND (n.gender in ('f','m'))
AND (n.surname_pcode in ('C4','C62','C632','D5','F6','F63','G63','H2','L5','M245','S','S6'))
AND (t.production_year <= 1975)
AND (t.production_year >= 1875)
AND (cn.name in ('Columbia Broadcasting System (CBS)','Metro-Goldwyn-Mayer (MGM)','Paramount Pictures','Pathé Frères','Universal Pictures','Warner Home Video'))
AND (ct.kind in ('distributors','production companies'))
GROUP BY t.production_year, kt.kind, cn.name
ORDER BY t.production_year, kt.kind, cn.name;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 0 1 1 1 1 1 1 0 1 1 3 4 4 3 4 4 5 4 3 4 3 4]
indexes_env_matrix for this sql:  [ 1  2 23  2  3 22  3  4 21  4  5 20  5  6 19  6  7 18  7  8 17  8  9 16
  9 10 15 10 11 14 11 12 13 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 2.9787614e-05 5.0000000e-01 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 1.4285715e-01 0.0000000e+00 1.0000000e+00 0.0000000e+00 2.6909378e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 1.1934039e-02 0.0000000e+00 1.6666667e-01
 1.8108603e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  176.70350238621174
Other difference exceed the threshold, need to switch module.
the difference value is:  176.70350238621174
Hash difference exceed the threshold, need to switch module.
the difference value is:  176.70350238621174
Nested loop difference exceed the threshold, need to switch module.
Planning took 258.5ms
qtest22a, predicted time: 1847.4
qtest22a,(predicted 1847.4),/*+ NestLoop(kt k mk ci mc cn t ct n rt mi1 it1)
 HashJoin(kt k mk ci mc cn t ct n rt mi1)
 HashJoin(k mk ci mc cn t ct n rt mi1)
 MergeJoin(k mk ci mc cn t ct n rt)
 MergeJoin(k mk ci mc cn t ct n)
 MergeJoin(mk ci mc cn t ct n)
 HashJoin(ci mc cn t ct n)
 MergeJoin(ci mc cn t ct)
 MergeJoin(mc cn t ct)
 MergeJoin(mc cn t)
 HashJoin(mc cn)
 SeqScan(kt)
 IndexScan(k)
 SeqScan(mk)
 SeqScan(ci)
 SeqScan(mc)
 IndexScan(cn)
 SeqScan(t)
 SeqScan(ct)
 IndexScan(n)
 SeqScan(rt)
 IndexScan(mi1)
 IndexScan(it1)
 Leading(((kt (((k (mk ((ci (((mc cn) t) ct)) n))) rt) mi1)) it1)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k,
movie_companies as mc,
company_type as ct,
company_name as cn
WHERE
t.id = ci.movie_id
AND t.id = mc.movie_id
AND t.id = mi1.movie_id
AND t.id = mk.movie_id
AND mc.company_type_id = ct.id
AND mc.company_id = cn.id
AND k.id = mk.keyword_id
AND mi1.info_type_id = it1.id
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (it1.id IN ('3'))
AND (mi1.info in ('Adventure','Animation','Crime','Drama'))
AND (kt.kind in ('movie'))
AND (rt.role in ('actor'))
AND (n.gender in ('m'))
AND (n.surname_pcode in ('F63','G63','H2','L5','M245','S','S6'))
AND (t.production_year <= 2000)
AND (t.production_year >= 1875)
AND (cn.name in ('Columbia Broadcasting System (CBS)','Metro-Goldwyn-Mayer (MGM)','Paramount Pictures','Pathé Frères','Universal Pictures','Warner Home Video'))
AND (ct.kind in ('distributors','production companies'))
GROUP BY t.production_year, kt.kind, cn.name
ORDER BY t.production_year, kt.kind, cn.name;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 0 1 0 1 0 1 3 4 3 4 3 4 3 4 3 4 4 5]
indexes_env_matrix for this sql:  [ 1  2 23  2  3 22  3  4 21  4  5 20  5  6 19  6  7 18  7  8 17  8  9 16
  9 10 15 10 11 14 11 12 13 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 2.9787614e-05 5.0000000e-01 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 1.4285715e-01 0.0000000e+00 1.0000000e+00 0.0000000e+00 2.6909378e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 4.2212447e-03 0.0000000e+00 8.3333336e-02
 4.3246600e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  168.0219666442894
Other difference exceed the threshold, need to switch module.
the difference value is:  168.0219666442894
Hash difference exceed the threshold, need to switch module.
the difference value is:  168.0219666442894
Nested loop difference exceed the threshold, need to switch module.
Planning took 373.1ms
qtest22b, predicted time: 2.5
qtest22b,(predicted 2.5),/*+ MergeJoin(kt mk rt n ci t mc k ct mi1 cn it1)
 MergeJoin(kt mk rt n ci t mc k ct mi1 cn)
 MergeJoin(kt mk rt n ci t mc k ct mi1)
 MergeJoin(kt mk rt n ci t mc k ct)
 MergeJoin(kt mk rt n ci t mc k)
 MergeJoin(mk rt n ci t mc k)
 MergeJoin(mk rt n ci t mc)
 MergeJoin(rt n ci t mc)
 MergeJoin(rt n ci t)
 MergeJoin(rt n ci)
 HashJoin(n ci)
 SeqScan(kt)
 IndexScan(mk)
 SeqScan(rt)
 IndexScan(n)
 SeqScan(ci)
 SeqScan(t)
 IndexScan(mc)
 SeqScan(k)
 SeqScan(ct)
 IndexScan(mi1)
 SeqScan(cn)
 SeqScan(it1)
 Leading((((((kt ((mk (((rt (n ci)) t) mc)) k)) ct) mi1) cn) it1)) */
---------------------------------------
sql_str:  SELECT
    MIN(n.name) AS voicing_actress,
    MIN(t.title) AS jap_engl_voiced_movie
FROM
    aka_name AS an,
    char_name AS chn,
    cast_info AS ci,
    company_name AS cn,
    info_type AS it,
    movie_companies AS mc,
    movie_info AS mi,
    name AS n,
    role_type AS rt,
    title AS t
WHERE
    ci.note in (
        '(voice)',
        '(voice: Japanese version)',
        '(voice) (uncredited)',
        '(voice: English version)'
    )
    AND cn.country_code = '[us]'
    AND it.info = 'release dates'
    AND n.gender = 'f'
    AND rt.role = 'actress'
    AND t.production_year > 2000
    AND t.id = mi.movie_id
    AND t.id = mc.movie_id
    AND t.id = ci.movie_id
    AND mc.movie_id = ci.movie_id
    AND mc.movie_id = mi.movie_id
    AND mi.movie_id = ci.movie_id
    AND cn.id = mc.company_id
    AND it.id = mi.info_type_id
    AND n.id = ci.person_id
    AND rt.id = ci.role_id
    AND n.id = an.person_id
    AND ci.person_id = an.person_id
    AND chn.id = ci.person_role_id
GROUP BY t.production_year, n.name, t.title
ORDER BY t.production_year, n.name, t.title;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 0 1 1 0 3 1 3 4 4 4 3 5 4 4 5]
indexes_env_matrix for this sql:  [ 1  2 19  2  3 18  3  4 17  4  5 16  5  6 15  6  7 14  7  8 13  8  9 10
  9  0  0 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0]
query_enc_matrix for this sql:  [1.         0.0233155  1.         0.         0.         0.36416635
 0.         0.         0.00884956 0.         0.         0.
 0.         0.         0.         0.         0.         1.
 1.         0.         0.         0.         0.         0.
 0.         0.         0.         0.23576464 0.         0.08333334
 0.5407442  0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  157.8008292097466
Other difference exceed the threshold, need to switch module.
the difference value is:  157.8008292097466
Hash difference exceed the threshold, need to switch module.
the difference value is:  157.8008292097466
Nested loop difference exceed the threshold, need to switch module.
Planning took 211.7ms
qtest23a, predicted time: 2084.9
qtest23a,(predicted 2084.9),/*+ HashJoin(n ci rt chn t an mc cn mi it)
 HashJoin(n ci rt chn t an mc cn mi)
 HashJoin(n ci rt chn t an mc cn)
 HashJoin(n ci rt chn t an mc)
 HashJoin(n ci rt chn t an)
 HashJoin(n ci rt chn t)
 HashJoin(n ci rt chn)
 HashJoin(n ci rt)
 HashJoin(n ci)
 IndexScan(n)
 SeqScan(ci)
 SeqScan(rt)
 IndexScan(chn)
 SeqScan(t)
 IndexScan(an)
 SeqScan(mc)
 SeqScan(cn)
 SeqScan(mi)
 SeqScan(it)
 Leading((((((((((n ci) rt) chn) t) an) mc) cn) mi) it)) */
---------------------------------------
sql_str:  SELECT
    MAX(n.name) AS voicing_actress,
    MAX(t.title) AS jap_engl_voiced_movie
FROM
    aka_name AS an,
    char_name AS chn,
    cast_info AS ci,
    company_name AS cn,
    info_type AS it,
    movie_companies AS mc,
    movie_info AS mi,
    name AS n,
    role_type AS rt,
    title AS t
WHERE
    ci.note in (
        '(voice)',
        '(voice: Japanese version)',
        '(voice) (uncredited)',
        '(voice: English version)'
    )
    AND cn.country_code = '[us]'
    AND it.info = 'release dates'
    AND n.gender = 'f'
    AND rt.role = 'actress'
    AND t.production_year > 2000
    AND t.id = mi.movie_id
    AND t.id = mc.movie_id
    AND t.id = ci.movie_id
    AND mc.movie_id = ci.movie_id
    AND mc.movie_id = mi.movie_id
    AND mi.movie_id = ci.movie_id
    AND cn.id = mc.company_id
    AND it.id = mi.info_type_id
    AND n.id = ci.person_id
    AND rt.id = ci.role_id
    AND n.id = an.person_id
    AND ci.person_id = an.person_id
    AND chn.id = ci.person_role_id
GROUP BY t.production_year, n.name, t.title
ORDER BY t.production_year, n.name, t.title;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 0 1 1 0 3 1 3 4 4 4 3 5 4 4 5]
indexes_env_matrix for this sql:  [ 1  2 19  2  3 18  3  4 17  4  5 16  5  6 15  6  7 14  7  8 13  8  9 10
  9  0  0 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0]
query_enc_matrix for this sql:  [1.         0.0233155  1.         0.         0.         0.36416635
 0.         0.         0.00884956 0.         0.         0.
 0.         0.         0.         0.         0.         1.
 1.         0.         0.         0.         0.         0.
 0.         0.         0.         0.23576464 0.         0.08333334
 0.5407442  0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  144.0471268394073
Other difference exceed the threshold, need to switch module.
the difference value is:  144.0471268394073
Hash difference exceed the threshold, need to switch module.
the difference value is:  144.0471268394073
Nested loop difference exceed the threshold, need to switch module.
Planning took 198.9ms
qtest23b, predicted time: 2.2
qtest23b,(predicted 2.2),/*+ MergeJoin(rt n ci t mi it chn an mc cn)
 MergeJoin(rt n ci t mi it chn an mc)
 MergeJoin(n ci t mi it chn an mc)
 MergeJoin(n ci t mi it chn an)
 MergeJoin(ci t mi it chn an)
 MergeJoin(ci t mi it chn)
 MergeJoin(ci t mi it)
 NestLoop(t mi it)
 HashJoin(t mi)
 IndexScan(rt)
 SeqScan(n)
 SeqScan(ci)
 IndexScan(t)
 SeqScan(mi)
 IndexScan(it)
 IndexScan(chn)
 IndexScan(an)
 SeqScan(mc)
 SeqScan(cn)
 Leading(((rt ((n (((ci ((t mi) it)) chn) an)) mc)) cn)) */
---------------------------------------
sql_str:  SELECT
    MIN(n.name) AS voicing_actress,
    MIN(t.title) AS jap_engl_voiced_movie
FROM
    aka_name AS an,
    char_name AS chn,
    cast_info AS ci,
    company_name AS cn,
    info_type AS it,
    movie_companies AS mc,
    movie_info AS mi,
    name AS n,
    role_type AS rt,
    title AS t
WHERE
    ci.note in (
        '(voice: Japanese version)',
        '(voice) (uncredited)',
        '(voice: English version)'
    )
    AND cn.country_code = '[us]'
    AND it.info = 'release dates'
    AND n.gender = 'f'
    AND rt.role = 'actress'
    AND t.production_year > 2000
    AND t.id = mi.movie_id
    AND t.id = mc.movie_id
    AND t.id = ci.movie_id
    AND mc.movie_id = ci.movie_id
    AND mc.movie_id = mi.movie_id
    AND mi.movie_id = ci.movie_id
    AND cn.id = mc.company_id
    AND it.id = mi.info_type_id
    AND n.id = ci.person_id
    AND rt.id = ci.role_id
    AND n.id = an.person_id
    AND ci.person_id = an.person_id
    AND chn.id = ci.person_role_id
GROUP BY t.production_year, n.name, t.title
ORDER BY t.production_year, n.name, t.title;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 0 1 1 1 0 0 3 3 1 3 4 4 4 4 3 5 5]
indexes_env_matrix for this sql:  [ 1  2 19  2  3 18  3  4 17  4  5 16  5  6 15  6  7 14  7  8 11  8  9 10
  9  0  0 10  0  0 11 12 13 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0]
query_enc_matrix for this sql:  [1.         0.0042634  1.         0.         0.         0.36416635
 0.         0.         0.00884956 0.         0.         0.
 0.         0.         0.         0.         0.         1.
 1.         0.         0.         0.         0.         0.
 0.         0.         0.         0.23576464 0.         0.08333334
 0.5407442  0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  157.800353291719
Other difference exceed the threshold, need to switch module.
the difference value is:  157.800353291719
Hash difference exceed the threshold, need to switch module.
the difference value is:  157.800353291719
Nested loop difference exceed the threshold, need to switch module.
Planning took 212.0ms
qtest23c, predicted time: 1858.7
qtest23c,(predicted 1858.7),/*+ HashJoin(n ci rt chn t an mc cn mi it)
 HashJoin(n ci rt chn t an mc cn mi)
 HashJoin(n ci rt chn t an mc cn)
 HashJoin(n ci rt chn t an mc)
 HashJoin(n ci rt chn t an)
 HashJoin(n ci rt chn t)
 HashJoin(n ci rt chn)
 HashJoin(n ci rt)
 HashJoin(n ci)
 IndexScan(n)
 SeqScan(ci)
 SeqScan(rt)
 IndexScan(chn)
 SeqScan(t)
 IndexScan(an)
 SeqScan(mc)
 SeqScan(cn)
 SeqScan(mi)
 SeqScan(it)
 Leading((((((((((n ci) rt) chn) t) an) mc) cn) mi) it)) */
---------------------------------------
sql_str:  SELECT
    MIN(lt.link) AS link_type,
    MIN(t1.title) AS first_movie,
    MIN(t2.title) AS second_movie
FROM
    keyword AS k,
    link_type AS lt,
    movie_keyword AS mk,
    movie_link AS ml,
    title AS t1,
    title AS t2
WHERE
    k.keyword = '10,000-mile-club'
    AND mk.keyword_id = k.id
    AND t1.id = mk.movie_id
    AND ml.movie_id = t1.id
    AND ml.linked_movie_id = t2.id
    AND lt.id = ml.link_type_id
    AND mk.movie_id = t1.id
GROUP BY lt.id, t1.id, t2.id
ORDER BY lt.id, t1.id, t2.id;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 3 4 4 3 4 4]
indexes_env_matrix for this sql:  [ 1  2 11  2  3 10  3  4  9  4  5  8  5  6  7  6  0  0  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0]
query_enc_matrix for this sql:  [0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 7.453231e-06
 0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 1.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 1.000000e+00 1.000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  135.11172721917964
Other difference exceed the threshold, need to switch module.
the difference value is:  135.11172721917964
Hash difference exceed the threshold, need to switch module.
the difference value is:  135.11172721917964
Nested loop difference exceed the threshold, need to switch module.
Planning took 54.1ms
qtest24a, predicted time: 5.7
qtest24a,(predicted 5.7),/*+ MergeJoin(k t1 ml t2 mk lt)
 MergeJoin(t1 ml t2 mk lt)
 MergeJoin(t1 ml t2 mk)
 MergeJoin(t1 ml t2)
 NestLoop(ml t2)
 IndexScan(k)
 IndexScan(t1)
 SeqScan(ml)
 IndexScan(t2)
 SeqScan(mk)
 IndexScan(lt)
 Leading((k (((t1 (ml t2)) mk) lt))) */
---------------------------------------
sql_str:  SELECT
    MAX(lt.link) AS link_type,
    MAX(t1.title) AS first_movie,
    MAX(t2.title) AS second_movie
FROM
    keyword AS k,
    link_type AS lt,
    movie_keyword AS mk,
    movie_link AS ml,
    title AS t1,
    title AS t2
WHERE
    k.keyword = '10,000-mile-club'
    AND mk.keyword_id = k.id
    AND t1.id = mk.movie_id
    AND ml.movie_id = t1.id
    AND ml.linked_movie_id = t2.id
    AND lt.id = ml.link_type_id
    AND mk.movie_id = t1.id
GROUP BY lt.id, t1.id, t2.id
ORDER BY lt.id, t1.id, t2.id;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 3 4 4 3 4 4]
indexes_env_matrix for this sql:  [ 1  2 11  2  3 10  3  4  9  4  5  8  5  6  7  6  0  0  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0]
query_enc_matrix for this sql:  [0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 7.453231e-06
 0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 1.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 1.000000e+00 1.000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  132.25687794962784
Other difference exceed the threshold, need to switch module.
the difference value is:  132.25687794962784
Hash difference exceed the threshold, need to switch module.
the difference value is:  132.25687794962784
Nested loop difference exceed the threshold, need to switch module.
Planning took 286.4ms
qtest24b, predicted time: 734.3
qtest24b,(predicted 734.3),/*+ MergeJoin(t1 ml lt t2 mk k)
 MergeJoin(t1 ml lt t2 mk)
 MergeJoin(t1 ml lt t2)
 MergeJoin(t1 ml lt)
 MergeJoin(ml lt)
 SeqScan(t1)
 IndexScan(ml)
 SeqScan(lt)
 IndexScan(t2)
 SeqScan(mk)
 IndexScan(k)
 Leading(((((t1 (ml lt)) t2) mk) k)) */
---------------------------------------
sql_str:  SELECT
    MIN(lt.link) AS link_type,
    MAX(t1.title) AS first_movie,
    MAX(t2.title) AS second_movie
FROM
    keyword AS k,
    link_type AS lt,
    movie_keyword AS mk,
    movie_link AS ml,
    title AS t1,
    title AS t2
WHERE
    k.keyword = '10,000-mile-club'
    AND mk.keyword_id = k.id
    AND t1.id = mk.movie_id
    AND ml.movie_id = t1.id
    AND ml.linked_movie_id = t2.id
    AND lt.id = ml.link_type_id
    AND mk.movie_id = t1.id
GROUP BY lt.id, t1.id, t2.id
ORDER BY lt.id, t1.id, t2.id;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 3 4 4 3 4 4]
indexes_env_matrix for this sql:  [ 1  2 11  2  3 10  3  4  9  4  5  8  5  6  7  6  0  0  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0]
query_enc_matrix for this sql:  [0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 7.453231e-06
 0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 1.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 1.000000e+00 1.000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  135.11172721917964
Other difference exceed the threshold, need to switch module.
the difference value is:  135.11172721917964
Hash difference exceed the threshold, need to switch module.
the difference value is:  135.11172721917964
Nested loop difference exceed the threshold, need to switch module.
Planning took 53.9ms
qtest24c, predicted time: 5.7
qtest24c,(predicted 5.7),/*+ MergeJoin(k t1 ml t2 mk lt)
 MergeJoin(t1 ml t2 mk lt)
 MergeJoin(t1 ml t2 mk)
 MergeJoin(t1 ml t2)
 NestLoop(ml t2)
 IndexScan(k)
 IndexScan(t1)
 SeqScan(ml)
 IndexScan(t2)
 SeqScan(mk)
 IndexScan(lt)
 Leading((k (((t1 (ml t2)) mk) lt))) */
---------------------------------------
sql_str:  SELECT
    MIN(cn.name) AS producing_company,
    MIN(miidx.info) AS rating,
    MIN(t.title) AS movie
FROM
    company_name AS cn,
    company_type AS ct,
    info_type AS it,
    info_type AS it2,
    kind_type AS kt,
    movie_companies AS mc,
    movie_info AS mi,
    movie_info_idx AS miidx,
    title AS t
WHERE
    cn.country_code = '[us]'
    AND ct.kind = 'production companies'
    AND it.info = 'rating'
    AND it2.info = 'release dates'
    AND kt.kind = 'movie'
    AND mi.movie_id = t.id
    AND it2.id = mi.info_type_id
    AND kt.id = t.kind_id
    AND mc.movie_id = t.id
    AND cn.id = mc.company_id
    AND ct.id = mc.company_type_id
    AND miidx.movie_id = t.id
    AND it.id = miidx.info_type_id
    AND mi.movie_id = miidx.movie_id
    AND mi.movie_id = mc.movie_id
    AND miidx.movie_id = mc.movie_id
GROUP BY t.production_year, cn.name, t.title
ORDER BY t.production_year, cn.name, t.title;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [0 1 1 0 1 0 1 0 3 3 4 3 4 3 4 4 3]
indexes_env_matrix for this sql:  [ 1  2 17  2  3 16  3  4 15  4  5 14  5  6 13  6  7 12  7  8 11  8  9 10
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0]
query_enc_matrix for this sql:  [0.         0.         0.         0.         0.         0.36416635
 0.25       0.         0.00884956 0.         0.00884956 0.
 0.         0.         0.         0.14285715 0.         1.
 1.         0.         0.         0.         0.         0.
 1.         0.         0.         0.         0.         0.
 1.         0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  148.08245452788572
Other difference exceed the threshold, need to switch module.
the difference value is:  148.08245452788572
Hash difference exceed the threshold, need to switch module.
the difference value is:  148.08245452788572
Nested loop difference exceed the threshold, need to switch module.
Planning took 135.7ms
qtest25a, predicted time: 2073.5
qtest25a,(predicted 2073.5),/*+ HashJoin(it2 mi cn miidx it t kt mc ct)
 HashJoin(mi cn miidx it t kt mc ct)
 HashJoin(cn miidx it t kt mc ct)
 HashJoin(miidx it t kt mc ct)
 HashJoin(miidx it t kt mc)
 HashJoin(miidx it t kt)
 HashJoin(miidx it t)
 HashJoin(miidx it)
 IndexScan(it2)
 SeqScan(mi)
 SeqScan(cn)
 IndexScan(miidx)
 IndexScan(it)
 IndexScan(t)
 IndexScan(kt)
 SeqScan(mc)
 IndexScan(ct)
 Leading((it2 (mi (cn (((((miidx it) t) kt) mc) ct))))) */
---------------------------------------
sql_str:  SELECT
    MAX(cn.name) AS producing_company,
    MAX(miidx.info) AS rating,
    MAX(t.title) AS movie
FROM
    company_name AS cn,
    company_type AS ct,
    info_type AS it,
    info_type AS it2,
    kind_type AS kt,
    movie_companies AS mc,
    movie_info AS mi,
    movie_info_idx AS miidx,
    title AS t
WHERE
    cn.country_code = '[us]'
    AND ct.kind = 'production companies'
    AND it.info = 'rating'
    AND it2.info = 'release dates'
    AND kt.kind = 'movie'
    AND mi.movie_id = t.id
    AND it2.id = mi.info_type_id
    AND kt.id = t.kind_id
    AND mc.movie_id = t.id
    AND cn.id = mc.company_id
    AND ct.id = mc.company_type_id
    AND miidx.movie_id = t.id
    AND it.id = miidx.info_type_id
    AND mi.movie_id = miidx.movie_id
    AND mi.movie_id = mc.movie_id
    AND miidx.movie_id = mc.movie_id
GROUP BY t.production_year, cn.name, t.title
ORDER BY t.production_year, cn.name, t.title;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [0 1 1 0 1 0 1 0 3 3 4 3 4 3 4 4 3]
indexes_env_matrix for this sql:  [ 1  2 17  2  3 16  3  4 15  4  5 14  5  6 13  6  7 12  7  8 11  8  9 10
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0]
query_enc_matrix for this sql:  [0.         0.         0.         0.         0.         0.36416635
 0.25       0.         0.00884956 0.         0.00884956 0.
 0.         0.         0.         0.14285715 0.         1.
 1.         0.         0.         0.         0.         0.
 1.         0.         0.         0.         0.         0.
 1.         0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  135.7833973716373
Other difference exceed the threshold, need to switch module.
the difference value is:  135.7833973716373
Hash difference exceed the threshold, need to switch module.
the difference value is:  135.7833973716373
Nested loop difference exceed the threshold, need to switch module.
Planning took 107.8ms
qtest25b, predicted time: 2.8
qtest25b,(predicted 2.8),/*+ MergeJoin(it2 miidx t kt mi it mc ct cn)
 MergeJoin(it2 miidx t kt mi it mc ct)
 MergeJoin(it2 miidx t kt mi it mc)
 MergeJoin(it2 miidx t kt mi it)
 MergeJoin(miidx t kt mi it)
 MergeJoin(miidx t kt mi)
 NestLoop(t kt mi)
 HashJoin(t kt)
 SeqScan(it2)
 IndexScan(miidx)
 IndexScan(t)
 SeqScan(kt)
 IndexScan(mi)
 SeqScan(it)
 IndexScan(mc)
 SeqScan(ct)
 SeqScan(cn)
 Leading(((((it2 ((miidx ((t kt) mi)) it)) mc) ct) cn)) */
---------------------------------------
sql_str:  SELECT
    MIN(cn.name) AS producing_company,
    MIN(miidx.info) AS rating,
    MIN(t.title) AS movie
FROM
    company_name AS cn,
    company_type AS ct,
    info_type AS it,
    info_type AS it2,
    kind_type AS kt,
    movie_companies AS mc,
    movie_info AS mi,
    movie_info_idx AS miidx,
    title AS t
WHERE
    cn.country_code = '[uk]'
    AND ct.kind = 'production companies'
    AND it.info = 'rating'
    AND it2.info = 'release dates'
    AND kt.kind = 'movie'
    AND mi.movie_id = t.id
    AND it2.id = mi.info_type_id
    AND kt.id = t.kind_id
    AND mc.movie_id = t.id
    AND cn.id = mc.company_id
    AND ct.id = mc.company_type_id
    AND miidx.movie_id = t.id
    AND it.id = miidx.info_type_id
    AND mi.movie_id = miidx.movie_id
    AND mi.movie_id = mc.movie_id
    AND miidx.movie_id = mc.movie_id
GROUP BY t.production_year, cn.name, t.title
ORDER BY t.production_year, cn.name, t.title;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 0 1 0 1 3 4 3 4 3 4 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 17  2  3 16  3  4 15  4  5 14  5  6 13  6  7 12  7  8 11  8  9 10
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 9.3618219e-05 2.5000000e-01 0.0000000e+00 8.8495575e-03 0.0000000e+00
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.4285715e-01 0.0000000e+00 1.0000000e+00 1.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  144.9551221124624
Other difference exceed the threshold, need to switch module.
the difference value is:  144.9551221124624
Hash difference exceed the threshold, need to switch module.
the difference value is:  144.9551221124624
Nested loop difference exceed the threshold, need to switch module.
Planning took 103.8ms
qtest25c, predicted time: 2131.7
qtest25c,(predicted 2131.7),/*+ HashJoin(it it2 mi miidx kt t mc cn ct)
 HashJoin(it2 mi miidx kt t mc cn ct)
 HashJoin(mi miidx kt t mc cn ct)
 HashJoin(miidx kt t mc cn ct)
 HashJoin(kt t mc cn ct)
 HashJoin(t mc cn ct)
 HashJoin(mc cn ct)
 HashJoin(mc cn)
 SeqScan(it)
 IndexScan(it2)
 SeqScan(mi)
 SeqScan(miidx)
 IndexScan(kt)
 SeqScan(t)
 IndexScan(mc)
 IndexScan(cn)
 IndexScan(ct)
 Leading((it (it2 (mi (miidx (kt (t ((mc cn) ct)))))))) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('8'))
AND (it2.id in ('2'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('Austria','Belgium','Brazil','Denmark','France','Mexico','Spain','UK','USA','Yugoslavia'))
AND (mi2.info in ('Black and White','Color'))
AND (kt.kind in ('episode','movie','tv movie'))
AND (rt.role in ('editor','writer'))
AND (n.gender in ('f','m'))
AND (t.production_year <= 1975)
AND (t.production_year >= 1875)
GROUP BY t.production_year, kt.kind, n.name
ORDER BY t.production_year, kt.kind, n.name;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 3 1 3 1 1 1 0 1 1 0 3 0 3 3 4 4 3 4 4 5]
indexes_env_matrix for this sql:  [ 1  2  3  2  0  0  3  4  5  4  0  0  5  6 21  6  7 20  7  8 19  8  9 18
  9 10 17 10 11 16 11 12 13 12  0  0 13 14 15 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.         1.         0.         0.         0.         0.
 0.         0.         0.         0.00884956 0.00884956 0.
 0.         0.         1.         0.42857143 0.         0.
 0.         0.00522624 0.00829464 0.         0.         0.
 0.         1.         0.         0.65136147 0.         0.16666667
 0.18108603 0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  165.2343263924866
Other difference exceed the threshold, need to switch module.
the difference value is:  165.2343263924866
Hash difference exceed the threshold, need to switch module.
the difference value is:  165.2343263924866
Nested loop difference exceed the threshold, need to switch module.
Planning took 526.2ms
qtest26a, predicted time: 2.7
qtest26a,(predicted 2.7),/*+ MergeJoin(k kt rt ci t mi1 it1 n mk mi2 it2)
 MergeJoin(kt rt ci t mi1 it1 n mk mi2 it2)
 MergeJoin(kt rt ci t mi1 it1 n mk mi2)
 MergeJoin(kt rt ci t mi1 it1 n mk)
 MergeJoin(rt ci t mi1 it1 n mk)
 MergeJoin(ci t mi1 it1 n mk)
 MergeJoin(ci t mi1 it1 n)
 MergeJoin(ci t mi1 it1)
 MergeJoin(t mi1 it1)
 HashJoin(mi1 it1)
 IndexScan(k)
 IndexScan(kt)
 SeqScan(rt)
 IndexScan(ci)
 IndexScan(t)
 IndexScan(mi1)
 IndexScan(it1)
 SeqScan(n)
 SeqScan(mk)
 IndexScan(mi2)
 IndexScan(it2)
 Leading((k (((kt (rt (((ci (t (mi1 it1))) n) mk))) mi2) it2))) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('8'))
AND (it2.id in ('2'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('Austria','Belgium','Brazil','Denmark','France','Mexico','Spain','UK','USA','Yugoslavia'))
AND (mi2.info in ('Black and White','Color'))
AND (kt.kind in ('episode','movie','tv movie'))
AND (rt.role in ('editor','writer'))
AND (n.gender in ('f','m'))
AND (t.production_year <= 2000)
AND (t.production_year >= 1900)
GROUP BY t.production_year, kt.kind, n.name
ORDER BY t.production_year, kt.kind, n.name;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 3 1 3 1 1 1 0 1 1 0 3 0 3 3 4 4 3 4 4 5]
indexes_env_matrix for this sql:  [ 1  2  3  2  0  0  3  4  5  4  0  0  5  6 21  6  7 20  7  8 19  8  9 18
  9 10 17 10 11 16 11 12 13 12  0  0 13 14 15 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.         1.         0.         0.         0.         0.
 0.         0.         0.         0.00884956 0.00884956 0.
 0.         0.         1.         0.42857143 0.         0.
 0.         0.00522624 0.00829464 0.         0.         0.
 0.         1.         0.         0.65136147 0.         0.16666667
 0.42983183 0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  174.17638417822693
Other difference exceed the threshold, need to switch module.
the difference value is:  174.17638417822693
Hash difference exceed the threshold, need to switch module.
the difference value is:  174.17638417822693
Nested loop difference exceed the threshold, need to switch module.
Planning took 1206.6ms
qtest26b, predicted time: 7275.1
qtest26b,(predicted 7275.1),/*+ MergeJoin(kt n ci mi2 t mi1 rt it1 it2 mk k)
 NestLoop(kt n ci mi2 t mi1 rt it1 it2 mk)
 HashJoin(kt n ci mi2 t mi1 rt it1 it2)
 MergeJoin(kt n ci mi2 t mi1 rt it1)
 MergeJoin(n ci mi2 t mi1 rt it1)
 MergeJoin(n ci mi2 t mi1 rt)
 MergeJoin(ci mi2 t mi1 rt)
 MergeJoin(ci mi2 t mi1)
 MergeJoin(mi2 t mi1)
 HashJoin(mi2 t)
 SeqScan(kt)
 IndexScan(n)
 SeqScan(ci)
 IndexScan(mi2)
 SeqScan(t)
 IndexScan(mi1)
 SeqScan(rt)
 IndexScan(it1)
 IndexScan(it2)
 IndexScan(mk)
 IndexScan(k)
 Leading(((((kt ((n ((ci ((mi2 t) mi1)) rt)) it1)) it2) mk) k)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('8'))
AND (it2.id in ('2'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('Brazil','Denmark','France','Mexico','Spain','UK','USA','Yugoslavia'))
AND (mi2.info in ('Black and White','Color'))
AND (kt.kind in ('episode','movie','tv movie'))
AND (rt.role in ('editor','writer'))
AND (n.gender in ('f','m'))
AND (t.production_year <= 1975)
AND (t.production_year >= 1875)
GROUP BY t.production_year, kt.kind, n.name
ORDER BY t.production_year, kt.kind, n.name;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 3 1 3 1 1 1 0 1 1 0 3 0 3 3 4 4 3 4 4 5]
indexes_env_matrix for this sql:  [ 1  2  3  2  0  0  3  4  5  4  0  0  5  6 21  6  7 20  7  8 19  8  9 18
  9 10 17 10 11 16 11 12 13 12  0  0 13 14 15 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.         1.         0.         0.         0.         0.
 0.         0.         0.         0.00884956 0.00884956 0.
 0.         0.         1.         0.42857143 0.         0.
 0.         0.00514872 0.00829464 0.         0.         0.
 0.         1.         0.         0.65136147 0.         0.16666667
 0.18108603 0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  165.2343255708037
Other difference exceed the threshold, need to switch module.
the difference value is:  165.2343255708037
Hash difference exceed the threshold, need to switch module.
the difference value is:  165.2343255708037
Nested loop difference exceed the threshold, need to switch module.
Planning took 540.2ms
qtest26c, predicted time: 2.7
qtest26c,(predicted 2.7),/*+ MergeJoin(k kt rt ci t mi1 it1 n mk mi2 it2)
 MergeJoin(kt rt ci t mi1 it1 n mk mi2 it2)
 MergeJoin(kt rt ci t mi1 it1 n mk mi2)
 MergeJoin(kt rt ci t mi1 it1 n mk)
 MergeJoin(rt ci t mi1 it1 n mk)
 MergeJoin(ci t mi1 it1 n mk)
 MergeJoin(ci t mi1 it1 n)
 MergeJoin(ci t mi1 it1)
 MergeJoin(t mi1 it1)
 HashJoin(mi1 it1)
 IndexScan(k)
 IndexScan(kt)
 SeqScan(rt)
 IndexScan(ci)
 IndexScan(t)
 IndexScan(mi1)
 IndexScan(it1)
 SeqScan(n)
 SeqScan(mk)
 IndexScan(mi2)
 IndexScan(it2)
 Leading((k (((kt (rt (((ci (t (mi1 it1))) n) mk))) mi2) it2))) */
---------------------------------------
sql_str:  SELECT
    MIN(t.title) AS movie_title
FROM
    keyword AS k,
    movie_info AS mi,
    movie_keyword AS mk,
    title AS t
WHERE
    k.keyword like '%sequel%'
    AND mi.info IN (
        'Sweden',
        'Norway',
        'Germany',
        'Denmark',
        'Swedish',
        'Denish',
        'Norwegian',
        'German',
        'USA',
        'American'
    )
    AND t.production_year > 1990
    AND t.id = mi.movie_id
    AND t.id = mk.movie_id
    AND mk.movie_id = mi.movie_id
    AND k.id = mk.keyword_id
GROUP BY t.production_year, mi.info
ORDER BY t.production_year, mi.info;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 3 4 4 4]
indexes_env_matrix for this sql:  [1 2 7 2 3 6 3 4 5 4 0 0 5 0 0 6 0 0 7 0 0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 9.6891999e-05
 0.0000000e+00 0.0000000e+00 0.0000000e+00 4.6758972e-02 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 6.9064540e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  147.73489663390436
Other difference exceed the threshold, need to switch module.
the difference value is:  147.73489663390436
Hash difference exceed the threshold, need to switch module.
the difference value is:  147.73489663390436
Nested loop difference exceed the threshold, need to switch module.
Planning took 37.6ms
qtest27a, predicted time: 476.8
qtest27a,(predicted 476.8),/*+ MergeJoin(t k mk mi)
 HashJoin(t k mk)
 MergeJoin(k mk)
 IndexScan(t)
 IndexScan(k)
 SeqScan(mk)
 SeqScan(mi)
 Leading(((t (k mk)) mi)) */
---------------------------------------
sql_str:  SELECT
    MAX(t.title) AS movie_title
FROM
    keyword AS k,
    movie_info AS mi,
    movie_keyword AS mk,
    title AS t
WHERE
    k.keyword like '%sequel%'
    AND mi.info IN (
        'Sweden',
        'Norway',
        'Germany',
        'Denmark',
        'Swedish',
        'Denish',
        'Norwegian',
        'German',
        'USA',
        'American'
    )
    AND t.production_year > 1990
    AND t.id = mi.movie_id
    AND t.id = mk.movie_id
    AND mk.movie_id = mi.movie_id
    AND k.id = mk.keyword_id
GROUP BY t.production_year, mi.info
ORDER BY t.production_year, mi.info;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 3 4 4 4]
indexes_env_matrix for this sql:  [1 2 7 2 3 6 3 4 5 4 0 0 5 0 0 6 0 0 7 0 0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 9.6891999e-05
 0.0000000e+00 0.0000000e+00 0.0000000e+00 4.6758972e-02 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 6.9064540e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  154.74694784850598
Other difference exceed the threshold, need to switch module.
the difference value is:  154.74694784850598
Hash difference exceed the threshold, need to switch module.
the difference value is:  154.74694784850598
Nested loop difference exceed the threshold, need to switch module.
Planning took 40.1ms
qtest27b, predicted time: 5.6
qtest27b,(predicted 5.6),/*+ MergeJoin(k mk t mi)
 HashJoin(mk t mi)
 NestLoop(mk t)
 SeqScan(k)
 SeqScan(mk)
 IndexScan(t)
 IndexScan(mi)
 Leading((k ((mk t) mi))) */
---------------------------------------
sql_str:  SELECT
    MIN(mi.info) AS release_date,
    MIN(miidx.info) AS rating,
    MIN(t.title) AS german_movie
FROM
    company_name AS cn,
    company_type AS ct,
    info_type AS it,
    info_type AS it2,
    kind_type AS kt,
    movie_companies AS mc,
    movie_info AS mi,
    movie_info_idx AS miidx,
    title AS t
WHERE
    cn.country_code = '[de]'
    AND ct.kind = 'production companies'
    AND it.info = 'rating'
    AND it2.info = 'release dates'
    AND kt.kind = 'movie'
    AND mi.movie_id = t.id
    AND it2.id = mi.info_type_id
    AND kt.id = t.kind_id
    AND mc.movie_id = t.id
    AND cn.id = mc.company_id
    AND ct.id = mc.company_type_id
    AND miidx.movie_id = t.id
    AND it.id = miidx.info_type_id
    AND mi.movie_id = miidx.movie_id
    AND mi.movie_id = mc.movie_id
    AND miidx.movie_id = mc.movie_id
GROUP BY
    cn.id,
    ct.id,
    kt.id
ORDER BY
    cn.name,
    kt.kind,
    ct.kind;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [0 1 1 0 1 0 1 0 3 3 4 3 4 3 4 4 3]
indexes_env_matrix for this sql:  [ 1  2 17  2  3 16  3  4 15  4  5 14  5  6 13  6  7 12  7  8 11  8  9 10
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0]
query_enc_matrix for this sql:  [0.         0.         0.         0.         0.         0.04353247
 0.25       0.         0.00884956 0.         0.00884956 0.
 0.         0.         0.         0.14285715 0.         1.
 1.         0.         0.         0.         0.         0.
 1.         0.         0.         0.         0.         0.
 1.         0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  147.95695047350895
Other difference exceed the threshold, need to switch module.
the difference value is:  147.95695047350895
Hash difference exceed the threshold, need to switch module.
the difference value is:  147.95695047350895
Nested loop difference exceed the threshold, need to switch module.
Planning took 124.0ms
qtest28a, predicted time: 2028.8
qtest28a,(predicted 2028.8),/*+ HashJoin(it2 mi ct miidx it t kt mc cn)
 HashJoin(mi ct miidx it t kt mc cn)
 HashJoin(ct miidx it t kt mc cn)
 HashJoin(miidx it t kt mc cn)
 HashJoin(miidx it t kt mc)
 HashJoin(miidx it t kt)
 HashJoin(miidx it t)
 HashJoin(miidx it)
 IndexScan(it2)
 SeqScan(mi)
 IndexScan(ct)
 IndexScan(miidx)
 IndexScan(it)
 IndexScan(t)
 IndexScan(kt)
 SeqScan(mc)
 SeqScan(cn)
 Leading((it2 (mi (ct (((((miidx it) t) kt) mc) cn))))) */
---------------------------------------
sql_str:  SELECT
    MAX(mi.info) AS release_date,
    MAX(miidx.info) AS rating,
    MAX(t.title) AS german_movie
FROM
    company_name AS cn,
    company_type AS ct,
    info_type AS it,
    info_type AS it2,
    kind_type AS kt,
    movie_companies AS mc,
    movie_info AS mi,
    movie_info_idx AS miidx,
    title AS t
WHERE
    cn.country_code = '[de]'
    AND ct.kind = 'production companies'
    AND it.info = 'rating'
    AND it2.info = 'release dates'
    AND kt.kind = 'movie'
    AND mi.movie_id = t.id
    AND it2.id = mi.info_type_id
    AND kt.id = t.kind_id
    AND mc.movie_id = t.id
    AND cn.id = mc.company_id
    AND ct.id = mc.company_type_id
    AND miidx.movie_id = t.id
    AND it.id = miidx.info_type_id
    AND mi.movie_id = miidx.movie_id
    AND mi.movie_id = mc.movie_id
    AND miidx.movie_id = mc.movie_id
GROUP BY
    cn.id,
    ct.id,
    kt.id
ORDER BY
    cn.name,
    kt.kind,
    ct.kind;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [0 1 1 0 1 0 1 0 3 3 4 3 4 3 4 4 3]
indexes_env_matrix for this sql:  [ 1  2 17  2  3 16  3  4 15  4  5 14  5  6 13  6  7 12  7  8 11  8  9 10
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0]
query_enc_matrix for this sql:  [0.         0.         0.         0.         0.         0.04353247
 0.25       0.         0.00884956 0.         0.00884956 0.
 0.         0.         0.         0.14285715 0.         1.
 1.         0.         0.         0.         0.         0.
 1.         0.         0.         0.         0.         0.
 1.         0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  135.65492777607318
Other difference exceed the threshold, need to switch module.
the difference value is:  135.65492777607318
Hash difference exceed the threshold, need to switch module.
the difference value is:  135.65492777607318
Nested loop difference exceed the threshold, need to switch module.
Planning took 125.9ms
qtest28b, predicted time: 1.7
qtest28b,(predicted 1.7),/*+ MergeJoin(it2 mi miidx t kt it mc ct cn)
 MergeJoin(it2 mi miidx t kt it mc ct)
 MergeJoin(mi miidx t kt it mc ct)
 MergeJoin(mi miidx t kt it mc)
 MergeJoin(mi miidx t kt it)
 NestLoop(miidx t kt it)
 MergeJoin(miidx t kt)
 HashJoin(t kt)
 SeqScan(it2)
 SeqScan(mi)
 IndexScan(miidx)
 IndexScan(t)
 SeqScan(kt)
 IndexScan(it)
 SeqScan(mc)
 SeqScan(ct)
 SeqScan(cn)
 Leading(((it2 (((mi ((miidx (t kt)) it)) mc) ct)) cn)) */
---------------------------------------
sql_str:  SELECT
    MIN(mi.info) AS release_date,
    MIN(miidx.info) AS rating,
    MIN(t.title) AS german_movie
FROM
    company_name AS cn,
    company_type AS ct,
    info_type AS it,
    info_type AS it2,
    kind_type AS kt,
    movie_companies AS mc,
    movie_info AS mi,
    movie_info_idx AS miidx,
    title AS t
WHERE
    cn.country_code = '[us]'
    AND ct.kind = 'production companies'
    AND it.info = 'rating'
    AND it2.info = 'release dates'
    AND kt.kind = 'movie'
    AND mi.movie_id = t.id
    AND it2.id = mi.info_type_id
    AND kt.id = t.kind_id
    AND mc.movie_id = t.id
    AND cn.id = mc.company_id
    AND ct.id = mc.company_type_id
    AND miidx.movie_id = t.id
    AND it.id = miidx.info_type_id
    AND mi.movie_id = miidx.movie_id
    AND mi.movie_id = mc.movie_id
    AND miidx.movie_id = mc.movie_id
GROUP BY
    cn.id,
    ct.id,
    kt.id
ORDER BY
    cn.name,
    kt.kind,
    ct.kind;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [0 1 1 0 1 0 1 0 3 3 4 3 4 3 4 4 3]
indexes_env_matrix for this sql:  [ 1  2 17  2  3 16  3  4 15  4  5 14  5  6 13  6  7 12  7  8 11  8  9 10
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0]
query_enc_matrix for this sql:  [0.         0.         0.         0.         0.         0.36416635
 0.25       0.         0.00884956 0.         0.00884956 0.
 0.         0.         0.         0.14285715 0.         1.
 1.         0.         0.         0.         0.         0.
 1.         0.         0.         0.         0.         0.
 1.         0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  148.08245452788572
Other difference exceed the threshold, need to switch module.
the difference value is:  148.08245452788572
Hash difference exceed the threshold, need to switch module.
the difference value is:  148.08245452788572
Nested loop difference exceed the threshold, need to switch module.
Planning took 134.6ms
qtest28c, predicted time: 2073.5
qtest28c,(predicted 2073.5),/*+ HashJoin(it2 mi cn miidx it t kt mc ct)
 HashJoin(mi cn miidx it t kt mc ct)
 HashJoin(cn miidx it t kt mc ct)
 HashJoin(miidx it t kt mc ct)
 HashJoin(miidx it t kt mc)
 HashJoin(miidx it t kt)
 HashJoin(miidx it t)
 HashJoin(miidx it)
 IndexScan(it2)
 SeqScan(mi)
 SeqScan(cn)
 IndexScan(miidx)
 IndexScan(it)
 IndexScan(t)
 IndexScan(kt)
 SeqScan(mc)
 IndexScan(ct)
 Leading((it2 (mi (cn (((((miidx it) t) kt) mc) ct))))) */
---------------------------------------
sql_str:  SELECT
    MIN(k.keyword) AS movie_keyword,
    MIN(n.name) AS actor_name,
    MIN(t.title) AS marvel_movie
FROM
    cast_info AS ci,
    keyword AS k,
    movie_keyword AS mk,
    name AS n,
    title AS t
WHERE
    k.keyword = 'marvel-cinematic-universe'
    AND n.name LIKE '%Downey%Robert%'
    AND t.production_year > 2000
    AND k.id = mk.keyword_id
    AND t.id = mk.movie_id
    AND t.id = ci.movie_id
    AND ci.movie_id = mk.movie_id
    AND n.id = ci.person_id
GROUP BY
    n.id,  
    t.id,
    k.id   
ORDER BY
    actor_name,
    movie_keyword,
    marvel_movie;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 4 4 4 4]
indexes_env_matrix for this sql:  [1 2 9 2 3 8 3 4 7 4 5 6 5 0 0 6 0 0 7 0 0 8 0 0 9 0 0]
query_enc_matrix for this sql:  [0.00000000e+00 1.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 7.45323086e-06 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 1.00000000e+00 0.00000000e+00 1.00060206e-04
 0.00000000e+00 0.00000000e+00 5.40744185e-01 0.00000000e+00
 0.00000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  149.7393519366593
Other difference exceed the threshold, need to switch module.
the difference value is:  149.7393519366593
Hash difference exceed the threshold, need to switch module.
the difference value is:  149.7393519366593
Nested loop difference exceed the threshold, need to switch module.
Planning took 63.6ms
qtest29a, predicted time: 2.3
qtest29a,(predicted 2.3),/*+ MergeJoin(k mk n ci t)
 MergeJoin(mk n ci t)
 NestLoop(n ci t)
 HashJoin(n ci)
 SeqScan(k)
 IndexScan(mk)
 IndexScan(n)
 SeqScan(ci)
 IndexScan(t)
 Leading((k (mk ((n ci) t)))) */
---------------------------------------
sql_str:  SELECT
    MAX(k.keyword) AS movie_keyword,
    MAX(n.name) AS actor_name,
    MAX(t.title) AS marvel_movie
FROM
    cast_info AS ci,
    keyword AS k,
    movie_keyword AS mk,
    name AS n,
    title AS t
WHERE
    k.keyword = 'marvel-cinematic-universe'
    AND n.name LIKE '%Downey%Robert%'
    AND t.production_year > 2000
    AND k.id = mk.keyword_id
    AND t.id = mk.movie_id
    AND t.id = ci.movie_id
    AND ci.movie_id = mk.movie_id
    AND n.id = ci.person_id
GROUP BY
    n.id,  
    t.id,
    k.id   
ORDER BY
    actor_name,
    movie_keyword,
    marvel_movie;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 4 4 4 4]
indexes_env_matrix for this sql:  [1 2 9 2 3 8 3 4 7 4 5 6 5 0 0 6 0 0 7 0 0 8 0 0 9 0 0]
query_enc_matrix for this sql:  [0.00000000e+00 1.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 7.45323086e-06 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 1.00000000e+00 0.00000000e+00 1.00060206e-04
 0.00000000e+00 0.00000000e+00 5.40744185e-01 0.00000000e+00
 0.00000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  138.64339623878155
Other difference exceed the threshold, need to switch module.
the difference value is:  138.64339623878155
Hash difference exceed the threshold, need to switch module.
the difference value is:  138.64339623878155
Nested loop difference exceed the threshold, need to switch module.
Planning took 76.0ms
qtest29b, predicted time: 6176.3
qtest29b,(predicted 6176.3),/*+ MergeJoin(t n ci k mk)
 MergeJoin(n ci k mk)
 MergeJoin(ci k mk)
 HashJoin(k mk)
 IndexScan(t)
 IndexScan(n)
 IndexScan(ci)
 IndexScan(k)
 IndexScan(mk)
 Leading((t (n (ci (k mk))))) */
---------------------------------------
sql_str:  SELECT
    MIN(k.keyword) AS movie_keyword,
    MIN(n.name) AS actor_name,
    MIN(t.title) AS marvel_movie
FROM
    cast_info AS ci,
    keyword AS k,
    movie_keyword AS mk,
    name AS n,
    title AS t
WHERE
    k.keyword = 'marvel-cinematic-universe'
    AND n.name LIKE '%Downey%Robert%'
    AND t.production_year > 2000
    AND k.id = mk.keyword_id
    AND t.id = mk.movie_id
    AND t.id = ci.movie_id
    AND ci.movie_id = mk.movie_id
    AND n.id = ci.person_id
GROUP BY
    n.id,  
    t.id,
    k.id   
ORDER BY
    actor_name,
    movie_keyword,
    marvel_movie;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 4 4 4 4]
indexes_env_matrix for this sql:  [1 2 9 2 3 8 3 4 7 4 5 6 5 0 0 6 0 0 7 0 0 8 0 0 9 0 0]
query_enc_matrix for this sql:  [0.00000000e+00 1.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 7.45323086e-06 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 1.00000000e+00 0.00000000e+00 1.00060206e-04
 0.00000000e+00 0.00000000e+00 5.40744185e-01 0.00000000e+00
 0.00000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  149.7393519366593
Other difference exceed the threshold, need to switch module.
the difference value is:  149.7393519366593
Hash difference exceed the threshold, need to switch module.
the difference value is:  149.7393519366593
Nested loop difference exceed the threshold, need to switch module.
Planning took 63.8ms
qtest29c, predicted time: 2.3
qtest29c,(predicted 2.3),/*+ MergeJoin(k mk n ci t)
 MergeJoin(mk n ci t)
 NestLoop(n ci t)
 HashJoin(n ci)
 SeqScan(k)
 IndexScan(mk)
 IndexScan(n)
 SeqScan(ci)
 IndexScan(t)
 Leading((k (mk ((n ci) t)))) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k,
movie_companies as mc,
company_type as ct,
company_name as cn
WHERE
t.id = ci.movie_id
AND t.id = mc.movie_id
AND t.id = mi1.movie_id
AND t.id = mk.movie_id
AND mc.company_type_id = ct.id
AND mc.company_id = cn.id
AND k.id = mk.keyword_id
AND mi1.info_type_id = it1.id
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (it1.id IN ('2'))
AND (mi1.info in ('Color'))
AND (kt.kind in ('movie','tv movie','tv series'))
AND (rt.role in ('actor','writer'))
AND (n.gender in ('m'))
AND (n.surname_pcode in ('B4','B6','C462','D12','D25','G65','H65','J525','K5','P6','P62','R3','S5') OR n.surname_pcode IS NULL)
AND (t.production_year <= 2015)
AND (t.production_year >= 1925)
AND (cn.name in ('Columbia Broadcasting System (CBS)','Fox Network','Independent Television (ITV)','Metro-Goldwyn-Mayer (MGM)','National Broadcasting Company (NBC)','Shout! Factory','Universal Pictures','Universal TV','Warner Bros'))
AND (ct.kind in ('distributors','production companies'))
GROUP BY 
    t.production_year, 
    cn.name
ORDER BY 
    t.production_year, 
    cn.name;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 0 1 1 3 4 4 3 3 4 4 4 3 4 5 4]
indexes_env_matrix for this sql:  [ 1  2 23  2  3 22  3  4 21  4  5 20  5  6 19  6  7 18  7  8 17  8  9 16
  9 10 15 10 11 14 11 12 13 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 4.2553736e-05 5.0000000e-01 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 4.2857143e-01 0.0000000e+00 1.0000000e+00 0.0000000e+00 6.4823278e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 1.0392488e-01 0.0000000e+00 1.6666667e-01
 9.3211162e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  176.66121964227997
Other difference exceed the threshold, need to switch module.
the difference value is:  176.66121964227997
Hash difference exceed the threshold, need to switch module.
the difference value is:  176.66121964227997
Nested loop difference exceed the threshold, need to switch module.
Planning took 478.6ms
qtest2a, predicted time: 4050.7
qtest2a,(predicted 4050.7),/*+ MergeJoin(k kt mk rt ci mc cn t ct mi1 n it1)
 MergeJoin(kt mk rt ci mc cn t ct mi1 n it1)
 MergeJoin(mk rt ci mc cn t ct mi1 n it1)
 MergeJoin(rt ci mc cn t ct mi1 n it1)
 MergeJoin(rt ci mc cn t ct mi1 n)
 MergeJoin(rt ci mc cn t ct mi1)
 MergeJoin(ci mc cn t ct mi1)
 HashJoin(ci mc cn t ct)
 MergeJoin(mc cn t ct)
 MergeJoin(mc cn t)
 HashJoin(mc cn)
 IndexScan(k)
 IndexScan(kt)
 IndexScan(mk)
 SeqScan(rt)
 SeqScan(ci)
 IndexScan(mc)
 IndexScan(cn)
 SeqScan(t)
 SeqScan(ct)
 IndexScan(mi1)
 IndexScan(n)
 SeqScan(it1)
 Leading((k (kt (mk (((rt ((ci (((mc cn) t) ct)) mi1)) n) it1))))) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k,
movie_companies as mc,
company_type as ct,
company_name as cn
WHERE
t.id = ci.movie_id
AND t.id = mc.movie_id
AND t.id = mi1.movie_id
AND t.id = mk.movie_id
AND mc.company_type_id = ct.id
AND mc.company_id = cn.id
AND k.id = mk.keyword_id
AND mi1.info_type_id = it1.id
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (it1.id IN ('2'))
AND (mi1.info in ('Color'))
AND (kt.kind in ('movie','tv movie','tv series'))
AND (rt.role in ('actress','writer'))
AND (n.gender in ('f'))
AND (n.surname_pcode in ('B4','B6','C462','D12','D25','G65','H65','J525','K5','P6','P62','R3','S5') OR n.surname_pcode IS NULL)
AND (t.production_year <= 2015)
AND (t.production_year >= 1925)
AND (cn.name in ('Columbia Broadcasting System (CBS)','Fox Network','Independent Television (ITV)','Metro-Goldwyn-Mayer (MGM)','National Broadcasting Company (NBC)','Shout! Factory','Universal Pictures','Universal TV','Warner Bros'))
AND (ct.kind in ('distributors','production companies'))
GROUP BY 
    t.production_year, 
    cn.name
ORDER BY 
    t.production_year, 
    cn.name;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 0 1 1 1 1 1 0 0 1 1 3 4 4 3 3 4 5 4 3 4 3 4]
indexes_env_matrix for this sql:  [ 1  2 23  2  3 22  3  4 21  4  5 20  5  6 19  6  7 18  7  8 17  8  9 16
  9 10 15 10 11 14 11 12 13 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 4.2553736e-05 5.0000000e-01 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 4.2857143e-01 0.0000000e+00 1.0000000e+00 0.0000000e+00 6.4823278e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 5.8955856e-02 0.0000000e+00 1.6666667e-01
 9.3211162e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  167.83136041815317
Other difference exceed the threshold, need to switch module.
the difference value is:  167.83136041815317
Hash difference exceed the threshold, need to switch module.
the difference value is:  167.83136041815317
Nested loop difference exceed the threshold, need to switch module.
Planning took 438.9ms
qtest2c, predicted time: 2.6
qtest2c,(predicted 2.6),/*+ MergeJoin(cn it1 mi1 ci kt t k mk n rt mc ct)
 MergeJoin(cn it1 mi1 ci kt t k mk n rt mc)
 MergeJoin(it1 mi1 ci kt t k mk n rt mc)
 MergeJoin(it1 mi1 ci kt t k mk n rt)
 MergeJoin(mi1 ci kt t k mk n rt)
 MergeJoin(mi1 ci kt t k mk n)
 MergeJoin(ci kt t k mk n)
 MergeJoin(ci kt t k mk)
 MergeJoin(kt t k mk)
 MergeJoin(t k mk)
 HashJoin(k mk)
 IndexScan(cn)
 IndexScan(it1)
 SeqScan(mi1)
 SeqScan(ci)
 IndexScan(kt)
 SeqScan(t)
 SeqScan(k)
 SeqScan(mk)
 IndexScan(n)
 IndexScan(rt)
 SeqScan(mc)
 SeqScan(ct)
 Leading(((cn ((it1 ((mi1 ((ci (kt (t (k mk)))) n)) rt)) mc)) ct)) */
---------------------------------------
sql_str:   SELECT
    MIN(mi.info) AS movie_budget,
    MIN(mi_idx.info) AS movie_votes,
    MIN(t.title) AS movie_title
FROM
    cast_info AS ci,
    info_type AS it1,
    info_type AS it2,
    movie_info AS mi,
    movie_info_idx AS mi_idx,
    name AS n,
    title AS t
WHERE
    ci.note in (
        '(writer)',
        '(head writer)',
        '(written by)',
        '(story)',
        '(story editor)'
    )
    AND it1.info = 'genres'
    AND it2.info = 'votes'
    AND mi.info in (
        'Horror',
        'Action',
        'Sci-Fi',
        'Thriller',
        'Crime',
        'War'
    )
    AND n.gender = 'm'
    AND t.id = mi.movie_id
    AND t.id = mi_idx.movie_id
    AND t.id = ci.movie_id
    AND ci.movie_id = mi.movie_id
    AND ci.movie_id = mi_idx.movie_id
    AND mi.movie_id = mi_idx.movie_id
    AND n.id = ci.person_id
    AND it1.id = mi.info_type_id
    AND it2.id = mi_idx.info_type_id
GROUP BY
    t.title,
    it1.info,
    n.gender
ORDER BY
    movie_budget,
    movie_votes,
    movie_title;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 0 1 0 3 3 4 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 13  2  3 12  3  4 11  4  5 10  5  6  9  6  7  8  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0]
query_enc_matrix for this sql:  [0.         0.03297477 0.         0.         0.         0.
 0.         0.         0.         0.00884956 0.00884956 0.
 0.         0.         0.         0.         0.         0.
 0.01406167 0.         0.         1.         0.         0.
 0.         0.         0.         0.41559657 0.         0.
 1.         0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  117.50881732548144
Other difference exceed the threshold, need to switch module.
the difference value is:  117.50881732548144
Hash difference exceed the threshold, need to switch module.
the difference value is:  117.50881732548144
Nested loop difference exceed the threshold, need to switch module.
Planning took 177.8ms
qtest30a, predicted time: 342.1
qtest30a,(predicted 342.1),/*+ HashJoin(mi_idx it1 n ci t mi it2)
 HashJoin(mi_idx it1 n ci t mi)
 HashJoin(it1 n ci t mi)
 HashJoin(n ci t mi)
 HashJoin(n ci t)
 MergeJoin(ci t)
 SeqScan(mi_idx)
 IndexScan(it1)
 IndexScan(n)
 SeqScan(ci)
 SeqScan(t)
 IndexScan(mi)
 IndexScan(it2)
 Leading(((mi_idx (it1 ((n (ci t)) mi))) it2)) */
---------------------------------------
sql_str:  SELECT
    MAX(mi.info) AS movie_budget,
    MAX(mi_idx.info) AS movie_votes,
    MAX(t.title) AS movie_title
FROM
    cast_info AS ci,
    info_type AS it1,
    info_type AS it2,
    movie_info AS mi,
    movie_info_idx AS mi_idx,
    name AS n,
    title AS t
WHERE
    ci.note in (
        '(writer)',
        '(head writer)',
        '(written by)',
        '(story)',
        '(story editor)'
    )
    AND it1.info = 'genres'
    AND it2.info = 'votes'
    AND mi.info in (
        'Horror',
        'Action',
        'Sci-Fi',
        'Thriller',
        'Crime',
        'War'
    )
    AND n.gender = 'm'
    AND t.id = mi.movie_id
    AND t.id = mi_idx.movie_id
    AND t.id = ci.movie_id
    AND ci.movie_id = mi.movie_id
    AND ci.movie_id = mi_idx.movie_id
    AND mi.movie_id = mi_idx.movie_id
    AND n.id = ci.person_id
    AND it1.id = mi.info_type_id
    AND it2.id = mi_idx.info_type_id
GROUP BY
    t.title,
    it1.info,
    n.gender
ORDER BY
    movie_budget,
    movie_votes,
    movie_title;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 0 1 0 3 3 4 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 13  2  3 12  3  4 11  4  5 10  5  6  9  6  7  8  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0]
query_enc_matrix for this sql:  [0.         0.03297477 0.         0.         0.         0.
 0.         0.         0.         0.00884956 0.00884956 0.
 0.         0.         0.         0.         0.         0.
 0.01406167 0.         0.         1.         0.         0.
 0.         0.         0.         0.41559657 0.         0.
 1.         0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  135.59781083887987
Other difference exceed the threshold, need to switch module.
the difference value is:  135.59781083887987
Hash difference exceed the threshold, need to switch module.
the difference value is:  135.59781083887987
Nested loop difference exceed the threshold, need to switch module.
Planning took 83.3ms
qtest30b, predicted time: 4.8
qtest30b,(predicted 4.8),/*+ MergeJoin(n mi_idx mi it1 ci t it2)
 MergeJoin(n mi_idx mi it1 ci t)
 MergeJoin(n mi_idx mi it1 ci)
 MergeJoin(mi_idx mi it1 ci)
 MergeJoin(mi_idx mi it1)
 NestLoop(mi it1)
 SeqScan(n)
 SeqScan(mi_idx)
 IndexScan(mi)
 IndexScan(it1)
 SeqScan(ci)
 SeqScan(t)
 SeqScan(it2)
 Leading((((n ((mi_idx (mi it1)) ci)) t) it2)) */
---------------------------------------
sql_str:  SELECT
    MIN(mi.info) AS movie_budget,
    MIN(mi_idx.info) AS movie_votes,
    MIN(t.title) AS movie_title
FROM
    cast_info AS ci,
    info_type AS it1,
    info_type AS it2,
    movie_info AS mi,
    movie_info_idx AS mi_idx,
    name AS n,
    title AS t
WHERE
    ci.note in ('(writer)', '(head writer)', '(story editor)')
    AND it1.info = 'genres'
    AND it2.info = 'votes'
    AND mi.info in (
        'Horror',
        'Action',
        'Sci-Fi',
        'Thriller',
        'Crime',
        'War'
    )
    AND n.gender = 'm'
    AND t.id = mi.movie_id
    AND t.id = mi_idx.movie_id
    AND t.id = ci.movie_id
    AND ci.movie_id = mi.movie_id
    AND ci.movie_id = mi_idx.movie_id
    AND mi.movie_id = mi_idx.movie_id
    AND n.id = ci.person_id
    AND it1.id = mi.info_type_id
    AND it2.id = mi_idx.info_type_id
GROUP BY
    t.title,
    it1.info,
    n.gender
ORDER BY
    movie_budget,
    movie_votes,
    movie_title;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 0 1 0 3 3 4 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 13  2  3 12  3  4 11  4  5 10  5  6  9  6  7  8  7  0  0  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0]
query_enc_matrix for this sql:  [0.         0.02268266 0.         0.         0.         0.
 0.         0.         0.         0.00884956 0.00884956 0.
 0.         0.         0.         0.         0.         0.
 0.01406167 0.         0.         1.         0.         0.
 0.         0.         0.         0.41559657 0.         0.
 1.         0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  117.50819514141833
Other difference exceed the threshold, need to switch module.
the difference value is:  117.50819514141833
Hash difference exceed the threshold, need to switch module.
the difference value is:  117.50819514141833
Nested loop difference exceed the threshold, need to switch module.
Planning took 261.5ms
qtest30c, predicted time: 314.8
qtest30c,(predicted 314.8),/*+ HashJoin(mi_idx it1 n ci t mi it2)
 HashJoin(mi_idx it1 n ci t mi)
 HashJoin(it1 n ci t mi)
 HashJoin(n ci t mi)
 HashJoin(n ci t)
 MergeJoin(ci t)
 SeqScan(mi_idx)
 IndexScan(it1)
 IndexScan(n)
 SeqScan(ci)
 SeqScan(t)
 IndexScan(mi)
 IndexScan(it2)
 Leading(((mi_idx (it1 ((n (ci t)) mi))) it2)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('7'))
AND (it2.id in ('8'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('MET:600 m','OFM:35 mm','PCS:Spherical','PFM:35 mm','RAT:1.37 : 1'))
AND (mi2.info in ('France','Germany','Japan','Mexico','Portugal','Spain','UK','USA'))
AND (kt.kind in ('tv series','video game','video movie'))
AND (rt.role in ('producer'))
AND (n.gender in ('m') OR n.gender IS NULL)
AND (t.production_year <= 1975)
AND (t.production_year >= 1925)
GROUP BY
    t.id,
    kt.id,
    it1.id
ORDER BY
    t.id,
    kt.id,
    it1.id;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 3 1 3 1 1 1 0 1 1 0 3 0 3 3 4 4 3 4 4 5]
indexes_env_matrix for this sql:  [ 1  2  3  2  0  0  3  4  5  4  0  0  5  6 21  6  7 20  7  8 19  8  9 18
  9 10 17 10 11 16 11 12 13 12  0  0 13 14 15 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.         1.         0.         0.         0.         0.
 0.         0.         0.         0.00884956 0.00884956 0.
 0.         0.         1.         0.42857143 0.         0.
 0.         0.00423404 0.00565136 0.         0.         0.
 0.         1.         0.         0.6193362  0.         0.08333334
 0.13999696 0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  165.15769577179603
Other difference exceed the threshold, need to switch module.
the difference value is:  165.15769577179603
Hash difference exceed the threshold, need to switch module.
the difference value is:  165.15769577179603
Nested loop difference exceed the threshold, need to switch module.
Planning took 466.7ms
qtest31a, predicted time: 2.7
qtest31a,(predicted 2.7),/*+ MergeJoin(k kt rt ci t mi1 it1 n mk mi2 it2)
 MergeJoin(kt rt ci t mi1 it1 n mk mi2 it2)
 MergeJoin(kt rt ci t mi1 it1 n mk mi2)
 MergeJoin(kt rt ci t mi1 it1 n mk)
 MergeJoin(rt ci t mi1 it1 n mk)
 MergeJoin(ci t mi1 it1 n mk)
 MergeJoin(ci t mi1 it1 n)
 MergeJoin(ci t mi1 it1)
 MergeJoin(t mi1 it1)
 HashJoin(mi1 it1)
 IndexScan(k)
 IndexScan(kt)
 SeqScan(rt)
 IndexScan(ci)
 IndexScan(t)
 IndexScan(mi1)
 IndexScan(it1)
 SeqScan(n)
 SeqScan(mk)
 IndexScan(mi2)
 IndexScan(it2)
 Leading((k (((kt (rt (((ci (t (mi1 it1))) n) mk))) mi2) it2))) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('7'))
AND (it2.id in ('8'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('MET:600 m','OFM:35 mm','PCS:Spherical','PFM:35 mm','RAT:1.37 : 1'))
AND (mi2.info in ('France','Germany','Japan','Mexico','Portugal','Spain','UK','USA'))
AND (kt.kind in ('tv series','video game','video movie'))
AND (rt.role in ('producer'))
AND (n.gender in ('m') OR n.gender IS NULL)
AND (t.production_year <= 2000)
AND (t.production_year >= 1925)
GROUP BY
    t.id,
    kt.id,
    it1.id
ORDER BY
    t.id,
    kt.id,
    it1.id;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 3 1 3 1 1 1 0 1 1 0 1 3 4 3 4 4 3 4 4 5]
indexes_env_matrix for this sql:  [ 1  2  3  2  0  0  3  4  5  4  0  0  5  6 21  6  7 20  7  8 19  8  9 18
  9 10 17 10 11 16 11 12 15 12 13 14 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.         1.         0.         0.         0.         0.
 0.         0.         0.         0.00884956 0.00884956 0.
 0.         0.         1.         0.42857143 0.         0.
 0.         0.00423404 0.00565136 0.         0.         0.
 0.         1.         0.         0.6193362  0.         0.08333334
 0.39137694 0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  173.08771416040116
Other difference exceed the threshold, need to switch module.
the difference value is:  173.08771416040116
Hash difference exceed the threshold, need to switch module.
the difference value is:  173.08771416040116
Nested loop difference exceed the threshold, need to switch module.
Planning took 1144.0ms
qtest31b, predicted time: 6968.4
qtest31b,(predicted 6968.4),/*+ HashJoin(k mk kt n ci mi2 t mi1 rt it1 it2)
 MergeJoin(mk kt n ci mi2 t mi1 rt it1 it2)
 HashJoin(kt n ci mi2 t mi1 rt it1 it2)
 MergeJoin(kt n ci mi2 t mi1 rt it1)
 MergeJoin(n ci mi2 t mi1 rt it1)
 MergeJoin(n ci mi2 t mi1 rt)
 MergeJoin(ci mi2 t mi1 rt)
 MergeJoin(ci mi2 t mi1)
 MergeJoin(mi2 t mi1)
 HashJoin(mi2 t)
 IndexScan(k)
 SeqScan(mk)
 SeqScan(kt)
 IndexScan(n)
 SeqScan(ci)
 IndexScan(mi2)
 SeqScan(t)
 IndexScan(mi1)
 SeqScan(rt)
 SeqScan(it1)
 IndexScan(it2)
 Leading((k (mk ((kt ((n ((ci ((mi2 t) mi1)) rt)) it1)) it2)))) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('7'))
AND (it2.id in ('18'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('OFM:35 mm','OFM:Live','PFM:35 mm','RAT:1.33 : 1'))
AND (mi2.info in ('20th Century Fox Studios - 10201 Pico Blvd., Century City, Los Angeles, California, USA','Desilu Studios - 9336 W. Washington Blvd., Culver City, California, USA','Hal Roach Studios - 8822 Washington Blvd., Culver City, California, USA','New York City, New York, USA','Revue Studios, Hollywood, Los Angeles, California, USA','Universal Studios - 100 Universal City Plaza, Universal City, California, USA','Warner Brothers Burbank Studios - 4000 Warner Boulevard, Burbank, California, USA'))
AND (kt.kind in ('tv series','video game','video movie'))
AND (rt.role in ('actress','writer'))
AND (n.gender in ('f','m'))
AND (t.production_year <= 1975)
AND (t.production_year >= 1925)
GROUP BY
    k.id,
    n.id,
    t.id
ORDER BY
    k.id,
    n.id,
    t.id;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 1 0 1 3 4 3 4 3 3 4 4 4 4 5]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 4.2857143e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 4.5711971e-03
 5.4193526e-05 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 6.5136147e-01 0.0000000e+00 1.6666667e-01
 1.3999696e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  154.2207625301137
Other difference exceed the threshold, need to switch module.
the difference value is:  154.2207625301137
Hash difference exceed the threshold, need to switch module.
the difference value is:  154.2207625301137
Nested loop difference exceed the threshold, need to switch module.
Planning took 696.9ms
qtest32a, predicted time: 2.9
qtest32a,(predicted 2.9),/*+ MergeJoin(k kt rt ci t mi1 it1 n mk mi2 it2)
 MergeJoin(kt rt ci t mi1 it1 n mk mi2 it2)
 MergeJoin(kt rt ci t mi1 it1 n mk mi2)
 MergeJoin(kt rt ci t mi1 it1 n mk)
 MergeJoin(rt ci t mi1 it1 n mk)
 MergeJoin(ci t mi1 it1 n mk)
 MergeJoin(ci t mi1 it1 n)
 MergeJoin(ci t mi1 it1)
 MergeJoin(t mi1 it1)
 HashJoin(mi1 it1)
 IndexScan(k)
 IndexScan(kt)
 SeqScan(rt)
 IndexScan(ci)
 IndexScan(t)
 IndexScan(mi1)
 IndexScan(it1)
 SeqScan(n)
 SeqScan(mk)
 IndexScan(mi2)
 IndexScan(it2)
 Leading((k (((kt (rt (((ci (t (mi1 it1))) n) mk))) mi2) it2))) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('7'))
AND (it2.id in ('18'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('OFM:35 mm','OFM:Live','PFM:35 mm','RAT:1.33 : 1'))
AND (mi2.info in ('20th Century Fox Studios - 10201 Pico Blvd., Century City, Los Angeles, California, USA','Desilu Studios - 9336 W. Washington Blvd., Culver City, California, USA','Hal Roach Studios - 8822 Washington Blvd., Culver City, California, USA','New York City, New York, USA','Revue Studios, Hollywood, Los Angeles, California, USA','Universal Studios - 100 Universal City Plaza, Universal City, California, USA','Warner Brothers Burbank Studios - 4000 Warner Boulevard, Burbank, California, USA'))
AND (kt.kind in ('tv series','video game','video movie'))
AND (rt.role in ('actress','writer'))
AND (n.gender in ('f','m'))
AND (t.production_year <= 2000)
AND (t.production_year >= 1950)
GROUP BY
    k.id,
    n.id,
    t.id
ORDER BY
    k.id,
    n.id,
    t.id;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 0 1 1 1 1 0 1 3 4 3 4 3 3 4 3 4 4 5]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 4.2857143e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 4.5711971e-03
 5.4193526e-05 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 6.5136147e-01 0.0000000e+00 1.6666667e-01
 3.6568391e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  166.12781217934509
Other difference exceed the threshold, need to switch module.
the difference value is:  166.12781217934509
Hash difference exceed the threshold, need to switch module.
the difference value is:  166.12781217934509
Nested loop difference exceed the threshold, need to switch module.
Planning took 1286.7ms
qtest32b, predicted time: 7316.7
qtest32b,(predicted 7316.7),/*+ MergeJoin(it2 kt n ci mi2 t mi1 rt it1 mk k)
 HashJoin(it2 kt n ci mi2 t mi1 rt it1 mk)
 MergeJoin(it2 kt n ci mi2 t mi1 rt it1)
 MergeJoin(kt n ci mi2 t mi1 rt it1)
 MergeJoin(n ci mi2 t mi1 rt it1)
 MergeJoin(n ci mi2 t mi1 rt)
 MergeJoin(ci mi2 t mi1 rt)
 MergeJoin(ci mi2 t mi1)
 MergeJoin(mi2 t mi1)
 HashJoin(mi2 t)
 IndexScan(it2)
 SeqScan(kt)
 IndexScan(n)
 SeqScan(ci)
 IndexScan(mi2)
 SeqScan(t)
 IndexScan(mi1)
 SeqScan(rt)
 SeqScan(it1)
 IndexScan(mk)
 IndexScan(k)
 Leading((((it2 (kt ((n ((ci ((mi2 t) mi1)) rt)) it1))) mk) k)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('7'))
AND (it2.id in ('18'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('OFM:35 mm','OFM:Live','PFM:35 mm','RAT:1.33 : 1'))
AND (mi2.info in ('20th Century Fox Studios - 10201 Pico Blvd., Century City, Los Angeles, California, USA','Desilu Studios - 9336 W. Washington Blvd., Culver City, California, USA','Hal Roach Studios - 8822 Washington Blvd., Culver City, California, USA','New York City, New York, USA','Revue Studios, Hollywood, Los Angeles, California, USA','Universal Studios - 100 Universal City Plaza, Universal City, California, USA','Warner Brothers Burbank Studios - 4000 Warner Boulevard, Burbank, California, USA'))
AND (kt.kind in ('tv series','video game','video movie'))
AND (rt.role in ('actress','writer'))
AND (n.gender in ('f'))
AND (t.production_year <= 1975)
AND (t.production_year >= 1925)
GROUP BY
    k.id,
    n.id,
    t.id
ORDER BY
    k.id,
    n.id,
    t.id;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 1 0 1 3 4 3 4 3 3 4 4 4 4 5]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 4.2857143e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 4.5711971e-03
 5.4193526e-05 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 2.3576464e-01 0.0000000e+00 1.6666667e-01
 1.3999696e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  153.83764617476422
Other difference exceed the threshold, need to switch module.
the difference value is:  153.83764617476422
Hash difference exceed the threshold, need to switch module.
the difference value is:  153.83764617476422
Nested loop difference exceed the threshold, need to switch module.
Planning took 438.7ms
qtest32c, predicted time: 2.9
qtest32c,(predicted 2.9),/*+ MergeJoin(kt rt ci t mi1 it1 n mk mi2 it2 k)
 MergeJoin(kt rt ci t mi1 it1 n mk mi2 it2)
 MergeJoin(kt rt ci t mi1 it1 n mk mi2)
 MergeJoin(kt rt ci t mi1 it1 n mk)
 MergeJoin(rt ci t mi1 it1 n mk)
 MergeJoin(ci t mi1 it1 n mk)
 MergeJoin(ci t mi1 it1 n)
 MergeJoin(ci t mi1 it1)
 MergeJoin(t mi1 it1)
 HashJoin(mi1 it1)
 IndexScan(kt)
 SeqScan(rt)
 IndexScan(ci)
 IndexScan(t)
 IndexScan(mi1)
 IndexScan(it1)
 SeqScan(n)
 SeqScan(mk)
 IndexScan(mi2)
 IndexScan(it2)
 SeqScan(k)
 Leading(((((kt (rt (((ci (t (mi1 it1))) n) mk))) mi2) it2) k)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('7'))
AND (it2.id in ('3'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('PCS:Spherical','PFM:16 mm','PFM:35 mm','RAT:1.33 : 1','RAT:1.66 : 1','RAT:1.85 : 1'))
AND (mi2.info in ('Adult','Comedy','Documentary','Drama','Mystery','Romance','Short','Thriller','Western'))
AND (kt.kind in ('tv series','video game','video movie'))
AND (rt.role in ('miscellaneous crew','producer'))
AND (n.gender in ('f','m'))
AND (t.production_year <= 1990)
AND (t.production_year >= 1950)
GROUP BY
    k.id,
    n.id,
    t.id
ORDER BY
    k.id,
    n.id,
    t.id;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 3 1 3 1 1 1 0 1 1 0 1 3 4 3 4 4 3 4 4 5]
indexes_env_matrix for this sql:  [ 1  2  3  2  0  0  3  4  5  4  0  0  5  6 21  6  7 20  7  8 19  8  9 18
  9 10 17 10 11 16 11 12 15 12 13 14 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.         1.         0.         0.         0.         0.
 0.         0.         0.         0.00884956 0.00884956 0.
 0.         0.         1.         0.42857143 0.         0.
 0.         0.00405602 0.00881218 0.         0.         0.
 0.         1.         0.         0.65136147 0.         0.16666667
 0.2157827  0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  173.04462414342657
Other difference exceed the threshold, need to switch module.
the difference value is:  173.04462414342657
Hash difference exceed the threshold, need to switch module.
the difference value is:  173.04462414342657
Nested loop difference exceed the threshold, need to switch module.
Planning took 1350.6ms
qtest33a, predicted time: 6850.0
qtest33a,(predicted 6850.0),/*+ MergeJoin(k mk it1 kt rt mi1 ci mi2 t n it2)
 MergeJoin(mk it1 kt rt mi1 ci mi2 t n it2)
 HashJoin(it1 kt rt mi1 ci mi2 t n it2)
 MergeJoin(it1 kt rt mi1 ci mi2 t n)
 MergeJoin(kt rt mi1 ci mi2 t n)
 MergeJoin(rt mi1 ci mi2 t n)
 MergeJoin(rt mi1 ci mi2 t)
 MergeJoin(mi1 ci mi2 t)
 MergeJoin(ci mi2 t)
 HashJoin(mi2 t)
 IndexScan(k)
 IndexScan(mk)
 SeqScan(it1)
 SeqScan(kt)
 SeqScan(rt)
 IndexScan(mi1)
 SeqScan(ci)
 IndexScan(mi2)
 SeqScan(t)
 IndexScan(n)
 IndexScan(it2)
 Leading((k (mk ((it1 (kt ((rt (mi1 (ci (mi2 t)))) n))) it2)))) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('7'))
AND (it2.id in ('3'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('PCS:Spherical','PFM:16 mm','PFM:35 mm','RAT:1.33 : 1','RAT:1.66 : 1','RAT:1.85 : 1'))
AND (mi2.info in ('Adult','Comedy','Documentary','Drama','Mystery','Romance','Short','Thriller','Western'))
AND (kt.kind in ('tv series','video game','video movie'))
AND (rt.role in ('miscellaneous crew','producer'))
AND (n.gender in ('m'))
AND (t.production_year <= 1990)
AND (t.production_year >= 1950)
GROUP BY
    k.id,
    n.id,
    t.id
ORDER BY
    k.id,
    n.id,
    t.id;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 3 1 3 1 1 1 0 1 1 0 1 3 4 3 4 4 3 4 4 5]
indexes_env_matrix for this sql:  [ 1  2  3  2  0  0  3  4  5  4  0  0  5  6 21  6  7 20  7  8 19  8  9 18
  9 10 17 10 11 16 11 12 15 12 13 14 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.         1.         0.         0.         0.         0.
 0.         0.         0.         0.00884956 0.00884956 0.
 0.         0.         1.         0.42857143 0.         0.
 0.         0.00405602 0.00881218 0.         0.         0.
 0.         1.         0.         0.41559657 0.         0.16666667
 0.2157827  0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  163.98891827819602
Other difference exceed the threshold, need to switch module.
the difference value is:  163.98891827819602
Hash difference exceed the threshold, need to switch module.
the difference value is:  163.98891827819602
Nested loop difference exceed the threshold, need to switch module.
Planning took 411.5ms
qtest33b, predicted time: 2.7
qtest33b,(predicted 2.7),/*+ MergeJoin(k rt ci t mi1 it1 n mk kt mi2 it2)
 MergeJoin(rt ci t mi1 it1 n mk kt mi2 it2)
 MergeJoin(rt ci t mi1 it1 n mk kt mi2)
 MergeJoin(rt ci t mi1 it1 n mk kt)
 MergeJoin(rt ci t mi1 it1 n mk)
 MergeJoin(ci t mi1 it1 n mk)
 MergeJoin(ci t mi1 it1 n)
 MergeJoin(ci t mi1 it1)
 MergeJoin(t mi1 it1)
 HashJoin(mi1 it1)
 IndexScan(k)
 SeqScan(rt)
 IndexScan(ci)
 IndexScan(t)
 IndexScan(mi1)
 IndexScan(it1)
 SeqScan(n)
 SeqScan(mk)
 SeqScan(kt)
 SeqScan(mi2)
 IndexScan(it2)
 Leading((k ((((rt (((ci (t (mi1 it1))) n) mk)) kt) mi2) it2))) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('7'))
AND (it2.id in ('3'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('PFM:35 mm','RAT:1.33 : 1','RAT:1.66 : 1','RAT:1.85 : 1'))
AND (mi2.info in ('Adult','Comedy','Documentary','Drama','Mystery','Romance','Short','Thriller','Western'))
AND (kt.kind in ('tv series','video game','video movie'))
AND (rt.role in ('miscellaneous crew','producer'))
AND (n.gender in ('f','m'))
AND (t.production_year <= 1990)
AND (t.production_year >= 1950)
GROUP BY
    k.id,
    n.id,
    t.id
ORDER BY
    k.id,
    n.id,
    t.id;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 3 1 3 1 1 1 0 1 1 0 1 3 4 3 4 4 3 4 4 5]
indexes_env_matrix for this sql:  [ 1  2  3  2  0  0  3  4  5  4  0  0  5  6 21  6  7 20  7  8 19  8  9 18
  9 10 17 10 11 16 11 12 15 12 13 14 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.         1.         0.         0.         0.         0.
 0.         0.         0.         0.00884956 0.00884956 0.
 0.         0.         1.         0.42857143 0.         0.
 0.         0.003226   0.00881218 0.         0.         0.
 0.         1.         0.         0.65136147 0.         0.16666667
 0.2157827  0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  173.04461835152858
Other difference exceed the threshold, need to switch module.
the difference value is:  173.04461835152858
Hash difference exceed the threshold, need to switch module.
the difference value is:  173.04461835152858
Nested loop difference exceed the threshold, need to switch module.
Planning took 1416.4ms
qtest33c, predicted time: 6849.8
qtest33c,(predicted 6849.8),/*+ MergeJoin(k mk it1 kt rt mi1 ci mi2 t n it2)
 MergeJoin(mk it1 kt rt mi1 ci mi2 t n it2)
 HashJoin(it1 kt rt mi1 ci mi2 t n it2)
 MergeJoin(it1 kt rt mi1 ci mi2 t n)
 MergeJoin(kt rt mi1 ci mi2 t n)
 MergeJoin(rt mi1 ci mi2 t n)
 MergeJoin(rt mi1 ci mi2 t)
 MergeJoin(mi1 ci mi2 t)
 MergeJoin(ci mi2 t)
 HashJoin(mi2 t)
 IndexScan(k)
 IndexScan(mk)
 SeqScan(it1)
 SeqScan(kt)
 SeqScan(rt)
 IndexScan(mi1)
 SeqScan(ci)
 IndexScan(mi2)
 SeqScan(t)
 IndexScan(n)
 IndexScan(it2)
 Leading((k (mk ((it1 (kt ((rt (mi1 (ci (mi2 t)))) n))) it2)))) */
---------------------------------------
sql_str:   SELECT COUNT(*) FROM title as t,
kind_type as kt,
movie_info as mi1,
info_type as it1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND it1.id = '8'
AND it2.id = '4'
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND mi1.info IN ('Brazil','India','Ireland','Italy','Netherlands','Philippines','Poland','USA')
AND mi2.info IN ('English','French','Italian','Malayalam','Polish','Portuguese','Tagalog')
AND kt.kind IN ('tv movie','tv series','video game')
AND rt.role IN ('cinematographer','composer')
AND n.gender IN ('m')
AND t.production_year <= 2015
AND 1990 < t.production_year
GROUP BY
    t.id,
    kt.id,
    it1.id
ORDER BY
    t.id,
    kt.id,
    it1.id;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 3 1 3 1 0 1 1 0 1 3 4 3 4 4 3 4]
indexes_env_matrix for this sql:  [ 1  2  3  2  0  0  3  4  5  4  0  0  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0]
query_enc_matrix for this sql:  [0.         1.         0.         0.         0.         0.
 0.         0.         0.         0.00884956 0.00884956 0.
 0.         0.         0.         0.42857143 0.         0.
 0.         0.00396671 0.00488409 0.         0.         0.
 0.         0.         0.         0.41559657 0.         0.16666667
 0.69063586 0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  141.22219112909883
Other difference exceed the threshold, need to switch module.
the difference value is:  141.22219112909883
Hash difference exceed the threshold, need to switch module.
the difference value is:  141.22219112909883
Nested loop difference exceed the threshold, need to switch module.
Planning took 508.7ms
qtest34a, predicted time: 4.5
qtest34a,(predicted 4.5),/*+ MergeJoin(kt ci t mi1 it1 n rt mi2 it2)
 MergeJoin(kt ci t mi1 it1 n rt mi2)
 MergeJoin(kt ci t mi1 it1 n rt)
 MergeJoin(ci t mi1 it1 n rt)
 MergeJoin(ci t mi1 it1 n)
 MergeJoin(ci t mi1 it1)
 MergeJoin(t mi1 it1)
 HashJoin(mi1 it1)
 IndexScan(kt)
 IndexScan(ci)
 IndexScan(t)
 IndexScan(mi1)
 IndexScan(it1)
 SeqScan(n)
 IndexScan(rt)
 SeqScan(mi2)
 IndexScan(it2)
 Leading((((kt (((ci (t (mi1 it1))) n) rt)) mi2) it2)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
movie_info as mi1,
info_type as it1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND it1.id = '8'
AND it2.id = '4'
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND mi1.info IN ('Italy','Netherlands','Philippines','Poland','USA')
AND mi2.info IN ('English','French','Italian','Malayalam','Polish','Portuguese','Tagalog')
AND kt.kind IN ('tv movie','tv series','video game')
AND rt.role IN ('cinematographer','composer')
AND n.gender IN ('m')
AND t.production_year <= 2015
AND 1990 < t.production_year
GROUP BY
    t.id,
    kt.id,
    it1.id
ORDER BY
    t.id,
    kt.id,
    it1.id;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 3 1 3 1 0 1 1 0 1 3 4 3 4 4 3 4]
indexes_env_matrix for this sql:  [ 1  2  3  2  0  0  3  4  5  4  0  0  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0]
query_enc_matrix for this sql:  [0.         1.         0.         0.         0.         0.
 0.         0.         0.         0.00884956 0.00884956 0.
 0.         0.         0.         0.42857143 0.         0.
 0.         0.00368482 0.00488409 0.         0.         0.
 0.         0.         0.         0.41559657 0.         0.16666667
 0.69063586 0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  152.16388883734018
Other difference exceed the threshold, need to switch module.
the difference value is:  152.16388883734018
Hash difference exceed the threshold, need to switch module.
the difference value is:  152.16388883734018
Nested loop difference exceed the threshold, need to switch module.
Planning took 969.5ms
qtest34b, predicted time: 5366.5
qtest34b,(predicted 5366.5),/*+ MergeJoin(ci mi1 mi2 t kt rt n it1 it2)
 MergeJoin(ci mi1 mi2 t kt rt n it1)
 MergeJoin(ci mi1 mi2 t kt rt n)
 MergeJoin(ci mi1 mi2 t kt rt)
 MergeJoin(ci mi1 mi2 t kt)
 MergeJoin(mi1 mi2 t kt)
 MergeJoin(mi1 mi2 t)
 HashJoin(mi2 t)
 SeqScan(ci)
 SeqScan(mi1)
 IndexScan(mi2)
 IndexScan(t)
 SeqScan(kt)
 SeqScan(rt)
 SeqScan(n)
 IndexScan(it1)
 IndexScan(it2)
 Leading((((((ci ((mi1 (mi2 t)) kt)) rt) n) it1) it2)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
movie_info as mi1,
info_type as it1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND it1.id = '8'
AND it2.id = '4'
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND mi1.info IN ('Brazil','India','Ireland','Italy','Netherlands','Philippines','Poland','USA')
AND mi2.info IN ('English','French','Italian','Malayalam','Polish','Portuguese','Tagalog')
AND kt.kind IN ('tv movie','tv series','video game')
AND rt.role IN ('cinematographer','composer')
AND n.gender IN ('m')
AND t.production_year <= 2015
AND 2000 < t.production_year
GROUP BY
    t.id,
    kt.id,
    it1.id
ORDER BY
    t.id,
    kt.id,
    it1.id;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 3 1 3 1 0 1 1 0 1 3 4 3 4 4 3 4]
indexes_env_matrix for this sql:  [ 1  2  3  2  0  0  3  4  5  4  0  0  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0]
query_enc_matrix for this sql:  [0.         1.         0.         0.         0.         0.
 0.         0.         0.         0.00884956 0.00884956 0.
 0.         0.         0.         0.42857143 0.         0.
 0.         0.00396671 0.00488409 0.         0.         0.
 0.         0.         0.         0.41559657 0.         0.16666667
 0.5407347  0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  140.99392789759352
Other difference exceed the threshold, need to switch module.
the difference value is:  140.99392789759352
Hash difference exceed the threshold, need to switch module.
the difference value is:  140.99392789759352
Nested loop difference exceed the threshold, need to switch module.
Planning took 455.1ms
qtest34c, predicted time: 4.4
qtest34c,(predicted 4.4),/*+ MergeJoin(kt ci t mi1 it1 n rt mi2 it2)
 MergeJoin(kt ci t mi1 it1 n rt mi2)
 MergeJoin(kt ci t mi1 it1 n rt)
 MergeJoin(ci t mi1 it1 n rt)
 MergeJoin(ci t mi1 it1 n)
 MergeJoin(ci t mi1 it1)
 MergeJoin(t mi1 it1)
 HashJoin(mi1 it1)
 IndexScan(kt)
 IndexScan(ci)
 IndexScan(t)
 IndexScan(mi1)
 IndexScan(it1)
 SeqScan(n)
 IndexScan(rt)
 SeqScan(mi2)
 IndexScan(it2)
 Leading((((kt (((ci (t (mi1 it1))) n) rt)) mi2) it2)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
movie_info as mi1,
info_type as it1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND it1.id = '3'
AND it2.id = '7'
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND mi1.info IN ('Comedy','Crime','Fantasy','Mystery','Short')
AND mi2.info IN ('LAB:FotoKem Laboratory, Burbank (CA), USA','MET:','MET:300 m','PCS:Spherical','RAT:1.33 : 1','RAT:1.66 : 1')
AND kt.kind IN ('movie','video movie')
AND rt.role IN ('miscellaneous crew')
AND n.gender IN ('f')
AND t.production_year <= 2015
AND 1950 < t.production_year
GROUP BY t.id, kt.id, rt.role
ORDER BY t.id, kt.id, rt.role;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 3 1 3 1 0 1 1 0 1 3 4 3 4 4 3 4]
indexes_env_matrix for this sql:  [ 1  2  3  2  0  0  3  4  5  4  0  0  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0]
query_enc_matrix for this sql:  [0.         1.         0.         0.         0.         0.
 0.         0.         0.         0.00884956 0.00884956 0.
 0.         0.         0.         0.2857143  0.         0.
 0.         0.00499167 0.00235371 0.         0.         0.
 0.         0.         0.         0.23576464 0.         0.08333334
 0.9038208  0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  152.2751874242348
Other difference exceed the threshold, need to switch module.
the difference value is:  152.2751874242348
Hash difference exceed the threshold, need to switch module.
the difference value is:  152.2751874242348
Nested loop difference exceed the threshold, need to switch module.
Planning took 542.4ms
qtest35b, predicted time: 4815.5
qtest35b,(predicted 4815.5),/*+ MergeJoin(n mi1 kt t mi2 ci rt it1 it2)
 MergeJoin(n mi1 kt t mi2 ci rt it1)
 MergeJoin(n mi1 kt t mi2 ci rt)
 MergeJoin(n mi1 kt t mi2 ci)
 MergeJoin(mi1 kt t mi2 ci)
 MergeJoin(mi1 kt t mi2)
 MergeJoin(kt t mi2)
 HashJoin(t mi2)
 IndexScan(n)
 IndexScan(mi1)
 SeqScan(kt)
 SeqScan(t)
 IndexScan(mi2)
 SeqScan(ci)
 SeqScan(rt)
 IndexScan(it1)
 IndexScan(it2)
 Leading(((((n ((mi1 (kt (t mi2))) ci)) rt) it1) it2)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
movie_info as mi1,
info_type as it1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND it1.id = '3'
AND it2.id = '7'
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND mi1.info IN ('Fantasy','Mystery','Short')
AND mi2.info IN ('LAB:FotoKem Laboratory, Burbank (CA), USA','MET:','MET:300 m','PCS:Spherical','RAT:1.33 : 1','RAT:1.66 : 1')
AND kt.kind IN ('episode','movie','video movie')
AND rt.role IN ('miscellaneous crew')
AND n.gender IN ('f')
AND t.production_year <= 2015
AND 1925 < t.production_year
GROUP BY t.id, kt.id, rt.role
ORDER BY t.id, kt.id, rt.role;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 3 1 3 1 0 1 1 0 1 3 4 3 4 4 3 4]
indexes_env_matrix for this sql:  [ 1  2  3  2  0  0  3  4  5  4  0  0  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0]
query_enc_matrix for this sql:  [0.         1.         0.         0.         0.         0.
 0.         0.         0.         0.00884956 0.00884956 0.
 0.         0.         0.         0.42857143 0.         0.
 0.         0.00326705 0.00235371 0.         0.         0.
 0.         0.         0.         0.23576464 0.         0.08333334
 0.9303472  0.         0.        ]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  141.52414299351022
Other difference exceed the threshold, need to switch module.
the difference value is:  141.52414299351022
Hash difference exceed the threshold, need to switch module.
the difference value is:  141.52414299351022
Nested loop difference exceed the threshold, need to switch module.
Planning took 262.1ms
qtest35c, predicted time: 4.5
qtest35c,(predicted 4.5),/*+ MergeJoin(kt ci t mi1 it1 n rt mi2 it2)
 MergeJoin(kt ci t mi1 it1 n rt mi2)
 MergeJoin(kt ci t mi1 it1 n rt)
 MergeJoin(ci t mi1 it1 n rt)
 MergeJoin(ci t mi1 it1 n)
 MergeJoin(ci t mi1 it1)
 MergeJoin(t mi1 it1)
 HashJoin(mi1 it1)
 IndexScan(kt)
 IndexScan(ci)
 IndexScan(t)
 IndexScan(mi1)
 IndexScan(it1)
 SeqScan(n)
 IndexScan(rt)
 IndexScan(mi2)
 IndexScan(it2)
 Leading((((kt (((ci (t (mi1 it1))) n) rt)) mi2) it2)) */
---------------------------------------
sql_str:   SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
movie_keyword as mk,
keyword as k,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND t.id = mk.movie_id
AND mk.keyword_id = k.id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('episode','movie'))
AND (t.production_year <= 2015)
AND (t.production_year >= 1925)
AND (mi1.info IN ('Austria','Czechoslovakia','Denmark','Hong Kong','Poland','Portugal','South Korea','Soviet Union','Sweden','Switzerland','Turkey','Yugoslavia'))
AND (it1.id IN ('15','8','97'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 8.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 1000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND rt.id = ci.role_id
AND (n.gender IS NULL)
AND (n.name_pcode_nf in ('A4163','A4253','A5362','A6532','C5321','C6231','C6235','R516','R5316','S3152','S3521') OR n.name_pcode_nf IS NULL)
AND (ci.note in ('(deviser)','(producer)','(production assistant)','(senior producer)','(supervising producer)','(writer)') OR ci.note IS NULL)
AND (rt.role in ('cinematographer','composer','director','editor','miscellaneous crew','producer','production designer','writer'))
AND (it5.id in ('19'))
GROUP BY t.production_year,  kt.kind, n.gender
ORDER BY t.production_year,  kt.kind, n.gender;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 4 4 5 5 3 4 4 5 3]
indexes_env_matrix for this sql:  [ 1  2 31  2  3 30  3  4 29  4  5  6  5  0  0  6  7 28  7  8 27  8  9 26
  9 10 25 10 11 24 11 12 23 12 13 22 13 14 21 14 15 20 15 16 19 16 17 18
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0 28  0  0 29  0  0 30  0  0 31  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 6.3671482e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 1.0000000e+00
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.6084343e-03
 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04 0.0000000e+00
 1.0000000e+00 0.0000000e+00 1.6735010e-02 2.8182682e-02 6.6666669e-01
 9.3211162e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  215.30956653524342
Other difference exceed the threshold, need to switch module.
the difference value is:  215.30956653524342
Hash difference exceed the threshold, need to switch module.
the difference value is:  215.30956653524342
Nested loop difference exceed the threshold, need to switch module.
Planning took 1514.2ms
qtest36a, predicted time: 4178.3
qtest36a,(predicted 4178.3),/*+ NestLoop(it1 rt n ci it4 mi1 mii1 it3 t mii2 kt pi1 it5 mk k an)
 NestLoop(it1 rt n ci it4 mi1 mii1 it3 t mii2 kt pi1 it5 mk k)
 NestLoop(it1 rt n ci it4 mi1 mii1 it3 t mii2 kt pi1 it5 mk)
 NestLoop(it1 rt n ci it4 mi1 mii1 it3 t mii2 kt pi1 it5)
 NestLoop(it1 rt n ci it4 mi1 mii1 it3 t mii2 kt pi1)
 HashJoin(it1 rt n ci it4 mi1 mii1 it3 t mii2 kt)
 MergeJoin(rt n ci it4 mi1 mii1 it3 t mii2 kt)
 MergeJoin(n ci it4 mi1 mii1 it3 t mii2 kt)
 MergeJoin(ci it4 mi1 mii1 it3 t mii2 kt)
 MergeJoin(it4 mi1 mii1 it3 t mii2 kt)
 MergeJoin(it4 mi1 mii1 it3 t mii2)
 MergeJoin(mi1 mii1 it3 t mii2)
 MergeJoin(mi1 mii1 it3 t)
 MergeJoin(mii1 it3 t)
 HashJoin(mii1 it3)
 IndexScan(it1)
 IndexScan(rt)
 IndexScan(n)
 IndexScan(ci)
 SeqScan(it4)
 IndexScan(mi1)
 IndexScan(mii1)
 IndexScan(it3)
 SeqScan(t)
 IndexScan(mii2)
 IndexScan(kt)
 IndexScan(pi1)
 IndexScan(it5)
 IndexScan(mk)
 IndexScan(k)
 IndexScan(an)
 Leading(((((((it1 (rt (n (ci ((it4 ((mi1 ((mii1 it3) t)) mii2)) kt))))) pi1) it5) mk) k) an)) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
movie_keyword as mk,
keyword as k,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND t.id = mk.movie_id
AND mk.keyword_id = k.id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('episode','movie'))
AND (t.production_year <= 2015)
AND (t.production_year >= 1925)
AND (mi1.info IN ('Hong Kong','Poland','Portugal','South Korea','Soviet Union','Sweden','Switzerland','Turkey','Yugoslavia'))
AND (it1.id IN ('15','8','97'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 8.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 1000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND rt.id = ci.role_id
AND (n.gender IS NULL)
AND (n.name_pcode_nf in ('A4163','A4253','A5362','A6532','C5321','C6231','C6235','R516','R5316','S3152','S3521') OR n.name_pcode_nf IS NULL)
AND (ci.note in ('(deviser)','(producer)','(production assistant)','(senior producer)','(supervising producer)','(writer)') OR ci.note IS NULL)
AND (rt.role in ('cinematographer','composer','director','editor','miscellaneous crew','producer','production designer','writer'))
AND (it5.id in ('19'))
GROUP BY t.production_year,  kt.kind, n.gender
ORDER BY t.production_year,  kt.kind, n.gender;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 4 3 5 4 5 4 5 3 4]
indexes_env_matrix for this sql:  [ 1  2 31  2  3 30  3  4 29  4  5  6  5  0  0  6  7 28  7  8 27  8  9 26
  9 10 25 10 11 24 11 12 23 12 13 22 13 14 21 14 15 20 15 16 19 16 17 18
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0 28  0  0 29  0  0 30  0  0 31  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 6.3671482e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 1.0000000e+00
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.6873465e-03
 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04 0.0000000e+00
 1.0000000e+00 0.0000000e+00 1.6735010e-02 2.8182682e-02 6.6666669e-01
 9.3211162e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  210.98913456646005
Other difference exceed the threshold, need to switch module.
the difference value is:  210.98913456646005
Hash difference exceed the threshold, need to switch module.
the difference value is:  210.98913456646005
Nested loop difference exceed the threshold, need to switch module.
Planning took 2486.6ms
qtest36c, predicted time: 1.6
qtest36c,(predicted 1.6),/*+ MergeJoin(pi1 ci k mk t n kt rt it5 an mii2 mii1 it3 it4 mi1 it1)
 MergeJoin(pi1 ci k mk t n kt rt it5 an mii2 mii1 it3 it4 mi1)
 MergeJoin(pi1 ci k mk t n kt rt it5 an mii2 mii1 it3 it4)
 MergeJoin(pi1 ci k mk t n kt rt it5 an mii2 mii1 it3)
 MergeJoin(pi1 ci k mk t n kt rt it5 an mii2 mii1)
 MergeJoin(pi1 ci k mk t n kt rt it5 an mii2)
 MergeJoin(pi1 ci k mk t n kt rt it5 an)
 MergeJoin(pi1 ci k mk t n kt rt it5)
 MergeJoin(pi1 ci k mk t n kt rt)
 MergeJoin(pi1 ci k mk t n kt)
 MergeJoin(ci k mk t n kt)
 MergeJoin(ci k mk t n)
 MergeJoin(ci k mk t)
 NestLoop(k mk t)
 HashJoin(k mk)
 SeqScan(pi1)
 IndexScan(ci)
 SeqScan(k)
 SeqScan(mk)
 IndexScan(t)
 SeqScan(n)
 SeqScan(kt)
 IndexScan(rt)
 IndexScan(it5)
 SeqScan(an)
 SeqScan(mii2)
 SeqScan(mii1)
 IndexScan(it3)
 IndexScan(it4)
 IndexScan(mi1)
 SeqScan(it1)
 Leading(((((((((((pi1 (((ci ((k mk) t)) n) kt)) rt) it5) an) mii2) mii1) it3) it4) mi1) it1)) */
---------------------------------------
sql_str:   SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('7'))
AND (it2.id in ('8'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('CAM:Panavision Cameras and Lenses','OFM:16 mm','OFM:35 mm','OFM:Video','PCS:Spherical','PFM:35 mm','RAT:1.33 : 1','RAT:1.37 : 1','RAT:1.66 : 1','RAT:1.78 : 1','RAT:2.35 : 1','RAT:4:3'))
AND (mi2.info in ('East Germany','Hong Kong','Italy','Taiwan','UK','USA','West Germany'))
AND (kt.kind in ('episode','movie'))
AND (rt.role in ('production designer'))
AND (n.gender in ('f'))
AND (t.production_year <= 2010)
AND (t.production_year >= 1952)
AND (k.keyword IN ('death','elmo','father-son-relationship','fight','gay','independent-film','lesbian-sex','mother-daughter-relationship','murder','number-in-title'))
GROUP BY mi1.info, k.keyword, t.production_year
ORDER BY mi1.info, k.keyword, t.production_year;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 1 1 4 4 4 3 4 4 3 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 7.4532312e-05
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.2499158e-03
 4.3328535e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 2.3576464e-01 0.0000000e+00 8.3333336e-02
 7.4681133e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  164.068612745042
Other difference exceed the threshold, need to switch module.
the difference value is:  164.068612745042
Hash difference exceed the threshold, need to switch module.
the difference value is:  164.068612745042
Nested loop difference exceed the threshold, need to switch module.
Planning took 1664.5ms
qtest37a, predicted time: 7193.6
qtest37a,(predicted 7193.6),/*+ MergeJoin(k mk n rt mi2 t ci mi1 it1 it2 kt)
 MergeJoin(mk n rt mi2 t ci mi1 it1 it2 kt)
 MergeJoin(n rt mi2 t ci mi1 it1 it2 kt)
 MergeJoin(n rt mi2 t ci mi1 it1 it2)
 MergeJoin(n rt mi2 t ci mi1 it1)
 MergeJoin(n rt mi2 t ci mi1)
 MergeJoin(rt mi2 t ci mi1)
 MergeJoin(rt mi2 t ci)
 MergeJoin(mi2 t ci)
 HashJoin(mi2 t)
 IndexScan(k)
 SeqScan(mk)
 IndexScan(n)
 IndexScan(rt)
 IndexScan(mi2)
 SeqScan(t)
 SeqScan(ci)
 IndexScan(mi1)
 SeqScan(it1)
 IndexScan(it2)
 IndexScan(kt)
 Leading((k (mk ((((n ((rt ((mi2 t) ci)) mi1)) it1) it2) kt)))) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('7'))
AND (it2.id in ('8'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('CAM:Panavision Cameras and Lenses','OFM:16 mm','OFM:35 mm','OFM:Video','PCS:Spherical','PFM:35 mm','RAT:1.33 : 1','RAT:1.37 : 1','RAT:1.66 : 1','RAT:1.78 : 1','RAT:2.35 : 1','RAT:4:3'))
AND (mi2.info in ('East Germany','Hong Kong','Italy','Taiwan','UK','USA','West Germany'))
AND (kt.kind in ('episode','movie'))
AND (rt.role in ('production designer'))
AND (n.gender in ('f'))
AND (t.production_year <= 2010)
AND (t.production_year >= 1952)
AND (k.keyword IN ('fight','gay','independent-film','lesbian-sex','mother-daughter-relationship','murder','number-in-title'))
GROUP BY mi1.info, k.keyword, t.production_year
ORDER BY mi1.info, k.keyword, t.production_year;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 1 1 4 4 4 3 4 4 3 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.2172618e-05
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.2499158e-03
 4.3328535e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 2.3576464e-01 0.0000000e+00 8.3333336e-02
 7.4681133e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  154.20321994359588
Other difference exceed the threshold, need to switch module.
the difference value is:  154.20321994359588
Hash difference exceed the threshold, need to switch module.
the difference value is:  154.20321994359588
Nested loop difference exceed the threshold, need to switch module.
Planning took 214.2ms
qtest37c, predicted time: 3.3
qtest37c,(predicted 3.3),/*+ MergeJoin(kt k ci t mi1 it1 n mk rt mi2 it2)
 MergeJoin(kt k ci t mi1 it1 n mk rt mi2)
 MergeJoin(k ci t mi1 it1 n mk rt mi2)
 MergeJoin(k ci t mi1 it1 n mk rt)
 MergeJoin(k ci t mi1 it1 n mk)
 MergeJoin(ci t mi1 it1 n mk)
 MergeJoin(ci t mi1 it1 n)
 MergeJoin(ci t mi1 it1)
 MergeJoin(t mi1 it1)
 HashJoin(mi1 it1)
 SeqScan(kt)
 SeqScan(k)
 IndexScan(ci)
 SeqScan(t)
 IndexScan(mi1)
 IndexScan(it1)
 SeqScan(n)
 SeqScan(mk)
 IndexScan(rt)
 SeqScan(mi2)
 SeqScan(it2)
 Leading(((kt (((k (((ci (t (mi1 it1))) n) mk)) rt) mi2)) it2)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('7'))
AND (it2.id in ('8'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('CAM:Panavision Cameras and Lenses','OFM:16 mm','OFM:35 mm','OFM:Video','PCS:Spherical','PFM:35 mm','RAT:1.33 : 1','RAT:1.37 : 1','RAT:1.66 : 1','RAT:1.78 : 1','RAT:2.35 : 1','RAT:4:3'))
AND (mi2.info in ('East Germany','Hong Kong','Italy','Taiwan','UK','USA','West Germany'))
AND (kt.kind in ('episode','movie'))
AND (rt.role in ('production designer'))
AND (n.gender in ('f'))
AND (t.production_year <= 2011)
AND (t.production_year >= 1949)
AND (k.keyword IN ('death','father-son-relationship','bruce','gay','independent-film','lesbian-sex','mother-daughter-relationship','murder','number-in-title'))
GROUP BY kt.kind, k.keyword, t.production_year
ORDER BY kt.kind, k.keyword, t.production_year;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 1 1 4 4 4 3 4 4 3 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.7079076e-05
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.2499158e-03
 4.3328535e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 2.3576464e-01 0.0000000e+00 8.3333336e-02
 8.1741929e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  164.18247068126504
Other difference exceed the threshold, need to switch module.
the difference value is:  164.18247068126504
Hash difference exceed the threshold, need to switch module.
the difference value is:  164.18247068126504
Nested loop difference exceed the threshold, need to switch module.
Planning took 1547.0ms
qtest38a, predicted time: 7063.7
qtest38a,(predicted 7063.7),/*+ HashJoin(k mk kt rt ci mi2 t mi1 n it1 it2)
 MergeJoin(mk kt rt ci mi2 t mi1 n it1 it2)
 MergeJoin(kt rt ci mi2 t mi1 n it1 it2)
 MergeJoin(rt ci mi2 t mi1 n it1 it2)
 MergeJoin(rt ci mi2 t mi1 n it1)
 MergeJoin(rt ci mi2 t mi1 n)
 MergeJoin(ci mi2 t mi1 n)
 MergeJoin(ci mi2 t mi1)
 MergeJoin(mi2 t mi1)
 HashJoin(mi2 t)
 IndexScan(k)
 SeqScan(mk)
 SeqScan(kt)
 SeqScan(rt)
 SeqScan(ci)
 IndexScan(mi2)
 SeqScan(t)
 IndexScan(mi1)
 IndexScan(n)
 SeqScan(it1)
 IndexScan(it2)
 Leading((k (mk (kt (((rt ((ci ((mi2 t) mi1)) n)) it1) it2))))) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('7'))
AND (it2.id in ('8'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('CAM:Panavision Cameras and Lenses','OFM:16 mm','OFM:35 mm','OFM:Video','PCS:Spherical','PFM:35 mm','RAT:1.33 : 1','RAT:1.37 : 1','RAT:1.66 : 1','RAT:1.78 : 1','RAT:2.35 : 1','RAT:4:3'))
AND (mi2.info in ('East Germany','Hong Kong','Italy','Taiwan','UK','USA','West Germany'))
AND (kt.kind in ('episode','movie'))
AND (rt.role in ('actress'))
AND (n.gender in ('f'))
AND (t.production_year <= 2011)
AND (t.production_year >= 1949)
AND (k.keyword IN ('death','father-son-relationship','bruce','gay','independent-film','lesbian-sex','mother-daughter-relationship','murder','number-in-title'))
GROUP BY kt.kind, k.keyword, t.production_year
ORDER BY kt.kind, k.keyword, t.production_year;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 1 1 4 4 4 3 4 4 3 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.7079076e-05
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.2499158e-03
 4.3328535e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 2.3576464e-01 0.0000000e+00 8.3333336e-02
 8.1741929e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  154.32578100995707
Other difference exceed the threshold, need to switch module.
the difference value is:  154.32578100995707
Hash difference exceed the threshold, need to switch module.
the difference value is:  154.32578100995707
Nested loop difference exceed the threshold, need to switch module.
Planning took 210.1ms
qtest38c, predicted time: 3.3
qtest38c,(predicted 3.3),/*+ MergeJoin(kt k ci t mi1 it1 n mk rt mi2 it2)
 MergeJoin(kt k ci t mi1 it1 n mk rt mi2)
 MergeJoin(k ci t mi1 it1 n mk rt mi2)
 MergeJoin(k ci t mi1 it1 n mk rt)
 MergeJoin(k ci t mi1 it1 n mk)
 MergeJoin(ci t mi1 it1 n mk)
 MergeJoin(ci t mi1 it1 n)
 MergeJoin(ci t mi1 it1)
 MergeJoin(t mi1 it1)
 HashJoin(mi1 it1)
 SeqScan(kt)
 SeqScan(k)
 IndexScan(ci)
 SeqScan(t)
 IndexScan(mi1)
 IndexScan(it1)
 SeqScan(n)
 SeqScan(mk)
 IndexScan(rt)
 SeqScan(mi2)
 SeqScan(it2)
 Leading(((kt (((k (((ci (t (mi1 it1))) n) mk)) rt) mi2)) it2)) */
---------------------------------------
sql_str:   SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('7'))
AND (it2.id in ('8'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('CAM:Panavision Cameras and Lenses','OFM:16 mm','OFM:35 mm','OFM:Video','PCS:Spherical','PFM:35 mm','RAT:1.33 : 1','RAT:1.37 : 1','RAT:1.66 : 1','RAT:1.78 : 1','RAT:2.35 : 1','RAT:4:3'))
AND (mi2.info in ('East Germany','Hong Kong','Italy','Taiwan','UK','USA','West Germany'))
AND (kt.kind in ('episode','movie'))
AND (rt.role in ('production designer'))
AND (n.gender in ('f'))
AND (t.production_year <= 2010)
AND (t.production_year >= 1950)
AND (k.keyword IN ('father-son-relationship','combat','gay','independent-film','lesbian-sex','mother-daughter-relationship','murder','number-in-title'))
GROUP BY t.id, k.keyword, t.production_year
ORDER BY t.id, k.keyword, t.production_year;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 1 1 4 4 4 3 4 4 3 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.9625847e-05
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.2499158e-03
 4.3328535e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 2.3576464e-01 0.0000000e+00 8.3333336e-02
 7.5073051e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  164.07469014503147
Other difference exceed the threshold, need to switch module.
the difference value is:  164.07469014503147
Hash difference exceed the threshold, need to switch module.
the difference value is:  164.07469014503147
Nested loop difference exceed the threshold, need to switch module.
Planning took 1680.3ms
qtest39a, predicted time: 7199.8
qtest39a,(predicted 7199.8),/*+ MergeJoin(k mk n rt mi2 t ci mi1 it1 it2 kt)
 MergeJoin(mk n rt mi2 t ci mi1 it1 it2 kt)
 MergeJoin(n rt mi2 t ci mi1 it1 it2 kt)
 MergeJoin(n rt mi2 t ci mi1 it1 it2)
 MergeJoin(n rt mi2 t ci mi1 it1)
 MergeJoin(n rt mi2 t ci mi1)
 MergeJoin(rt mi2 t ci mi1)
 MergeJoin(rt mi2 t ci)
 MergeJoin(mi2 t ci)
 HashJoin(mi2 t)
 IndexScan(k)
 SeqScan(mk)
 IndexScan(n)
 IndexScan(rt)
 IndexScan(mi2)
 SeqScan(t)
 SeqScan(ci)
 IndexScan(mi1)
 SeqScan(it1)
 IndexScan(it2)
 IndexScan(kt)
 Leading((k (mk ((((n ((rt ((mi2 t) ci)) mi1)) it1) it2) kt)))) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('7'))
AND (it2.id in ('8'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('CAM:Panavision Cameras and Lenses','OFM:16 mm','OFM:35 mm','OFM:Video','PCS:Spherical','PFM:35 mm','RAT:1.33 : 1','RAT:1.37 : 1','RAT:1.66 : 1','RAT:1.78 : 1','RAT:2.35 : 1','RAT:4:3'))
AND (mi2.info in ('East Germany','Hong Kong','Italy','Taiwan','UK','USA','West Germany'))
AND (kt.kind in ('episode','movie'))
AND (rt.role in ('production designer'))
AND (n.gender in ('f'))
AND (t.production_year <= 2020)
AND (t.production_year >= 1970)
AND (k.keyword IN ('father-son-relationship','combat','gay','independent-film','lesbian-sex','mother-daughter-relationship','murder','number-in-title'))
GROUP BY t.id, k.keyword, t.production_year
ORDER BY t.id, k.keyword, t.production_year;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 1 1 4 4 4 3 4 4 3 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.9625847e-05
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.2499158e-03
 4.3328535e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 2.3576464e-01 0.0000000e+00 8.3333336e-02
 8.2503027e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  154.33956928611536
Other difference exceed the threshold, need to switch module.
the difference value is:  154.33956928611536
Hash difference exceed the threshold, need to switch module.
the difference value is:  154.33956928611536
Nested loop difference exceed the threshold, need to switch module.
Planning took 569.1ms
qtest39b, predicted time: 3.6
qtest39b,(predicted 3.6),/*+ MergeJoin(k rt n ci t mk mi2 kt mi1 it1 it2)
 MergeJoin(k rt n ci t mk mi2 kt mi1 it1)
 MergeJoin(k rt n ci t mk mi2 kt mi1)
 MergeJoin(k rt n ci t mk mi2 kt)
 MergeJoin(k rt n ci t mk mi2)
 MergeJoin(k rt n ci t mk)
 MergeJoin(rt n ci t mk)
 MergeJoin(rt n ci t)
 MergeJoin(rt n ci)
 HashJoin(n ci)
 SeqScan(k)
 SeqScan(rt)
 IndexScan(n)
 SeqScan(ci)
 SeqScan(t)
 IndexScan(mk)
 IndexScan(mi2)
 SeqScan(kt)
 IndexScan(mi1)
 SeqScan(it1)
 SeqScan(it2)
 Leading(((((((k (((rt (n ci)) t) mk)) mi2) kt) mi1) it1) it2)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('7'))
AND (it2.id in ('8'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('CAM:Panavision Cameras and Lenses','OFM:16 mm','OFM:35 mm','OFM:Video','PCS:Spherical','PFM:35 mm','RAT:1.33 : 1','RAT:1.37 : 1','RAT:1.66 : 1','RAT:1.78 : 1','RAT:2.35 : 1','RAT:4:3'))
AND (mi2.info in ('East Germany','Hong Kong','Italy','Taiwan','UK','USA','West Germany'))
AND (kt.kind in ('episode','movie'))
AND (rt.role in ('production designer'))
AND (n.gender in ('m'))
AND (t.production_year <= 2010)
AND (t.production_year >= 1950)
AND (k.keyword IN ('father-son-relationship','combat','gay','independent-film','lesbian-sex','mother-daughter-relationship','murder','number-in-title'))
GROUP BY t.id, k.keyword, t.production_year
ORDER BY t.id, k.keyword, t.production_year;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 1 1 4 4 4 3 4 4 3 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 5.9625847e-05
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.2499158e-03
 4.3328535e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 4.1559657e-01 0.0000000e+00 8.3333336e-02
 7.5073051e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  164.19534873668704
Other difference exceed the threshold, need to switch module.
the difference value is:  164.19534873668704
Hash difference exceed the threshold, need to switch module.
the difference value is:  164.19534873668704
Nested loop difference exceed the threshold, need to switch module.
Planning took 1407.1ms
qtest39c, predicted time: 7181.6
qtest39c,(predicted 7181.6),/*+ HashJoin(k mk kt n mi2 t mi1 ci rt it1 it2)
 MergeJoin(mk kt n mi2 t mi1 ci rt it1 it2)
 MergeJoin(kt n mi2 t mi1 ci rt it1 it2)
 MergeJoin(n mi2 t mi1 ci rt it1 it2)
 MergeJoin(n mi2 t mi1 ci rt it1)
 MergeJoin(n mi2 t mi1 ci rt)
 MergeJoin(mi2 t mi1 ci rt)
 MergeJoin(mi2 t mi1 ci)
 MergeJoin(mi2 t mi1)
 HashJoin(mi2 t)
 IndexScan(k)
 SeqScan(mk)
 SeqScan(kt)
 IndexScan(n)
 IndexScan(mi2)
 SeqScan(t)
 IndexScan(mi1)
 SeqScan(ci)
 SeqScan(rt)
 SeqScan(it1)
 IndexScan(it2)
 Leading((k (mk (kt (((n ((((mi2 t) mi1) ci) rt)) it1) it2))))) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
movie_keyword as mk,
keyword as k,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND t.id = mk.movie_id
AND mk.keyword_id = k.id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('episode'))
AND (t.production_year <= 1975)
AND (t.production_year >= 1875)
AND (mi1.info IN ('Color','OFM:Live','OFM:Video','PFM:Video'))
AND (it1.id IN ('103','2','7'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 11.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 7.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 10000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND rt.id = ci.role_id
AND (n.gender in ('f'))
AND (n.name_pcode_nf in ('C6231','F6362','F6525','J513','R1631','R1632','R1636','R2631','S2153'))
AND (ci.note IS NULL)
AND (rt.role in ('actress'))
AND (it5.id in ('25'))
GROUP BY t.production_year, n.name
ORDER BY t.production_year, n.name;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 4 3 4 4 4 4 4 5 3 4 5 4 5 4]
indexes_env_matrix for this sql:  [ 1  2  3  2  0  0  3  4 31  4  5 30  5  6 29  6  7 28  7  8 27  8  9 26
  9 10 25 10 11 24 11 12 23 12 13 22 13 14 21 14 15 20 15 16 19 16 17 18
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0 28  0  0 29  0  0 30  0  0 31  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 6.0610288e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 1.0000000e+00
 1.4285715e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 7.4442968e-02
 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04 0.0000000e+00
 1.0000000e+00 0.0000000e+00 3.1177031e-03 1.4424813e-01 8.3333336e-02
 1.8108603e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  209.72822431504744
Other difference exceed the threshold, need to switch module.
the difference value is:  209.72822431504744
Hash difference exceed the threshold, need to switch module.
the difference value is:  209.72822431504744
Nested loop difference exceed the threshold, need to switch module.
Planning took 1599.9ms
qtest3b, predicted time: 1.0
qtest3b,(predicted 1.0),/*+ MergeJoin(rt it1 pi1 ci kt k mk t n mi1 mii1 it5 it3 an mii2 it4)
 MergeJoin(rt it1 pi1 ci kt k mk t n mi1 mii1 it5 it3 an mii2)
 MergeJoin(it1 pi1 ci kt k mk t n mi1 mii1 it5 it3 an mii2)
 MergeJoin(it1 pi1 ci kt k mk t n mi1 mii1 it5 it3 an)
 MergeJoin(it1 pi1 ci kt k mk t n mi1 mii1 it5 it3)
 MergeJoin(it1 pi1 ci kt k mk t n mi1 mii1 it5)
 MergeJoin(pi1 ci kt k mk t n mi1 mii1 it5)
 MergeJoin(pi1 ci kt k mk t n mi1 mii1)
 MergeJoin(ci kt k mk t n mi1 mii1)
 MergeJoin(ci kt k mk t n mi1)
 MergeJoin(ci kt k mk t n)
 MergeJoin(ci kt k mk t)
 HashJoin(kt k mk t)
 NestLoop(k mk t)
 HashJoin(k mk)
 SeqScan(rt)
 IndexScan(it1)
 SeqScan(pi1)
 IndexScan(ci)
 SeqScan(kt)
 SeqScan(k)
 SeqScan(mk)
 IndexScan(t)
 SeqScan(n)
 IndexScan(mi1)
 IndexScan(mii1)
 IndexScan(it5)
 IndexScan(it3)
 IndexScan(an)
 IndexScan(mii2)
 SeqScan(it4)
 Leading(((rt ((((it1 ((pi1 ((((ci (kt ((k mk) t))) n) mi1) mii1)) it5)) it3) an) mii2)) it4)) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
movie_keyword as mk,
keyword as k,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND t.id = mk.movie_id
AND mk.keyword_id = k.id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('episode'))
AND (t.production_year <= 1975)
AND (t.production_year >= 1875)
AND (mi1.info IN ('Color','OFM:Live','OFM:Video','PFM:Video'))
AND (it1.id IN ('103','2','7'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 11.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 7.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 10000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND rt.id = ci.role_id
AND (n.gender in ('m','f'))
AND (n.name_pcode_nf in ('C6231','F6362','F6525','J513','R1631','R1632','R1636','R2631','S2153'))
AND (ci.note IS NULL)
AND (rt.role in ('actor','actress'))
AND (it5.id in ('25'))
GROUP BY t.production_year, n.name
ORDER BY t.production_year, n.name;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 3 4 3 4 4 4 4 4 4 5 4 4 5 3 5]
indexes_env_matrix for this sql:  [ 1  2 31  2  3 30  3  4 29  4  5 28  5  6  7  6  0  0  7  8 27  8  9 26
  9 10 25 10 11 24 11 12 23 12 13 22 13 14 21 14 15 20 15 16 19 16 17 18
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0 28  0  0 29  0  0 30  0  0 31  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 6.0610288e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 1.0000000e+00
 1.4285715e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 7.4442968e-02
 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04 0.0000000e+00
 1.0000000e+00 0.0000000e+00 8.6133359e-03 1.4424813e-01 1.6666667e-01
 1.8108603e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  214.09953620949435
Other difference exceed the threshold, need to switch module.
the difference value is:  214.09953620949435
Hash difference exceed the threshold, need to switch module.
the difference value is:  214.09953620949435
Nested loop difference exceed the threshold, need to switch module.
Planning took 552.4ms
qtest3c, predicted time: 1213.2
qtest3c,(predicted 1213.2),/*+ NestLoop(pi1 rt ci it1 it4 mi1 mii1 it3 t mii2 kt n it5 mk an k)
 NestLoop(pi1 rt ci it1 it4 mi1 mii1 it3 t mii2 kt n it5 mk an)
 NestLoop(pi1 rt ci it1 it4 mi1 mii1 it3 t mii2 kt n it5 mk)
 NestLoop(pi1 rt ci it1 it4 mi1 mii1 it3 t mii2 kt n it5)
 HashJoin(pi1 rt ci it1 it4 mi1 mii1 it3 t mii2 kt n)
 HashJoin(rt ci it1 it4 mi1 mii1 it3 t mii2 kt n)
 HashJoin(rt ci it1 it4 mi1 mii1 it3 t mii2 kt)
 HashJoin(ci it1 it4 mi1 mii1 it3 t mii2 kt)
 MergeJoin(it1 it4 mi1 mii1 it3 t mii2 kt)
 MergeJoin(it4 mi1 mii1 it3 t mii2 kt)
 MergeJoin(it4 mi1 mii1 it3 t mii2)
 MergeJoin(mi1 mii1 it3 t mii2)
 MergeJoin(mi1 mii1 it3 t)
 MergeJoin(mii1 it3 t)
 HashJoin(mii1 it3)
 SeqScan(pi1)
 IndexScan(rt)
 SeqScan(ci)
 SeqScan(it1)
 SeqScan(it4)
 IndexScan(mi1)
 IndexScan(mii1)
 IndexScan(it3)
 SeqScan(t)
 IndexScan(mii2)
 SeqScan(kt)
 IndexScan(n)
 IndexScan(it5)
 IndexScan(mk)
 IndexScan(an)
 IndexScan(k)
 Leading((((((pi1 ((rt (ci (it1 ((it4 ((mi1 ((mii1 it3) t)) mii2)) kt)))) n)) it5) mk) an) k)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('7'))
AND (it2.id in ('8'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('CAM:Panavision Cameras and Lenses','OFM:16 mm','OFM:35 mm','OFM:Video','PCS:Spherical','PFM:35 mm','RAT:1.33 : 1','RAT:1.37 : 1','RAT:1.66 : 1','RAT:1.78 : 1','RAT:2.35 : 1','RAT:4:3'))
AND (mi2.info in ('East Germany','Hong Kong','Italy','Taiwan','UK','USA','West Germany'))
AND (kt.kind in ('episode','movie'))
AND (rt.role in ('production designer'))
AND (n.gender in ('m'))
AND (t.production_year <= 2020)
AND (t.production_year >= 1970)
AND (k.keyword IN ('death','father-son-relationship','fight','gay','independent-film','lesbian-sex','mother-daughter-relationship','murder','number-in-title'))
GROUP BY mi1.info, k.keyword, mi2.info
ORDER BY mi1.info, k.keyword, mi2.info;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 1 1 4 4 4 3 4 4 3 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.7079076e-05
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.2499158e-03
 4.3328535e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 4.1559657e-01 0.0000000e+00 8.3333336e-02
 8.2503027e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  154.46796496023225
Other difference exceed the threshold, need to switch module.
the difference value is:  154.46796496023225
Hash difference exceed the threshold, need to switch module.
the difference value is:  154.46796496023225
Nested loop difference exceed the threshold, need to switch module.
Planning took 392.9ms
qtest40b, predicted time: 3.2
qtest40b,(predicted 3.2),/*+ MergeJoin(k ci t mi1 it1 n mk kt rt mi2 it2)
 MergeJoin(k ci t mi1 it1 n mk kt rt mi2)
 MergeJoin(k ci t mi1 it1 n mk kt rt)
 MergeJoin(k ci t mi1 it1 n mk kt)
 MergeJoin(ci t mi1 it1 n mk kt)
 MergeJoin(ci t mi1 it1 n mk)
 MergeJoin(ci t mi1 it1 n)
 MergeJoin(ci t mi1 it1)
 MergeJoin(t mi1 it1)
 HashJoin(mi1 it1)
 SeqScan(k)
 IndexScan(ci)
 IndexScan(t)
 IndexScan(mi1)
 IndexScan(it1)
 SeqScan(n)
 SeqScan(mk)
 SeqScan(kt)
 IndexScan(rt)
 SeqScan(mi2)
 IndexScan(it2)
 Leading(((((k ((((ci (t (mi1 it1))) n) mk) kt)) rt) mi2) it2)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
movie_info as mi2,
info_type as it2,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k
WHERE
t.id = ci.movie_id
AND t.id = mi1.movie_id
AND t.id = mi2.movie_id
AND t.id = mk.movie_id
AND k.id = mk.keyword_id
AND mi1.movie_id = mi2.movie_id
AND mi1.info_type_id = it1.id
AND mi2.info_type_id = it2.id
AND (it1.id in ('7'))
AND (it2.id in ('8'))
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (mi1.info in ('CAM:Panavision Cameras and Lenses','OFM:16 mm','OFM:35 mm','OFM:Video','PCS:Spherical','PFM:35 mm','RAT:1.33 : 1','RAT:1.37 : 1','RAT:1.66 : 1','RAT:1.78 : 1','RAT:2.35 : 1','RAT:4:3'))
AND (mi2.info in ('East Germany','Hong Kong','Italy','Taiwan','UK','USA','West Germany'))
AND (kt.kind in ('episode','movie'))
AND (rt.role in ('actor'))
AND (n.gender in ('m'))
AND (t.production_year <= 2008)
AND (t.production_year >= 1952)
AND (k.keyword IN ('death','father-son-relationship','fight','gay','independent-film','lesbian-sex','mother-daughter-relationship','murder','number-in-title'))
GROUP BY mi1.info, k.keyword, mi2.info
ORDER BY mi1.info, k.keyword, mi2.info;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 0 1 1 4 4 4 3 4 4 3 3 4 4 4]
indexes_env_matrix for this sql:  [ 1  2 21  2  3 20  3  4 19  4  5 18  5  6 17  6  7 16  7  8 15  8  9 14
  9 10 13 10 11 12 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 8.8495575e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.7079076e-05
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 6.2499158e-03
 4.3328535e-03 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 4.1559657e-01 0.0000000e+00 8.3333336e-02
 6.3965404e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  164.03601077932265
Other difference exceed the threshold, need to switch module.
the difference value is:  164.03601077932265
Hash difference exceed the threshold, need to switch module.
the difference value is:  164.03601077932265
Nested loop difference exceed the threshold, need to switch module.
Planning took 1464.1ms
qtest40c, predicted time: 7227.1
qtest40c,(predicted 7227.1),/*+ HashJoin(k mk kt n mi2 t mi1 ci rt it1 it2)
 MergeJoin(mk kt n mi2 t mi1 ci rt it1 it2)
 MergeJoin(kt n mi2 t mi1 ci rt it1 it2)
 MergeJoin(n mi2 t mi1 ci rt it1 it2)
 MergeJoin(n mi2 t mi1 ci rt it1)
 MergeJoin(n mi2 t mi1 ci rt)
 MergeJoin(mi2 t mi1 ci rt)
 MergeJoin(mi2 t mi1 ci)
 MergeJoin(mi2 t mi1)
 HashJoin(mi2 t)
 IndexScan(k)
 SeqScan(mk)
 SeqScan(kt)
 IndexScan(n)
 IndexScan(mi2)
 SeqScan(t)
 IndexScan(mi1)
 SeqScan(ci)
 SeqScan(rt)
 SeqScan(it1)
 IndexScan(it2)
 Leading((k (mk (kt (((n ((((mi2 t) mi1) ci) rt)) it1) it2))))) */
---------------------------------------
sql_str:   SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k,
movie_companies as mc,
company_type as ct,
company_name as cn
WHERE
t.id = ci.movie_id
AND t.id = mc.movie_id
AND t.id = mi1.movie_id
AND t.id = mk.movie_id
AND mc.company_type_id = ct.id
AND mc.company_id = cn.id
AND k.id = mk.keyword_id
AND mi1.info_type_id = it1.id
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (it1.id IN ('2'))
AND (mi1.info in ('Black and White','Color'))
AND (kt.kind in ('movie','tv movie','tv series'))
AND (rt.role in ('actor','composer','miscellaneous crew','producer','production designer'))
AND (n.gender in ('m') OR n.gender IS NULL)
AND (n.name_pcode_cf in ('A2365','A6252','C52','D1614','E1524','E2163','L1214','L2','P5215','Q5325','R2425','S1452','T5212','V4524','V4626'))
AND (t.production_year <= 2015)
AND (t.production_year >= 1990)
AND (cn.name in ('ABS-CBN','American Broadcasting Company (ABC)','British Broadcasting Corporation (BBC)'))
AND (ct.kind in ('distributors','production companies'))
GROUP BY t.production_year, cn.name
ORDER BY t.production_year, cn.name;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 3 1 1 1 1 0 1 1 1 0 1 3 4 3 4 4 4 3 4 4 5 4]
indexes_env_matrix for this sql:  [ 1  2  3  2  0  0  3  4 23  4  5 22  5  6 21  6  7 20  7  8 19  8  9 18
  9 10 17 10 11 16 11 12 15 12 13 14 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.2766121e-05 5.0000000e-01 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 4.2857143e-01 0.0000000e+00 1.0000000e+00 0.0000000e+00 8.2946429e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 1.5421748e-03 0.0000000e+00 4.1666666e-01
 7.0026720e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  171.61634128528246
Other difference exceed the threshold, need to switch module.
the difference value is:  171.61634128528246
Hash difference exceed the threshold, need to switch module.
the difference value is:  171.61634128528246
Nested loop difference exceed the threshold, need to switch module.
Planning took 457.6ms
qtest4a, predicted time: 2.6
qtest4a,(predicted 2.6),/*+ MergeJoin(k rt n ci t mk mc cn ct mi1 it1 kt)
 MergeJoin(k rt n ci t mk mc cn ct mi1 it1)
 MergeJoin(k rt n ci t mk mc cn ct mi1)
 MergeJoin(k rt n ci t mk mc cn ct)
 MergeJoin(k rt n ci t mk mc cn)
 MergeJoin(k rt n ci t mk mc)
 MergeJoin(k rt n ci t mk)
 MergeJoin(rt n ci t mk)
 MergeJoin(rt n ci t)
 MergeJoin(rt n ci)
 HashJoin(n ci)
 SeqScan(k)
 SeqScan(rt)
 IndexScan(n)
 SeqScan(ci)
 SeqScan(t)
 IndexScan(mk)
 IndexScan(mc)
 SeqScan(cn)
 SeqScan(ct)
 SeqScan(mi1)
 SeqScan(it1)
 IndexScan(kt)
 Leading((((((((k (((rt (n ci)) t) mk)) mc) cn) ct) mi1) it1) kt)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k,
movie_companies as mc,
company_type as ct,
company_name as cn
WHERE
t.id = ci.movie_id
AND t.id = mc.movie_id
AND t.id = mi1.movie_id
AND t.id = mk.movie_id
AND mc.company_type_id = ct.id
AND mc.company_id = cn.id
AND k.id = mk.keyword_id
AND mi1.info_type_id = it1.id
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (it1.id IN ('2'))
AND (mi1.info in ('Black and White','Color'))
AND (kt.kind in ('movie','tv movie','tv series'))
AND (rt.role in ('actor','composer','miscellaneous crew','producer','production designer'))
AND (n.gender in ('m') OR n.gender IS NULL)
AND (n.name_pcode_cf in ('A2365','A6252','C52','D1614','E1524','E2163','L1214','L2','P5215','Q5325','R2425','S1452','T5212','V4524','V4626'))
AND (t.production_year <= 2020)
AND (t.production_year >= 2000)
AND (cn.name in ('ABS-CBN','American Broadcasting Company (ABC)','British Broadcasting Corporation (BBC)'))
AND (ct.kind in ('distributors','production companies'))
GROUP BY t.production_year, cn.name
ORDER BY t.production_year, cn.name;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 0 1 1 1 1 1 1 0 1 1 3 4 4 3 4 4 3 4 5 4 3 4]
indexes_env_matrix for this sql:  [ 1  2 23  2  3 22  3  4 21  4  5 20  5  6 19  6  7 18  7  8 17  8  9 16
  9 10 15 10 11 14 11 12 13 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.2766121e-05 5.0000000e-01 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 4.2857143e-01 0.0000000e+00 1.0000000e+00 0.0000000e+00 8.2946429e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 1.5421748e-03 0.0000000e+00 4.1666666e-01
 5.6326950e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  177.27465577347843
Other difference exceed the threshold, need to switch module.
the difference value is:  177.27465577347843
Hash difference exceed the threshold, need to switch module.
the difference value is:  177.27465577347843
Nested loop difference exceed the threshold, need to switch module.
Planning took 243.0ms
qtest4b, predicted time: 5008.0
qtest4b,(predicted 5008.0),/*+ MergeJoin(k mk mi1 rt kt t mc cn ct ci n it1)
 MergeJoin(mk mi1 rt kt t mc cn ct ci n it1)
 MergeJoin(mi1 rt kt t mc cn ct ci n it1)
 MergeJoin(mi1 rt kt t mc cn ct ci n)
 MergeJoin(mi1 rt kt t mc cn ct ci)
 MergeJoin(rt kt t mc cn ct ci)
 MergeJoin(kt t mc cn ct ci)
 HashJoin(t mc cn ct ci)
 MergeJoin(t mc cn ct)
 MergeJoin(mc cn ct)
 HashJoin(mc cn)
 IndexScan(k)
 IndexScan(mk)
 IndexScan(mi1)
 SeqScan(rt)
 SeqScan(kt)
 SeqScan(t)
 IndexScan(mc)
 IndexScan(cn)
 SeqScan(ct)
 SeqScan(ci)
 IndexScan(n)
 SeqScan(it1)
 Leading((k (mk (((mi1 (rt (kt ((t ((mc cn) ct)) ci)))) n) it1)))) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k,
movie_companies as mc,
company_type as ct,
company_name as cn
WHERE
t.id = ci.movie_id
AND t.id = mc.movie_id
AND t.id = mi1.movie_id
AND t.id = mk.movie_id
AND mc.company_type_id = ct.id
AND mc.company_id = cn.id
AND k.id = mk.keyword_id
AND mi1.info_type_id = it1.id
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (it1.id IN ('2'))
AND (mi1.info in ('Black and White','Color'))
AND (kt.kind in ('movie','tv movie','tv series'))
AND (rt.role in ('actor','composer','miscellaneous crew','producer','production designer'))
AND (n.gender in ('m') OR n.gender IS NULL)
AND (n.name_pcode_cf in ('E2163','L1214','L2','P5215','Q5325','R2425','S1452','T5212','V4524','V4626'))
AND (t.production_year <= 2015)
AND (t.production_year >= 1990)
AND (cn.name in ('ABS-CBN','American Broadcasting Company (ABC)','British Broadcasting Corporation (BBC)'))
AND (ct.kind in ('production companies'))
GROUP BY t.production_year, cn.name
ORDER BY t.production_year, cn.name;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 3 1 1 1 1 1 1 0 1 1 3 4 4 3 4 4 4 4 5 4 4]
indexes_env_matrix for this sql:  [ 1  2 23  2  3  4  3  0  0  4  5 22  5  6 21  6  7 20  7  8 19  8  9 18
  9 10 17 10 11 16 11 12 15 12 13 14 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.2766121e-05 2.5000000e-01 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 4.2857143e-01 0.0000000e+00 1.0000000e+00 0.0000000e+00 8.2946429e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 9.4709260e-04 0.0000000e+00 4.1666666e-01
 7.0026720e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  171.44311024147004
Other difference exceed the threshold, need to switch module.
the difference value is:  171.44311024147004
Hash difference exceed the threshold, need to switch module.
the difference value is:  171.44311024147004
Nested loop difference exceed the threshold, need to switch module.
Planning took 269.6ms
qtest4c, predicted time: 2.3
qtest4c,(predicted 2.3),/*+ MergeJoin(cn k ci t mi1 it1 n mk rt mc kt ct)
 MergeJoin(cn k ci t mi1 it1 n mk rt mc kt)
 MergeJoin(cn k ci t mi1 it1 n mk rt mc)
 MergeJoin(k ci t mi1 it1 n mk rt mc)
 MergeJoin(k ci t mi1 it1 n mk rt)
 MergeJoin(ci t mi1 it1 n mk rt)
 MergeJoin(ci t mi1 it1 n mk)
 MergeJoin(ci t mi1 it1 n)
 MergeJoin(ci t mi1 it1)
 MergeJoin(t mi1 it1)
 HashJoin(mi1 it1)
 IndexScan(cn)
 SeqScan(k)
 IndexScan(ci)
 IndexScan(t)
 IndexScan(mi1)
 IndexScan(it1)
 SeqScan(n)
 SeqScan(mk)
 IndexScan(rt)
 SeqScan(mc)
 SeqScan(kt)
 SeqScan(ct)
 Leading((((cn ((k ((((ci (t (mi1 it1))) n) mk) rt)) mc)) kt) ct)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k,
movie_companies as mc,
company_type as ct,
company_name as cn
WHERE
t.id = ci.movie_id
AND t.id = mc.movie_id
AND t.id = mi1.movie_id
AND t.id = mk.movie_id
AND mc.company_type_id = ct.id
AND mc.company_id = cn.id
AND k.id = mk.keyword_id
AND mi1.info_type_id = it1.id
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (it1.id IN ('2'))
AND (mi1.info in ('Color'))
AND (kt.kind in ('movie','tv series'))
AND (rt.role in ('actor','producer'))
AND (n.gender in ('m'))
AND (n.name_pcode_cf in ('B6261','B6526','J5252','M6352','R363','S3152','S5362'))
AND (t.production_year <= 1990)
AND (t.production_year >= 1950)
AND (cn.name in ('American Broadcasting Company (ABC)','Columbia Broadcasting System (CBS)','National Broadcasting Company (NBC)'))
AND (ct.kind in ('distributors'))
GROUP BY t.production_year, cn.name
ORDER BY t.production_year, cn.name;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 0 1 1 1 1 1 1 1 0 1 3 4 3 4 4 4 3 4 5 4 3 4]
indexes_env_matrix for this sql:  [ 1  2 23  2  3 22  3  4 21  4  5 20  5  6 19  6  7 18  7  8 17  8  9 16
  9 10 15 10 11 14 11 12 13 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.2766121e-05 2.5000000e-01 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 2.8571430e-01 0.0000000e+00 1.0000000e+00 0.0000000e+00 6.4823278e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 3.9539379e-03 0.0000000e+00 1.6666667e-01
 2.1578270e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  177.07914506406826
Other difference exceed the threshold, need to switch module.
the difference value is:  177.07914506406826
Hash difference exceed the threshold, need to switch module.
the difference value is:  177.07914506406826
Nested loop difference exceed the threshold, need to switch module.
Planning took 194.8ms
qtest5a, predicted time: 1689.7
qtest5a,(predicted 1689.7),/*+ MergeJoin(mi1 k mk kt mc cn t ct ci rt it1 n)
 MergeJoin(mi1 k mk kt mc cn t ct ci rt it1)
 MergeJoin(mi1 k mk kt mc cn t ct ci rt)
 MergeJoin(mi1 k mk kt mc cn t ct ci)
 MergeJoin(mi1 k mk kt mc cn t ct)
 MergeJoin(k mk kt mc cn t ct)
 MergeJoin(mk kt mc cn t ct)
 HashJoin(kt mc cn t ct)
 MergeJoin(mc cn t ct)
 MergeJoin(mc cn t)
 HashJoin(mc cn)
 IndexScan(mi1)
 IndexScan(k)
 IndexScan(mk)
 SeqScan(kt)
 SeqScan(mc)
 IndexScan(cn)
 SeqScan(t)
 SeqScan(ct)
 SeqScan(ci)
 SeqScan(rt)
 IndexScan(it1)
 IndexScan(n)
 Leading((((((mi1 (k (mk (kt (((mc cn) t) ct))))) ci) rt) it1) n)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k,
movie_companies as mc,
company_type as ct,
company_name as cn
WHERE
t.id = ci.movie_id
AND t.id = mc.movie_id
AND t.id = mi1.movie_id
AND t.id = mk.movie_id
AND mc.company_type_id = ct.id
AND mc.company_id = cn.id
AND k.id = mk.keyword_id
AND mi1.info_type_id = it1.id
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (it1.id IN ('2'))
AND (mi1.info in ('Color'))
AND (kt.kind in ('movie','tv series'))
AND (rt.role in ('actor','producer'))
AND (n.gender in ('m'))
AND (n.name_pcode_cf in ('J5252','M6352','R363','S3152','S5362'))
AND (t.production_year <= 2020)
AND (t.production_year >= 1950)
AND (cn.name in ('American Broadcasting Company (ABC)','Columbia Broadcasting System (CBS)','National Broadcasting Company (NBC)'))
AND (ct.kind in ('distributors'))
GROUP BY t.production_year, cn.name
ORDER BY t.production_year, cn.name;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 3 1 1 1 1 0 1 1 1 0 1 3 4 3 4 4 4 3 4 5 4 4]
indexes_env_matrix for this sql:  [ 1  2  3  2  0  0  3  4 23  4  5 22  5  6 21  6  7 20  7  8 19  8  9 18
  9 10 17 10 11 16 11 12 15 12 13 14 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.2766121e-05 2.5000000e-01 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 2.8571430e-01 0.0000000e+00 1.0000000e+00 0.0000000e+00 6.4823278e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 3.4800316e-03 0.0000000e+00 1.6666667e-01
 9.0642136e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  171.52037754481475
Other difference exceed the threshold, need to switch module.
the difference value is:  171.52037754481475
Hash difference exceed the threshold, need to switch module.
the difference value is:  171.52037754481475
Nested loop difference exceed the threshold, need to switch module.
Planning took 1002.3ms
qtest5b, predicted time: 2.4
qtest5b,(predicted 2.4),/*+ MergeJoin(kt rt n ci t mc ct mi1 mk cn k it1)
 MergeJoin(kt rt n ci t mc ct mi1 mk cn k)
 MergeJoin(kt rt n ci t mc ct mi1 mk cn)
 MergeJoin(kt rt n ci t mc ct mi1 mk)
 MergeJoin(kt rt n ci t mc ct mi1)
 MergeJoin(kt rt n ci t mc ct)
 MergeJoin(kt rt n ci t mc)
 MergeJoin(rt n ci t mc)
 MergeJoin(rt n ci t)
 MergeJoin(rt n ci)
 HashJoin(n ci)
 SeqScan(kt)
 SeqScan(rt)
 IndexScan(n)
 SeqScan(ci)
 SeqScan(t)
 IndexScan(mc)
 SeqScan(ct)
 IndexScan(mi1)
 IndexScan(mk)
 SeqScan(cn)
 SeqScan(k)
 SeqScan(it1)
 Leading((((((((kt (((rt (n ci)) t) mc)) ct) mi1) mk) cn) k) it1)) */
---------------------------------------
sql_str:  SELECT COUNT(*) FROM title as t,
kind_type as kt,
info_type as it1,
movie_info as mi1,
cast_info as ci,
role_type as rt,
name as n,
movie_keyword as mk,
keyword as k,
movie_companies as mc,
company_type as ct,
company_name as cn
WHERE
t.id = ci.movie_id
AND t.id = mc.movie_id
AND t.id = mi1.movie_id
AND t.id = mk.movie_id
AND mc.company_type_id = ct.id
AND mc.company_id = cn.id
AND k.id = mk.keyword_id
AND mi1.info_type_id = it1.id
AND t.kind_id = kt.id
AND ci.person_id = n.id
AND ci.role_id = rt.id
AND (it1.id IN ('2'))
AND (mi1.info in ('Color'))
AND (kt.kind in ('movie','tv series'))
AND (rt.role in ('actress','producer'))
AND (n.gender in ('f'))
AND (n.name_pcode_cf in ('B6261','B6526','J5252','M6352','R363','S3152','S5362'))
AND (t.production_year <= 1990)
AND (t.production_year >= 1950)
AND (cn.name in ('American Broadcasting Company (ABC)','Columbia Broadcasting System (CBS)','National Broadcasting Company (NBC)'))
AND (ct.kind in ('distributors'))
GROUP BY t.production_year, cn.name
ORDER BY t.production_year, cn.name;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 0 1 1 1 1 1 0 1 3 4 3 4 4 4 3 4 3 4 5 4]
indexes_env_matrix for this sql:  [ 1  2 23  2  3 22  3  4 21  4  5 20  5  6 19  6  7 18  7  8 17  8  9 16
  9 10 15 10 11 14 11 12 13 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.2766121e-05 2.5000000e-01 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 2.8571430e-01 0.0000000e+00 1.0000000e+00 0.0000000e+00 6.4823278e-03
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 2.2430762e-03 0.0000000e+00 1.6666667e-01
 2.1578270e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  177.0791349312976
Other difference exceed the threshold, need to switch module.
the difference value is:  177.0791349312976
Hash difference exceed the threshold, need to switch module.
the difference value is:  177.0791349312976
Nested loop difference exceed the threshold, need to switch module.
Planning took 202.6ms
qtest5c, predicted time: 1688.8
qtest5c,(predicted 1688.8),/*+ MergeJoin(mi1 k mk kt mc cn t ct ci rt it1 n)
 MergeJoin(mi1 k mk kt mc cn t ct ci rt it1)
 MergeJoin(mi1 k mk kt mc cn t ct ci rt)
 MergeJoin(mi1 k mk kt mc cn t ct ci)
 MergeJoin(mi1 k mk kt mc cn t ct)
 MergeJoin(k mk kt mc cn t ct)
 MergeJoin(mk kt mc cn t ct)
 HashJoin(kt mc cn t ct)
 MergeJoin(mc cn t ct)
 MergeJoin(mc cn t)
 HashJoin(mc cn)
 IndexScan(mi1)
 IndexScan(k)
 IndexScan(mk)
 SeqScan(kt)
 SeqScan(mc)
 IndexScan(cn)
 SeqScan(t)
 SeqScan(ct)
 SeqScan(ci)
 SeqScan(rt)
 IndexScan(it1)
 IndexScan(n)
 Leading((((((mi1 (k (mk (kt (((mc cn) t) ct))))) ci) rt) it1) n)) */
---------------------------------------
sql_str:  SELECT
    MIN(an.name) AS cool_actor_pseudonym,
    MIN(t.title) AS series_named_after_char
FROM
    aka_name AS an,
    cast_info AS ci,
    company_name AS cn,
    keyword AS k,
    movie_companies AS mc,
    movie_keyword AS mk,
    name AS n,
    title AS t
WHERE
    cn.country_code = '[us]'
    AND k.keyword = 'character-name-in-title'
    AND an.person_id = n.id
    AND n.id = ci.person_id
    AND ci.movie_id = t.id
    AND t.id = mk.movie_id
    AND mk.keyword_id = k.id
    AND t.id = mc.movie_id
    AND mc.company_id = cn.id
    AND an.person_id = ci.person_id
    AND ci.movie_id = mc.movie_id
    AND ci.movie_id = mk.movie_id
    AND mc.movie_id = mk.movie_id
GROUP BY an.name, t.title
ORDER BY an.name, t.title;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 3 4 4 4 4 4 5 4]
indexes_env_matrix for this sql:  [ 1  2 15  2  3 14  3  4 13  4  5 12  5  6 11  6  7 10  7  8  9  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 3.6416635e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 7.4532309e-06
 0.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 1.0000000e+00 0.0000000e+00 0.0000000e+00
 1.0000000e+00 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  125.5375032644358
Other difference exceed the threshold, need to switch module.
the difference value is:  125.5375032644358
Hash difference exceed the threshold, need to switch module.
the difference value is:  125.5375032644358
Nested loop difference exceed the threshold, need to switch module.
Planning took 196.6ms
qtest6a, predicted time: 8.2
qtest6a,(predicted 8.2),/*+ MergeJoin(ci n mk t k an mc cn)
 MergeJoin(ci n mk t k an mc)
 MergeJoin(ci n mk t k an)
 MergeJoin(ci n mk t k)
 MergeJoin(ci n mk t)
 MergeJoin(ci n mk)
 MergeJoin(ci n)
 IndexScan(ci)
 SeqScan(n)
 IndexScan(mk)
 IndexScan(t)
 SeqScan(k)
 SeqScan(an)
 IndexScan(mc)
 SeqScan(cn)
 Leading((((((((ci n) mk) t) k) an) mc) cn)) */
---------------------------------------
sql_str:  SELECT
    MIN(an.name) AS cool_actor_pseudonym,
    MIN(t.title) AS series_named_after_char
FROM
    aka_name AS an,
    cast_info AS ci,
    company_name AS cn,
    keyword AS k,
    movie_companies AS mc,
    movie_keyword AS mk,
    name AS n,
    title AS t
WHERE
    cn.country_code = '[uk]'
    AND k.keyword = 'character-name-in-title'
    AND an.person_id = n.id
    AND n.id = ci.person_id
    AND ci.movie_id = t.id
    AND t.id = mk.movie_id
    AND mk.keyword_id = k.id
    AND t.id = mc.movie_id
    AND mc.company_id = cn.id
    AND an.person_id = ci.person_id
    AND ci.movie_id = mc.movie_id
    AND ci.movie_id = mk.movie_id
    AND mc.movie_id = mk.movie_id
GROUP BY an.name, t.title
ORDER BY an.name, t.title;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 3 4 4 4 4 5 4 4]
indexes_env_matrix for this sql:  [ 1  2 15  2  3 14  3  4 13  4  5 12  5  6 11  6  7 10  7  8  9  8  0  0
  9  0  0 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0]
query_enc_matrix for this sql:  [1.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 9.361822e-05 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 7.453231e-06
 0.000000e+00 0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00
 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 1.000000e+00 0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00
 1.000000e+00 0.000000e+00 0.000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  135.10822852254904
Other difference exceed the threshold, need to switch module.
the difference value is:  135.10822852254904
Hash difference exceed the threshold, need to switch module.
the difference value is:  135.10822852254904
Nested loop difference exceed the threshold, need to switch module.
Planning took 344.4ms
qtest6b, predicted time: 7475.8
qtest6b,(predicted 7475.8),/*+ HashJoin(an mk ci mc cn t n k)
 HashJoin(mk ci mc cn t n k)
 HashJoin(mk ci mc cn t n)
 HashJoin(ci mc cn t n)
 HashJoin(ci mc cn t)
 HashJoin(mc cn t)
 HashJoin(mc cn)
 SeqScan(an)
 SeqScan(mk)
 SeqScan(ci)
 IndexScan(mc)
 IndexScan(cn)
 SeqScan(t)
 IndexScan(n)
 IndexScan(k)
 Leading((an ((mk ((ci ((mc cn) t)) n)) k))) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
movie_keyword as mk,
keyword as k,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND t.id = mk.movie_id
AND mk.keyword_id = k.id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('tv movie','video movie'))
AND (t.production_year <= 2015)
AND (t.production_year >= 1975)
AND (mi1.info IN ('Biography','Fantasy','OFM:35 mm','OFM:Video','Romance','Sci-Fi','Sport','Thriller'))
AND (it1.id IN ('3','7'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 7.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 3.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 5000.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 500000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND rt.id = ci.role_id
AND (n.gender in ('f') OR n.gender IS NULL)
AND (n.name_pcode_nf in ('C6235') OR n.name_pcode_nf IS NULL)
AND (ci.note in ('(archive footage)') OR ci.note IS NULL)
AND (rt.role in ('actress'))
AND (it5.id in ('34'))
GROUP BY t.production_year, n.name
ORDER BY t.production_year, n.name;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 4 3 5 4 5 4 5 3 4]
indexes_env_matrix for this sql:  [ 1  2 31  2  3 30  3  4 29  4  5  6  5  0  0  6  7 28  7  8 27  8  9 26
  9 10 25 10 11 24 11 12 23 12 13 22 13 14 21 14 15 20 15 16 19 16 17 18
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0 28  0  0 29  0  0 30  0  0 31  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 6.0810786e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 1.0000000e+00
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.9960392e-02
 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04 0.0000000e+00
 1.0000000e+00 0.0000000e+00 1.5144364e-02 6.8371450e-03 8.3333336e-02
 7.9754597e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  210.3436022879113
Other difference exceed the threshold, need to switch module.
the difference value is:  210.3436022879113
Hash difference exceed the threshold, need to switch module.
the difference value is:  210.3436022879113
Nested loop difference exceed the threshold, need to switch module.
Planning took 1965.1ms
qtest7a, predicted time: 1.8
qtest7a,(predicted 1.8),/*+ MergeJoin(n ci k mk t mii2 it4 kt pi1 mii1 it5 rt mi1 it3 it1 an)
 MergeJoin(n ci k mk t mii2 it4 kt pi1 mii1 it5 rt mi1 it3 it1)
 MergeJoin(n ci k mk t mii2 it4 kt pi1 mii1 it5 rt mi1 it3)
 MergeJoin(n ci k mk t mii2 it4 kt pi1 mii1 it5 rt mi1)
 MergeJoin(n ci k mk t mii2 it4 kt pi1 mii1 it5 rt)
 MergeJoin(n ci k mk t mii2 it4 kt pi1 mii1 it5)
 MergeJoin(n ci k mk t mii2 it4 kt pi1 mii1)
 MergeJoin(n ci k mk t mii2 it4 kt pi1)
 MergeJoin(n ci k mk t mii2 it4 kt)
 MergeJoin(n ci k mk t mii2 it4)
 MergeJoin(n ci k mk t mii2)
 MergeJoin(ci k mk t mii2)
 MergeJoin(ci k mk t)
 NestLoop(k mk t)
 HashJoin(k mk)
 SeqScan(n)
 IndexScan(ci)
 SeqScan(k)
 SeqScan(mk)
 IndexScan(t)
 IndexScan(mii2)
 IndexScan(it4)
 IndexScan(kt)
 IndexScan(pi1)
 IndexScan(mii1)
 SeqScan(it5)
 SeqScan(rt)
 IndexScan(mi1)
 SeqScan(it3)
 SeqScan(it1)
 SeqScan(an)
 Leading((((((((((((n ((ci ((k mk) t)) mii2)) it4) kt) pi1) mii1) it5) rt) mi1) it3) it1) an)) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
movie_keyword as mk,
keyword as k,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND t.id = mk.movie_id
AND mk.keyword_id = k.id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('tv movie','video movie'))
AND (t.production_year <= 2015)
AND (t.production_year >= 1975)
AND (mi1.info IN ('Biography','Fantasy','OFM:35 mm','OFM:Video','Romance','Sci-Fi','Sport','Thriller'))
AND (it1.id IN ('3','7'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 7.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 3.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 5000.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 500000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND rt.id = ci.role_id
AND (n.gender in ('m') OR n.gender IS NULL)
AND (n.name_pcode_nf in ('C6235') OR n.name_pcode_nf IS NULL)
AND (ci.note in ('(archive footage)') OR ci.note IS NULL)
AND (rt.role in ('actor'))
AND (it5.id in ('34'))
GROUP BY t.production_year, n.name
ORDER BY t.production_year, n.name;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 5 4 4 4 4 5 3 5 3 3]
indexes_env_matrix for this sql:  [ 1  2 31  2  3 30  3  4 29  4  5 28  5  6 27  6  7 26  7  8 25  8  9 24
  9 10 23 10 11 22 11 12 21 12 13 20 13 14 19 14 15 18 15 16 17 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0 28  0  0 29  0  0 30  0  0 31  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 6.0810786e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 1.0000000e+00
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 2.9960392e-02
 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04 0.0000000e+00
 1.0000000e+00 0.0000000e+00 1.8676706e-02 6.8371450e-03 8.3333336e-02
 7.9754597e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  212.6792696550492
Other difference exceed the threshold, need to switch module.
the difference value is:  212.6792696550492
Hash difference exceed the threshold, need to switch module.
the difference value is:  212.6792696550492
Nested loop difference exceed the threshold, need to switch module.
Planning took 445.4ms
qtest7b, predicted time: 1187.6
qtest7b,(predicted 1187.6),/*+ HashJoin(k it5 kt it4 rt ci it1 mii1 it3 t mi1 n mii2 pi1 an mk)
 HashJoin(it5 kt it4 rt ci it1 mii1 it3 t mi1 n mii2 pi1 an mk)
 HashJoin(it5 kt it4 rt ci it1 mii1 it3 t mi1 n mii2 pi1 an)
 HashJoin(kt it4 rt ci it1 mii1 it3 t mi1 n mii2 pi1 an)
 HashJoin(kt it4 rt ci it1 mii1 it3 t mi1 n mii2 pi1)
 HashJoin(kt it4 rt ci it1 mii1 it3 t mi1 n mii2)
 HashJoin(it4 rt ci it1 mii1 it3 t mi1 n mii2)
 HashJoin(rt ci it1 mii1 it3 t mi1 n mii2)
 HashJoin(rt ci it1 mii1 it3 t mi1 n)
 HashJoin(ci it1 mii1 it3 t mi1 n)
 HashJoin(ci it1 mii1 it3 t mi1)
 HashJoin(it1 mii1 it3 t mi1)
 HashJoin(mii1 it3 t mi1)
 HashJoin(mii1 it3 t)
 HashJoin(mii1 it3)
 SeqScan(k)
 IndexScan(it5)
 SeqScan(kt)
 IndexScan(it4)
 IndexScan(rt)
 SeqScan(ci)
 IndexScan(it1)
 IndexScan(mii1)
 IndexScan(it3)
 SeqScan(t)
 SeqScan(mi1)
 IndexScan(n)
 IndexScan(mii2)
 IndexScan(pi1)
 IndexScan(an)
 IndexScan(mk)
 Leading((k ((it5 (((kt (it4 ((rt ((ci (it1 (((mii1 it3) t) mi1))) n)) mii2))) pi1) an)) mk))) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND mii2.movie_id = mii1.movie_id
AND mi1.movie_id = mii1.movie_id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('episode','movie'))
AND (t.production_year <= 2015)
AND (t.production_year >= 1925)
AND (mi1.info IN ('Black and White'))
AND (it1.id IN ('2'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 7.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 3.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 10000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND an.person_id = pi1.person_id
AND rt.id = ci.role_id
AND (n.gender in ('f') OR n.gender IS NULL)
AND (n.name_pcode_nf in ('A5136','B4532','C6435','H4524','J2451','J6362','L2525','M6415','S4125','W5245'))
AND (ci.note in ('(writer)') OR ci.note IS NULL)
AND (rt.role in ('actress','cinematographer','writer'))
AND (it5.id in ('26'))
GROUP BY t.production_year, n.name
ORDER BY t.production_year, n.name;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 1 1 0 1 1 1 3 4 4 4 3 4 4 3 5 4 3 3 4 3]
indexes_env_matrix for this sql:  [ 1  2 27  2  3 26  3  4 25  4  5 24  5  6 23  6  7 22  7  8 21  8  9 20
  9 10 19 10 11 18 11 12 17 12 13 16 13 14 15 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 6.1365104e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 0.0000000e+00
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.8122478e-03
 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04 0.0000000e+00
 0.0000000e+00 0.0000000e+00 3.9400204e-04 4.6092607e-02 2.5000000e-01
 9.3211162e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  185.8455390868591
Other difference exceed the threshold, need to switch module.
the difference value is:  185.8455390868591
Hash difference exceed the threshold, need to switch module.
the difference value is:  185.8455390868591
Nested loop difference exceed the threshold, need to switch module.
Planning took 2143.1ms
qtest8a, predicted time: 3.9
qtest8a,(predicted 3.9),/*+ MergeJoin(it3 mi1 mii1 mii2 t ci it4 n kt it1 an rt pi1 it5)
 MergeJoin(it3 mi1 mii1 mii2 t ci it4 n kt it1 an rt pi1)
 MergeJoin(it3 mi1 mii1 mii2 t ci it4 n kt it1 an rt)
 MergeJoin(it3 mi1 mii1 mii2 t ci it4 n kt it1 an)
 MergeJoin(it3 mi1 mii1 mii2 t ci it4 n kt it1)
 MergeJoin(it3 mi1 mii1 mii2 t ci it4 n kt)
 MergeJoin(it3 mi1 mii1 mii2 t ci it4 n)
 MergeJoin(it3 mi1 mii1 mii2 t ci it4)
 MergeJoin(it3 mi1 mii1 mii2 t ci)
 MergeJoin(it3 mi1 mii1 mii2 t)
 MergeJoin(it3 mi1 mii1 mii2)
 MergeJoin(it3 mi1 mii1)
 HashJoin(mi1 mii1)
 SeqScan(it3)
 IndexScan(mi1)
 IndexScan(mii1)
 IndexScan(mii2)
 SeqScan(t)
 IndexScan(ci)
 SeqScan(it4)
 SeqScan(n)
 SeqScan(kt)
 SeqScan(it1)
 SeqScan(an)
 SeqScan(rt)
 SeqScan(pi1)
 IndexScan(it5)
 Leading(((((((((((((it3 (mi1 mii1)) mii2) t) ci) it4) n) kt) it1) an) rt) pi1) it5)) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND mii2.movie_id = mii1.movie_id
AND mi1.movie_id = mii1.movie_id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('episode','movie'))
AND (t.production_year <= 2015)
AND (t.production_year >= 1925)
AND (mi1.info IN ('Black and White'))
AND (it1.id IN ('2'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 7.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 3.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 10000.0)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND ci.person_id = an.person_id
AND an.person_id = pi1.person_id
AND rt.id = ci.role_id
AND (n.gender in ('m') OR n.gender IS NULL)
AND (n.name_pcode_nf in ('A5136','B4532','C6435','H4524','J2451','J6362','L2525','M6415','S4125','W5245'))
AND (ci.note in ('(writer)') OR ci.note IS NULL)
AND (rt.role in ('actor','cinematographer','writer'))
AND (it5.id in ('26'))
GROUP BY t.production_year, n.name
ORDER BY t.production_year, n.name;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 1 1 0 1 1 1 3 4 4 4 3 4 4 3 5 4 3 3 4 3]
indexes_env_matrix for this sql:  [ 1  2 27  2  3 26  3  4 25  4  5 24  5  6 23  6  7 22  7  8 21  8  9 20
  9 10 19 10 11 18 11 12 17 12 13 16 13 14 15 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0 20  0  0 21  0  0 22  0  0 23  0  0 24  0  0
 25  0  0 26  0  0 27  0  0]
query_enc_matrix for this sql:  [1.0000000e+00 6.1365104e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 8.8495575e-03
 0.0000000e+00 8.8495575e-03 8.8495575e-03 8.8495575e-03 0.0000000e+00
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.8122478e-03
 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04 0.0000000e+00
 0.0000000e+00 0.0000000e+00 4.8590387e-04 4.6092607e-02 2.5000000e-01
 9.3211162e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  194.72237254803804
Other difference exceed the threshold, need to switch module.
the difference value is:  194.72237254803804
Hash difference exceed the threshold, need to switch module.
the difference value is:  194.72237254803804
Nested loop difference exceed the threshold, need to switch module.
Planning took 1644.4ms
qtest8b, predicted time: 4555.2
qtest8b,(predicted 4555.2),/*+ MergeJoin(an it4 t mii1 it3 mi1 mii2 kt it1 ci rt pi1 n it5)
 MergeJoin(it4 t mii1 it3 mi1 mii2 kt it1 ci rt pi1 n it5)
 MergeJoin(it4 t mii1 it3 mi1 mii2 kt it1 ci rt pi1 n)
 MergeJoin(it4 t mii1 it3 mi1 mii2 kt it1 ci rt pi1)
 MergeJoin(it4 t mii1 it3 mi1 mii2 kt it1 ci rt)
 MergeJoin(it4 t mii1 it3 mi1 mii2 kt it1 ci)
 MergeJoin(it4 t mii1 it3 mi1 mii2 kt it1)
 MergeJoin(it4 t mii1 it3 mi1 mii2 kt)
 MergeJoin(it4 t mii1 it3 mi1 mii2)
 MergeJoin(t mii1 it3 mi1 mii2)
 MergeJoin(mii1 it3 mi1 mii2)
 MergeJoin(mii1 it3 mi1)
 HashJoin(mii1 it3)
 SeqScan(an)
 SeqScan(it4)
 IndexScan(t)
 IndexScan(mii1)
 IndexScan(it3)
 SeqScan(mi1)
 IndexScan(mii2)
 SeqScan(kt)
 IndexScan(it1)
 SeqScan(ci)
 SeqScan(rt)
 SeqScan(pi1)
 IndexScan(n)
 IndexScan(it5)
 Leading((an ((((((((it4 (t (((mii1 it3) mi1) mii2))) kt) it1) ci) rt) pi1) n) it5))) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
movie_keyword as mk,
keyword as k
WHERE
t.id = mi1.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND t.id = mk.movie_id
AND mii2.movie_id = mii1.movie_id
AND mi1.movie_id = mii1.movie_id
AND mk.movie_id = mi1.movie_id
AND mk.keyword_id = k.id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('episode','movie'))
AND (t.production_year <= 1975)
AND (t.production_year >= 1925)
AND (mi1.info IN ('PCS:Spherical','PFM:35 mm','RAT:1.33 : 1','RAT:1.37 : 1'))
AND (it1.id IN ('1','16','7'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 7.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 3.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 1000.0)
GROUP BY t.production_year
ORDER BY t.production_year;
Features: [GROUP BY, ORDER BY, Aggregate Function, Subquery]
Vector:  [1, 1, 1, 0]
operators_env_matrix for this sql:  [1 1 1 1 1 1 1 1 1 3 4 4 4 4 4 5 3 3 5]
indexes_env_matrix for this sql:  [ 1  2 19  2  3 18  3  4 17  4  5 16  5  6 15  6  7 14  7  8 13  8  9 12
  9 10 11 10  0  0 11  0  0 12  0  0 13  0  0 14  0  0 15  0  0 16  0  0
 17  0  0 18  0  0 19  0  0]
query_enc_matrix for this sql:  [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 1.0000000e+00
 0.0000000e+00 8.8495575e-03 8.8495575e-03 0.0000000e+00 1.0000000e+00
 2.8571430e-01 0.0000000e+00 0.0000000e+00 0.0000000e+00 4.3821599e-02
 0.0000000e+00 0.0000000e+00 8.6084771e-04 8.3403679e-04 0.0000000e+00
 1.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00
 1.3999696e-01 0.0000000e+00 0.0000000e+00]
sql_feature_encode_matrix for this sql:  [1 1 1 0]
the difference value is:  142.3242186602816
Other difference exceed the threshold, need to switch module.
the difference value is:  142.3242186602816
Hash difference exceed the threshold, need to switch module.
the difference value is:  142.3242186602816
Nested loop difference exceed the threshold, need to switch module.
Planning took 459.4ms
qtest9a, predicted time: 2.9
qtest9a,(predicted 2.9),/*+ MergeJoin(mi1 it4 mii2 t mk kt mii1 it1 k it3)
 MergeJoin(mi1 it4 mii2 t mk kt mii1 it1 k)
 MergeJoin(mi1 it4 mii2 t mk kt mii1 it1)
 MergeJoin(mi1 it4 mii2 t mk kt mii1)
 MergeJoin(mi1 it4 mii2 t mk kt)
 MergeJoin(mi1 it4 mii2 t mk)
 MergeJoin(mi1 it4 mii2 t)
 NestLoop(it4 mii2 t)
 HashJoin(it4 mii2)
 IndexScan(mi1)
 IndexScan(it4)
 SeqScan(mii2)
 IndexScan(t)
 IndexScan(mk)
 IndexScan(kt)
 IndexScan(mii1)
 IndexScan(it1)
 SeqScan(k)
 SeqScan(it3)
 Leading((((((((mi1 ((it4 mii2) t)) mk) kt) mii1) it1) k) it3)) */
---------------------------------------
sql_str:  SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
movie_keyword as mk,
keyword as k
WHERE
t.id = mi1.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND t.id = mk.movie_id
AND mii2.movie_id = mii1.movie_id
AND mi1.movie_id = mii1.movie_id
AND mk.movie_id = mi1.movie_id
AND mk.keyword_id = k.id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (kt.kind IN ('episode','movie'))
AND (t.production_year <= 2020)
AND (t.production_year >= 1925)
AND (mi1.info IN ('PCS:Spherical','PFM:35 mm','RAT:1.33 : 1','RAT:1.37 : 1'))
AND (it1.id IN ('1','16','7'))
AND it3.id = '100'
AND it4.id = '101'
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii2.info::float <= 7.0)
AND (mii2.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 3.0 <= mii2.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND 0.0 <= mii1.info::float)
AND (mii1.info ~ '^(?:[1-9]\d*|0)?(?:\.\d+)?$' AND mii1.info::float <= 1000.0)
GROUP BY t.production_year
ORDER BY t.production_year;
